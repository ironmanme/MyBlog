<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>persilee&#39;s Blog</title>
    <link>https://www.h.lishaoy.net/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>李少颖的博客</description>
    <pubDate>Wed, 07 Nov 2018 10:17:35 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Flutter：手拉手带你极速构建漂亮的跨平台(iOS/Android)移动应用 ✿ 初识</title>
      <link>https://www.h.lishaoy.net/beautifulFlutter.html</link>
      <guid>https://www.h.lishaoy.net/beautifulFlutter.html</guid>
      <pubDate>Mon, 05 Nov 2018 02:41:09 GMT</pubDate>
      <description>
      
        &lt;span itemprop=&quot;image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;/images/loading.gif&quot; data-original=&quot;https://cdn.lishaoy.net/beautifulFlutter/flutter_750x400.png&quot; class=&quot;full-image&quot; alt=&quot;Flutter&quot; title=&quot;Flutter&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;p&gt;最近，学习了一些 &lt;code&gt;Flutter&lt;/code&gt; 相关的知识，做了如下的小移动应用，当然是一套代码即可在 &lt;code&gt;iOS&lt;/code&gt; 平台运行,也可以在 &lt;code&gt;Android&lt;/code&gt; 运行。&lt;/p&gt;
&lt;p&gt;下面我将手拉手带您快速构建出漂亮的移动应用界面（如下👇小视频）&lt;/p&gt;
&lt;video id=&quot;flutter&quot; class=&quot;video-js vjs-default-skin&quot; controls preload=&quot;auto&quot; poster=&quot;https://cdn.lishaoy.net/flutter_start/flutter5.1.png&quot; data-setup=&quot;{&#39;example_option&#39;:true}&quot;&gt;
    &lt;source src=&quot;https://cdn.lishaoy.net/flutter_start/flutter7.mp4&quot; type=&quot;video/mp4&quot;&gt;
&lt;/video&gt;

&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="/images/loading.gif" data-original="https://cdn.lishaoy.net/beautifulFlutter/flutter_750x400.png" class="full-image" alt="Flutter" title="Flutter"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><p>最近，学习了一些 <code>Flutter</code> 相关的知识，做了如下的小移动应用，当然是一套代码即可在 <code>iOS</code> 平台运行,也可以在 <code>Android</code> 运行。</p><p>下面我将手拉手带您快速构建出漂亮的移动应用界面（如下👇小视频）</p><video id="flutter" class="video-js vjs-default-skin" controls preload="auto" poster="https://cdn.lishaoy.net/flutter_start/flutter5.1.png" data-setup="{'example_option':true}">    <source src="https://cdn.lishaoy.net/flutter_start/flutter7.mp4" type="video/mp4"></video><hr><a id="more"></a><h2 id="初识-Flutter"><a href="#初识-Flutter" class="headerlink" title="初识 Flutter"></a>初识 Flutter</h2><p><a href="https://flutterchina.club" target="_blank" rel="noopener">Flutter</a> 是谷歌的移动UI框架，可以快速在iOS和Android上构建高质量的原生用户界面。</p><p>Google 推出 Flutter 移动应用框架已经有三年，直到今年的 Google I/O 开发大会才正式介绍 <code>Flutter</code> 且发布 Beta 版本, <a href="https://www.youtube.com/watch?v=w2TcYP8qiRI" target="_blank" rel="noopener">Flutter Google I/O 视频</a> 这个是 <code>Flutter</code> 在油管（YouTube）的 Google I/O 开发者大会的视频，请自行观看。</p><p>再来看看更加生动的视频介绍，加速您的初识 <code>Flutter</code></p><video id="IntroducingFlutter" class="video-js vjs-default-skin" controls preload="auto" poster="https://cdn.lishaoy.net/beautifulFlutter/IntroducingFlutter1.png" data-setup="{'example_option':true}">    <source src="https://cdn.lishaoy.net/beautifulFlutter/IntroducingFlutter.mp4" type="video/mp4"></video><hr><p>Google 的广告应用 Adwords，阿里的闲鱼 App 都是基于 <code>Flutter</code> 框架开发的。</p><p>以下是阿里巴巴用 Flutter 打造了5000多万用户闲鱼 App (Flutter Developer Story) 的故事视频</p><video id="FlutterDeveloperStory" class="video-js vjs-default-skin" controls preload="auto" poster="https://cdn.lishaoy.net/beautifulFlutter/FlutterDeveloperStory2.png" data-setup="{'example_option':true}">    <source src="https://cdn.lishaoy.net/beautifulFlutter/FlutterDeveloperStory.mp4" type="video/mp4"></video><hr><p><code>Flutter</code> 作为谷歌推出的跨平台开发框架，一经推出便吸引了不少注意,在 GitHub 上的 Star 数已超过 <strong>4W+</strong> 。</p><p><a href="https://www.bilibili.com/video/av27857568/" target="_blank" rel="noopener">CMTC全球大前端技术大会 ㄧ Flutter视频</a> 这是 Google中国在 <strong>bilibili</strong> 上发布的视频，请自行观看。</p><h2 id="Flutter-特性"><a href="#Flutter-特性" class="headerlink" title="Flutter 特性"></a>Flutter 特性</h2><p>通过以上的视频，对于 <code>Flutter</code> 已有所认识，下面再来看看 <code>Flutter</code> 的以下特性</p><h3 id="热重载"><a href="#热重载" class="headerlink" title="热重载"></a>热重载</h3><p>当你修改了代码 <kbd>⌘</kbd> - <kbd>S</kbd> ，可立刻看到效果，而且可以保持界面状态不变（如文本框输入的信息不会改变），如图：</p><p><img src="https://cdn.lishaoy.net/beautifulFlutter/HotReload1.gif" alt="no-shadow" title="Hot reload"></p><h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><p><code>Flutter</code> 自带 Google 推行的设计系统：<a href="https://www.material.io" target="_blank" rel="noopener">Material Design</a> ，它提供了丰富的 <strong>Material Design</strong> 风格的组件（比如：按钮、输入框、对话框、导航栏、边栏等），而且也提供了丰富的 <strong>iOS（Cupertino）</strong> 风格的组件，利用这些风格的组件能够快速的构建应用，如图</p><p><img src="https://cdn.lishaoy.net/beautifulFlutter/Material.jpg" alt="no-shadow" title="Material Design"></p><h3 id="widget"><a href="#widget" class="headerlink" title="widget"></a>widget</h3><p><strong>widget</strong> 是 <code>Flutter</code> 应用程序基本构建块, <code>Flutter</code> 既不使用 WebView，也不使用操作系统的原生控件，相反 <code>Flutter</code> 使用自己的高性能渲染引擎来绘制<strong>widget</strong> ， <code>Flutter</code> 的中心思想是用 <strong>widget</strong> 构建你的 UI（<strong>一切皆为 widget</strong>） ，如图是官网给出的框架图：</p><p><img src="https://cdn.lishaoy.net/beautifulFlutter/widget.png" alt="no-shadow" title="widget"></p><p>在这个架构里，你可以实现 <code>Flutter</code> 提供的所有现成的 <strong>widget</strong> ，也可以创建自己定制的 <strong>widget</strong> ，每个 <strong>widget</strong> 都是公开的，你可以从高层次且统一的 <strong>widget</strong> 中获得开发效率优势，这个设计的目标是为了用更少的代码做更多的事情。</p><h3 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h3><p><code>Flutter</code> 使用 C、C ++、Dart 和 Skia（2D渲染引擎）技术构建，如上图，底层（engine）是用 C ++ ，框架是用 Dart ，当然我们开发使用的也是 Dart。</p><p>Dart 是 Google 发布的一种高效、简洁、拥有完整类型系统的 <code>结构化的Web编程</code> 语言， <code>Flutter</code> 官方给出为什么选择 Dart 作为开发语言的原因，如下</p><ul><li>开发人员的效率</li><li>面向对象</li><li>可预测，高性能</li><li>快速内存分配</li></ul><p>对于开发者（语言使用者）来说，不必太担心，Dart 和 Java 、 JavaScript 比较类似，有一些程序语言基础，便可拿来即用（不清楚的看看语法、关键字、类型即可）。</p><p>现在想必您对 <code>Flutter</code> 已经有了一定的认识，在之后的篇幅了会手拉手带你极速构如文头小视频的小应用。</p><h2 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h2><p><img class="hidden" src="https://cdn.lishaoy.net/beautifulFlutter/flutter_750x400.png" alt="VS Code" width="100%" title="VS Code" align="center"></p>]]></content:encoded>
      
      <comments>https://www.h.lishaoy.net/beautifulFlutter.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>VS Code：让你工作效率翻倍的23个插件和23个编辑技巧</title>
      <link>https://www.h.lishaoy.net/VSCodeCodingSkills.html</link>
      <guid>https://www.h.lishaoy.net/VSCodeCodingSkills.html</guid>
      <pubDate>Sat, 13 Oct 2018 07:39:44 GMT</pubDate>
      <description>
      
        &lt;span itemprop=&quot;image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;/images/loading.gif&quot; data-original=&quot;https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code.jpg&quot; class=&quot;full-image&quot; alt=&quot;VS Code&quot; title=&quot;VS Code&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;p&gt;总结了一些平时常用且好用的 &lt;strong&gt;VS Code&lt;/strong&gt; 的插件和编辑技巧分享出来。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="/images/loading.gif" data-original="https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code.jpg" class="full-image" alt="VS Code" title="VS Code"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><p>总结了一些平时常用且好用的 <strong>VS Code</strong> 的插件和编辑技巧分享出来。</p><a id="more"></a><h2 id="外观"><a href="#外观" class="headerlink" title="外观"></a>外观</h2><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p>这里我分享两款主题：</p><ol><li><strong><a href="https://marketplace.visualstudio.com/items?itemName=Equinusocio.vsc-material-theme" target="_blank" rel="noopener">Material Theme</a></strong></li></ol><p>效果如图：</p><p><img src="https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_theme1.jpg" alt="no-shadow" title="Material Theme"></p><ol><li><strong><a href="https://marketplace.visualstudio.com/items?itemName=dustinsanders.an-old-hope-theme-vscode" target="_blank" rel="noopener">An Old Hope Theme</a></strong></li></ol><p>效果如图：</p><p><img src="https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_theme2.jpg" alt="no-shadow" title="An Old Hope Theme"></p><h3 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h3><ol><li><strong><a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme" target="_blank" rel="noopener">Material Icon Theme</a></strong>当然，这两款主题的文件管理器（左侧）的 icon 小图标使用的是 Material Icon Theme</li></ol><h3 id="字体及其他"><a href="#字体及其他" class="headerlink" title="字体及其他"></a>字体及其他</h3><p>其他和外观相关的设置如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"editor.multiCursorModifier"</span>: <span class="string">"ctrlCmd"</span>,</span><br><span class="line">    <span class="attr">"editor.formatOnPaste"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"workbench.activityBar.visible"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"workbench.iconTheme"</span>: <span class="string">"eq-material-theme-icons-darker"</span>,</span><br><span class="line">    <span class="attr">"workbench.colorCustomizations"</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">"materialTheme.cache.workbench.settings"</span>: &#123;</span><br><span class="line">        <span class="attr">"themeColours"</span>: <span class="string">"Darker"</span>,</span><br><span class="line">        <span class="attr">"accentPrevious"</span>: <span class="string">"Acid Lime"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"workbench.colorTheme"</span>: <span class="string">"Material Theme Darker"</span>,</span><br><span class="line">    <span class="attr">"material-icon-theme.angular.iconsEnabled"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"material-icon-theme.folders.icons"</span>: <span class="string">"specific"</span>,</span><br><span class="line">    <span class="attr">"editor.lineHeight"</span>: <span class="number">24</span>,</span><br><span class="line">    <span class="attr">"editor.fontLigatures"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"editor.fontFamily"</span>: <span class="string">"FiraCode-Medium"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特别注意的是 <code>&quot;editor.lineHeight&quot;: 24,</code> 和 <code>&quot;editor.fontFamily&quot;: &quot;FiraCode-Medium&quot;</code> 。</p><p><code>&quot;editor.lineHeight&quot;: 24,</code> ： 设置代码的行间距，这里比默认的稍大些，就这一点小小的改变，让代码看起来清爽整洁。</p><p><code>&quot;editor.fontFamily&quot;: &quot;FiraCode-Medium&quot;</code> ： 设置字体，这种字体会让代码看起来更形象生动，如下</p><p><img src="https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_code3.png" alt="FiraCode-Medium字体" width="100%" title="FiraCode-Medium字体" align="center"></p><p>红色竖线左边是使用了 <strong>FiraCode-Medium</strong> 字体的效果，红色竖线右边是没有使用 <strong>FiraCode-Medium</strong> 字体的效果</p><p>关于 <strong>FiraCode-Medium</strong> 字体更多效果可查阅 <a href="https://github.com/tonsky/FiraCode" target="_blank" rel="noopener">https://github.com/tonsky/FiraCode</a> 地址。</p><h2 id="代码管理"><a href="#代码管理" class="headerlink" title="代码管理"></a>代码管理</h2><h3 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h3><ol><li><strong><a href="https://marketplace.visualstudio.com/items?itemName=HookyQR.beautify" target="_blank" rel="noopener">Beautify</a></strong> ：格式化的时候，给出格式化文本选项，如下</li></ol><p><img src="https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_Beatify.gif" alt="Beautify" width="100%" title="Beautify" align="center"></p><ol><li><strong><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode" target="_blank" rel="noopener">Prettier</a></strong> ：个人比较喜欢这个，看起来代码更清晰，如下</li></ol><p><img src="https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_Prettier.gif" alt="Prettier" width="100%" title="Prettier" align="center"></p><div class="note info"><p>当然，大家可以自定义快捷键，也可以按 <kbd>⌘</kbd> - <kbd>⇧</kbd> - <kbd>P</kbd>  来搜索相关命令 </p></div>  <h3 id="代码检查"><a href="#代码检查" class="headerlink" title="代码检查"></a>代码检查</h3><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint" target="_blank" rel="noopener">ESLint</a> ：检查 <code>js</code> 语法规范，你可以使用不同的规范，如 <a href="https://www.npmjs.com/package/eslint-config-airbnb" target="_blank" rel="noopener">airbnb</a> 、<a href="https://github.com/standard/eslint-config-standard" target="_blank" rel="noopener">standard</a> 、<a href="https://github.com/google/eslint-config-google" target="_blank" rel="noopener">google</a>。</li><li><a href="https://marketplace.visualstudio.com/items?itemName=eg2.tslint" target="_blank" rel="noopener">TSLint</a> ：检查 <code>typescript</code> 语法规范。</li><li><a href="https://marketplace.visualstudio.com/items?itemName=shinnn.stylelint" target="_blank" rel="noopener">Stylelint</a> ：检查 <code>CSS/SCSS/Less</code> 语法规范。</li><li><a href="https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint" target="_blank" rel="noopener">Markdownlint</a> ：检查 <code>markdown</code> 语法规范。</li></ol><h3 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h3><p>以下插件点击链接可以查看gif动图，详细了解具体功能。</p><ol><li><a href="https://emmet.io" target="_blank" rel="noopener">Emmet</a> ：大家应该很熟悉这个插件了（很好用），VS Code 已经内置了，很到位。</li><li><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag" target="_blank" rel="noopener">Auto Close Tag</a> ：自动闭合 <code>html</code> 等标签 （&lt;/…&gt;）。</li><li><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag" target="_blank" rel="noopener">Auto Rename Tag</a> ：修改 <code>html</code> 标签时，自动修改闭合标签。</li><li><a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense" target="_blank" rel="noopener">Path Intellisense</a> ：自动提示补全路径。</li></ol><h3 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h3><ol><li><strong>snippets</strong> ：搭建可以自己安装各种代码片段（vue、react、angular等），这里就不列举。</li></ol><h2 id="功能扩展"><a href="#功能扩展" class="headerlink" title="功能扩展"></a>功能扩展</h2><p>以下的功能扩展插件大部分都有gif动图，可点击链接了解详细功能</p><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer" target="_blank" rel="noopener">Bracket Pair Colorizer</a> ：让代码的各种括号呈现不同的颜色。</li><li><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner" target="_blank" rel="noopener">Code Runner</a> ：可以在编辑器里直接运行代码，查看结果。</li><li><a href="https://marketplace.visualstudio.com/items?itemName=anseki.vscode-color" target="_blank" rel="noopener">Color Picker</a> ：可以直接在编辑器里打开色板，选择各种模式的颜色。</li><li><a href="https://marketplace.visualstudio.com/items?itemName=joelday.docthis" target="_blank" rel="noopener">Document This</a> ：可以给函数、类等自动的加上详细的注释。</li><li><a href="https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory" target="_blank" rel="noopener">Git History</a> ：方便的查看git版本管理的详细信息。</li><li><a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer" target="_blank" rel="noopener">Live Server</a> ：可以一键在本地启动服务器。</li><li><a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync" target="_blank" rel="noopener">Settings Sync</a> ：重点介绍下这个插件，如果你有两台电脑（比如，家里和公司）都使用 VS Code ，可是在公司或家里对 VS Code 安装了插件或者修改了配置，回到家或公司又要重新弄一次，这个插件就能解决问题，同步多台电脑设置。</li></ol><p>只需要把配置上传到GitHub，在另一个地方下载配置即可，如下</p><p><img src="https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_Sync.gif" alt="Settings Sync" width="100%" title="Settings Sync" align="center"></p><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=rubbersheep.gi" target="_blank" rel="noopener">gi</a> ：可以给 <code>.gitignore</code> 文件添加各种语言忽略文件配置。</li><li><a href="https://marketplace.visualstudio.com/items?itemName=pnp.polacode" target="_blank" rel="noopener">Polacode</a> ：可以把代码生成图片（有些地方发代码结构会乱也没有代码高亮，这时候就可以生成图片再发）。</li></ol><h2 id="编辑技巧"><a href="#编辑技巧" class="headerlink" title="编辑技巧"></a>编辑技巧</h2><h3 id="光标"><a href="#光标" class="headerlink" title="光标"></a>光标</h3><ol><li>把光标移到文件的首部或尾部</li></ol><p><img src="https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_1.gif" alt="⌘ - ↑ 或 ⌘ - ↓" width="100%" title="⌘ - ↑ 或 ⌘ - ↓" align="center"></p><ol><li>把光标移动到行的首部或者尾部</li></ol><p><img src="https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_2.gif" alt="⌘ - ← 或 ⌘ - →" width="100%" title="⌘ - ← 或 ⌘ - →" align="center"></p><ol><li>按单词移动</li></ol><p><img src="https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_3.gif" alt="⌥ - ← 或 ⌥ - →" width="100%" title="⌥ - ← 或 ⌥ - →" align="center"></p><ol><li>按单词大小写分解移动光标</li></ol><p><img src="https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_4.gif" alt="⌥ - ⌃ - ← 或 ⌥ - ⌃ - →" width="100%" title="⌥ - ⌃ - ← 或 ⌥ - ⌃ - →" align="center"></p><h3 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h3><ol><li>选择行以上或以下全部内容</li></ol><p><img src="https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_5.gif" alt="⇧ - ⌘ - ↑ 或 ⇧ - ⌘ - ↓" width="100%" title="⇧ - ⌘ - ↑ 或 ⇧ - ⌘ - ↓" align="center"></p><ol><li>选择到行首或行尾的内容</li></ol><p><img src="https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_6.gif" alt="⇧ - ⌘ - ← 或 ⇧ - ⌘ - →" width="100%" title="⇧ - ⌘ - ← 或 ⇧ - ⌘ - →" align="center"></p><ol><li>按字母或单词选择</li></ol><ul><li><kbd>⇧</kbd> - <kbd>←</kbd> 、 <kbd>⇧</kbd> - <kbd>→</kbd> 按字母选择   </li><li><kbd>⇧</kbd> - <kbd>⌥</kbd> - <kbd>←</kbd> 、 <kbd>⇧</kbd> - <kbd>⌥</kbd> - <kbd>→</kbd> 按单词选择</li></ul><p><img src="https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_7.gif" alt="⇧ - ← 、 ⇧ - → 或 ⇧ - ⌥ - ← 、 ⇧ - ⌥ - →" width="100%" title="⇧ - ← 、 ⇧ - → 或 ⇧ - ⌥ - ← 、⇧ - ⌥ - →" align="center"></p><ol><li>伸缩选择</li></ol><p><img src="https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_8.gif" alt="⇧ - ⌃ - ⌘ - ← 或 ⇧ - ⌃ - ⌘ - →" width="100%" title="⇧ - ⌃ - ⌘ - ← 或 ⇧ - ⌃ - ⌘ - →" align="center"></p><ol><li>选择匹配单词</li></ol><p><img src="https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_9.gif" alt="⌘ - D 或 ⌘ - U" width="100%" title="⌘ - D 或 ⌘ - U" align="center"></p><h3 id="行"><a href="#行" class="headerlink" title="行"></a>行</h3><ol><li>向上或向下移动行</li></ol><p><img src="https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_10.gif" alt="⌥ - ↑ 或 ⌥ - ↓" width="100%" title="⌥ - ↑ 或 ⌥ - ↓" align="center"></p><ol><li>复制或删除行</li></ol><p><img src="https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_11.gif" alt="⌥ - ⇧ - ↓ 或 ⌘ - ⇧ - K" width="100%" title="⌥ - ⇧ - ↓ 或 ⌘ - ⇧ - K" align="center"></p><ol><li>多行合并成一行</li></ol><p><img src="https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_12.gif" alt="⌘ - J" width="100%" title="⌘ - J" align="center"></p><ol><li>缩进或伸缩行</li></ol><p><img src="https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_13.gif" alt="⌘ - [ 或 ⌘ - ]" width="100%" title="⌘ - [ 或 ⌘ - ]" align="center"></p><ol><li>在当前行之上或下插入行</li></ol><p><img src="https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_14.gif" alt="⌘ - ↩ 或 ⌘ - ⇧ - ↩" width="100%" title="⌘ - ↩ 或 ⌘ - ⇧ - ↩" align="center"></p><h3 id="多行"><a href="#多行" class="headerlink" title="多行"></a>多行</h3><ol><li>鼠标点击，多行编辑</li></ol><p>按 <kbd>⌘</kbd> 选择编辑点，按 <kbd>⎋</kbd> 退出多行编辑</p><p><img src="https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_15.gif" alt="⌘" width="100%" title="⌘" align="center"></p><ol><li>使用快捷键多行编辑</li></ol><p><img src="https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_16.gif" alt="⌘ - ⌥ - ↓ 或 ⌘ - ⌥ - ↑" width="100%" title="⌘ - ⌥ - ↓ 或 ⌘ - ⌥ - ↑" align="center"></p><ol><li>在所选择的行的结尾插入编辑点</li></ol><p><img src="https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_17.gif" alt="⇧ - ⌥ - I" width="100%" title="⇧ - ⌥ - I" align="center"></p><ol><li>选择栏位</li></ol><p>按 <kbd>⇧</kbd> - <kbd>⌘</kbd> 再选择栏位</p><p><img src="https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_18.gif" alt="⇧ - ⌘" width="100%" title="⇧ - ⌘" align="center"></p><h3 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h3><ol><li>查看类或方法的定义</li></ol><ul><li>按 <kbd>⌥</kbd> 点击，可以在新页面查看</li><li>按 <kbd>⇧</kbd> - <kbd>⌥</kbd> - <kbd>⌘</kbd> 点击，可以在新组查看</li><li>按 <kbd>⇧</kbd> - <kbd>F12</kbd> 点击，可以在当前页面查看</li></ul><p><img src="https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_19.gif" alt="查看定义" width="100%" title="查看定义" align="center"></p><ol><li>折叠代码</li></ol><p><img src="https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_20.gif" alt="⌥ - ⌘ - ] 或 ⌥ - ⌘ - [" width="100%" title="⌥ - ⌘ - ] 或 ⌥ - ⌘ - [" align="center"></p><ol><li>去掉选择行的尾部空格</li></ol><p><img src="https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_21.gif" alt="⌘ - K 、 ⌘ - X" width="100%" title="⌘ - K 、 ⌘ - X" align="center"></p><ol><li>定位到指定行号</li></ol><p><img src="https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_22.gif" alt="⌃ - G" width="100%" title="⌃ - G" align="center"></p><ol><li>在文件里查找类或方法</li></ol><p><img src="https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_23.gif" alt="@" width="100%" title="@" align="center"></p><p>最后，如果记不住这些快捷键，可以按 <kbd>⌘</kbd> - <kbd>K</kbd> 、 <kbd>⌘</kbd> - <kbd>S</kbd> 搜索对应快捷键绑定</p><p><img src="https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code_24.gif" alt="搜索快捷键" width="100%" title="搜索快捷键" align="center"></p><p><img class="hidden" src="https://cdn.lishaoy.net/VSCodeCodingSkills/vs-code.jpg" alt="VS Code" width="100%" title="VS Code" align="center"></p>]]></content:encoded>
      
      <comments>https://www.h.lishaoy.net/VSCodeCodingSkills.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>百度统计</title>
      <link>https://www.h.lishaoy.net/baidustatistics.html</link>
      <guid>https://www.h.lishaoy.net/baidustatistics.html</guid>
      <pubDate>Tue, 29 May 2018 19:48:15 GMT</pubDate>
      <description>
      
        &lt;span itemprop=&quot;image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;/images/loading.gif&quot; data-original=&quot;https://cdn.lishaoy.net/baidustatistics/lishaoy.net.990x699.jpg&quot; class=&quot;full-image&quot; alt=&quot;lishaoy.net&quot; title=&quot;lishaoy.net&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;p&gt;前天，弄了个百度统计，看看数据还挺有意思。。。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="/images/loading.gif" data-original="https://cdn.lishaoy.net/baidustatistics/lishaoy.net.990x699.jpg" class="full-image" alt="lishaoy.net" title="lishaoy.net"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><p>前天，弄了个百度统计，看看数据还挺有意思。。。</p><a id="more"></a><p><strong>站点</strong> 接入 <strong>百度统计</strong> ，还是挺简单的：</p><ul><li>首先，去 <a href="https://tongji.baidu.com/web/welcome/login" target="_blank" rel="noopener">百度统计</a> 注册账号，根据提示绑定自己站点域名</li><li>之后，把提供的 <code>js</code> 代码放到自己站点</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//百度统计</span></span><br><span class="line"><span class="keyword">var</span> _hmt = _hmt || [];</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> hm = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">  hm.src = <span class="string">"https://hm.baidu.com/hm.js?5fd52c901f2213883f51a476eab3914b"</span>;</span><br><span class="line">  <span class="keyword">var</span> l = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>).length;</span><br><span class="line">  <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[l - <span class="number">1</span>];</span><br><span class="line">  s.parentNode.insertBefore(hm, s);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>这些设置好之后，就可以看到统计数据了，来看看 👀 <em>2018-05-29</em> 当天的统计数据情况如何</p><h4 id="今日流量"><a href="#今日流量" class="headerlink" title="今日流量"></a>今日流量</h4><p>纵轴分别是 <em>今日、昨日、预计今日</em> ，横轴分别是 <em>PV、UV、IP、跳出率、平均访问时长</em> 等 （预计今日的数据，不是很靠谱）</p><p><img src="https://cdn.lishaoy.net/baidustatistics/1.png" alt="今日流量" width="100%" title="今日流量" align="center"></p><h4 id="来源网站"><a href="#来源网站" class="headerlink" title="来源网站"></a>来源网站</h4><p>会列出访客从哪儿来到你的<strong>站点</strong>，以及会统计访问时长等</p><p><img src="https://cdn.lishaoy.net/baidustatistics/2.png" alt="来源网站" width="100%" title="来源网站" align="center"></p><h4 id="受欢迎页面"><a href="#受欢迎页面" class="headerlink" title="受欢迎页面"></a>受欢迎页面</h4><p>会统计每个页面的 <em>浏览量、退出次数、平均停留时间</em> 等</p><p><img src="https://cdn.lishaoy.net/baidustatistics/3.png" alt="受欢迎页面" width="100%" title="受欢迎页面" align="center"></p><h4 id="新老访客"><a href="#新老访客" class="headerlink" title="新老访客"></a>新老访客</h4><p>会统计新老访客 <em>浏览量、平均访问时长、平均访问页数</em> 等</p><p><img src="https://cdn.lishaoy.net/baidustatistics/4.png" alt="新老访客" width="100%" title="新老访客" align="center"></p><h4 id="地域分布"><a href="#地域分布" class="headerlink" title="地域分布"></a>地域分布</h4><p>会统计访客来自哪个 <em>国家、省份、城市、网络运营商</em> 等</p><p><img src="https://cdn.lishaoy.net/baidustatistics/5.png" alt="地域分布" width="100%" title="地域分布" align="center"></p><p>这里我只展示部分统计功能，如想了解其它更多功能，可去 <a href="https://tongji.baidu.com/web/welcome/login" target="_blank" rel="noopener">百度统计</a> 网站查看。</p>]]></content:encoded>
      
      <comments>https://www.h.lishaoy.net/baidustatistics.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>前端性能优化</title>
      <link>https://www.h.lishaoy.net/webOptimize.html</link>
      <guid>https://www.h.lishaoy.net/webOptimize.html</guid>
      <pubDate>Thu, 10 May 2018 04:55:59 GMT</pubDate>
      <description>
      
        &lt;span itemprop=&quot;image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;https://cdn.lishaoy.net/webOptimize/Optimize.png&quot; class=&quot;full-image&quot; alt=&quot;web optimize&quot; title=&quot;web optimize&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;p&gt;关于 &lt;strong&gt;性能优化&lt;/strong&gt; 是个大的面，这篇文章主要涉及到 &lt;strong&gt;前端&lt;/strong&gt; 的几个点，如 &lt;strong&gt;前端性能优化&lt;/strong&gt; 的流程、常见技术手段、工具等。&lt;/p&gt;
&lt;p&gt;提及 &lt;strong&gt;前端性能优化&lt;/strong&gt; ，大家应该都会想到 &lt;strong&gt;雅虎军规&lt;/strong&gt;，本文会结合 &lt;strong&gt;雅虎军规&lt;/strong&gt; 融入自己的了解知识，进行的总结和梳理 😜&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="https://cdn.lishaoy.net/webOptimize/Optimize.png" class="full-image" alt="web optimize" title="web optimize"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><p>关于 <strong>性能优化</strong> 是个大的面，这篇文章主要涉及到 <strong>前端</strong> 的几个点，如 <strong>前端性能优化</strong> 的流程、常见技术手段、工具等。</p><p>提及 <strong>前端性能优化</strong> ，大家应该都会想到 <strong>雅虎军规</strong>，本文会结合 <strong>雅虎军规</strong> 融入自己的了解知识，进行的总结和梳理 😜</p><a id="more"></a><p>首先，我们先来看看 👀 <strong>雅虎军规</strong> 的 <strong>35</strong> 条。</p><div class="note info"><ol><li>尽量减少 HTTP 请求个数——须权衡</li><li>使用 <strong>CDN</strong>（内容分发网络）</li><li>为文件头指定 Expires 或 Cache-Control ，使内容具有缓存性。</li><li>避免空的 src 和 href</li><li>使用 gzip 压缩内容</li><li>把 CSS 放到顶部</li><li>把 JS 放到底部</li><li>避免使用 CSS 表达式</li><li>将 CSS 和 JS 放到外部文件中</li><li>减少 DNS 查找次数</li><li>精简 CSS 和 JS</li><li>避免跳转</li><li>剔除重复的 JS 和 CSS</li><li>配置 ETags</li><li>使 AJAX 可缓存</li><li>尽早刷新输出缓冲</li><li>使用 GET 来完成 AJAX 请求</li><li>延迟加载</li><li>预加载</li><li>减少 DOM 元素个数</li><li>根据域名划分页面内容</li><li>尽量减少 iframe 的个数</li><li>避免 404</li><li>减少 Cookie 的大小</li><li>使用无 cookie 的域</li><li>减少 DOM 访问</li><li>开发智能事件处理程序</li><li>用 <link> 代替 @import</li><li>避免使用滤镜</li><li>优化图像</li><li>优化 CSS Spirite</li><li>不要在 HTML 中缩放图像——须权衡</li><li>favicon.ico要小而且可缓存</li><li>保持单个内容小于25K</li><li>打包组件成复合文本</li></ol></div>  <p>如对 <strong>雅虎军规</strong> 的具体细则内容不是很了解，可自行去各搜索 🔍 引擎 ，搜索 <strong>雅虎军规</strong> 了解详情。</p><h2 id="压缩-合并"><a href="#压缩-合并" class="headerlink" title="压缩 合并"></a>压缩 合并</h2><p>对于 <strong>前端性能优化</strong> 自然要关注 <strong>首屏</strong> 打开速度，而这个速度，很大因素是花费在网络请求上，那么怎么减少网络请求的时间呢？</p><ul><li>减少网络请求次数 </li><li>减小文件体积</li><li>使用 <code>CDN</code> 加速</li></ul><p>所以 <strong>压缩、合并</strong> 就是一个解决方案，当然可以用 <code>gulp</code> 、 <code>webpack</code> 、 <code>grunt</code> 等构建工具 <strong>压缩、合并</strong></p><h3 id="JS、CSS-压缩-合并"><a href="#JS、CSS-压缩-合并" class="headerlink" title="JS、CSS 压缩 合并"></a><code>JS、CSS</code> 压缩 合并</h3><p>例如：<code>gulp js、css</code> 压缩、合并代码如下 👇</p><figure class="highlight javascript"><figcaption><span>javascript</span><a href="https://lishaoy.net/webOptimize.html#JS、CSS-压缩-合并" target="_blank" rel="noopener">gulpfile.js</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//压缩、合并js</span></span><br><span class="line">gulp.task(<span class="string">'scripts'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src([</span><br><span class="line">        <span class="string">'./public/lib/fastclick/lib/fastclick.min.js'</span>,</span><br><span class="line">        <span class="string">'./public/lib/jquery_lazyload/jquery.lazyload.js'</span>,</span><br><span class="line">        <span class="string">'./public/lib/velocity/velocity.min.js'</span>,</span><br><span class="line">        <span class="string">'./public/lib/velocity/velocity.ui.min.js'</span>,</span><br><span class="line">        <span class="string">'./public/lib/fancybox/source/jquery.fancybox.pack.js'</span>,</span><br><span class="line">        <span class="string">'./public/js/src/utils.js'</span>,</span><br><span class="line">        <span class="string">'./public/js/src/motion.js'</span>,</span><br><span class="line">        <span class="string">'./public/js/src/scrollspy.js'</span>,</span><br><span class="line">        <span class="string">'./public/js/src/post-details.js'</span>,</span><br><span class="line">        <span class="string">'./public/js/src/bootstrap.js'</span>,</span><br><span class="line">        <span class="string">'./public/js/src/push.js'</span>,</span><br><span class="line">        <span class="string">'./public/live2dw/js/perTips.js'</span>,</span><br><span class="line">        <span class="string">'./public/live2dw/lib/L2Dwidget.min.js'</span>,</span><br><span class="line">        <span class="string">'./public/js/src/love.js'</span>,</span><br><span class="line">        <span class="string">'./public/js/src/busuanzi.pure.mini.js'</span>,</span><br><span class="line">        <span class="string">'./public/js/src/activate-power-mode.js'</span></span><br><span class="line">    ]).pipe(concat(<span class="string">'all.js'</span>)).pipe(minify()).pipe(gulp.dest(<span class="string">'./public/dist/'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩、合并 CSS </span></span><br><span class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src([</span><br><span class="line">        <span class="string">'./public/lib/font-awesome/css/font-awesome.min.css'</span>,</span><br><span class="line">        <span class="string">'./public/lib/fancybox/source/jquery.fancybox.css'</span>,</span><br><span class="line">        <span class="string">'./public/css/main.css'</span>,</span><br><span class="line">        <span class="string">'./public/css/lib.css'</span>,</span><br><span class="line">        <span class="string">'./public/live2dw/css/perTips.css'</span></span><br><span class="line">    ]).pipe(concat(<span class="string">'all.css'</span>)).pipe(minify()).pipe(gulp.dest(<span class="string">'./public/dist/'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后，再把 <strong>压缩、合并</strong> 的 <code>JS、CSS</code> 放入 <code>CDN</code> , 👀 看看效果如何</p><p>如图：<em> <strong>压缩、合并</strong> 且放入 <code>CND</code> 之后的效果 </em></p><p><img src="https://cdn.lishaoy.net/webOptimize/concatJs.png" alt="首页请求速度(js)" width="100%" title="首页请求速度(js)" align="center"></p><p><img src="https://cdn.lishaoy.net/webOptimize/concatCss.png" alt="首页请求速度(css)" width="100%" title="首页请求速度(css)" align="center"></p><p>以上是 <a href="https://lishaoy.net" target="_blank" rel="noopener">lishaoy.net</a> 清除缓存后的 <strong>首页</strong> 请求速度。</p><p>可见，请求时间是 <strong>4.59 s</strong> ，总请求个数 <strong>51</strong> ， 而 <code>js</code> 的请求个数是 <strong>8</strong> ，<code>css</code> 的请求个数是 <strong>3</strong> <em>（其实就 all.css 一个，其它 2 个是 Google浏览器加载的）</em>， 而没使用 <strong>压缩、合并</strong> 时候，请求时间是 <strong>10</strong> 多秒，总请求个数有 <strong>70</strong> 多个，<code>js</code> 的请求个数是 <strong>20</strong> 多个 ，对比请求时间 <strong>性能</strong> 提升 <strong>1倍</strong> 多</p><p>如图：<em>有缓存下的首页效果</em></p><p><img src="https://cdn.lishaoy.net/webOptimize/concatJs2.png" alt="首页请求速度（缓存）" width="100%" title="首页请求速度（缓存）" align="center"></p><p>基本都是秒开 😝</p><div class="note warning"><p><em>Tips：在 <strong>压缩、合并</strong> 后，单个文件控制在 25 ~ 30 KB左右，同一个域下，最好不要多于5个资源</em></p></div> <h3 id="图片压缩、合并"><a href="#图片压缩、合并" class="headerlink" title="图片压缩、合并"></a>图片压缩、合并</h3><p>例如：<code>gulp</code> 图片压缩代码如下 👇</p><figure class="highlight javascript"><figcaption><span>javascript</span><a href="https://lishaoy.net/webOptimize.html#图片压缩、合并" target="_blank" rel="noopener">gulpfile.js</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//压缩image</span></span><br><span class="line">gulp.task(<span class="string">'imagemin'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'./public/**/*.&#123;png,jpg,gif,ico,jpeg&#125;'</span>)</span><br><span class="line">        .pipe(imagemin())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>图片的合并可以采用 <code>CSS Spirite</code>，方法就是把一些小图用 <code>PS</code> 合成一张图，用 <code>css</code> 定位显示每张图片的位置</p><figure class="highlight css"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.top_right</span> <span class="selector-class">.phone</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(../images/top_right.png) no-repeat <span class="number">7px</span> -<span class="number">17px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">38px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.top_right</span> <span class="selector-class">.help</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(../images/top_right.png) no-repeat <span class="number">0</span> -<span class="number">47px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">38px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，把 <strong>压缩</strong> 的图片放入 <code>CDN</code> , 👀 看看，效果如何</p><p><img src="https://cdn.lishaoy.net/webOptimize/minImages.png" alt="首页请求速度（images）" width="100%" title="首页请求速度（images）" align="center"></p><p>可见，请求时间是 <strong>1.70 s</strong> ,总请求个数 <strong>50</strong> ， 而 <code>img</code> 的请求个数是 <strong>15</strong> <em>（这里因为首页都是大图，就没有合并，只是压缩了）</em> ，但是，效果很好 😀 ，从 <strong>4.59 s</strong> 缩短到 <strong>1.70 s</strong>, 性能又提升一倍。</p><p>再看看有缓存情况如何 😏</p><p><img src="https://cdn.lishaoy.net/webOptimize/minImages1.png" alt="首页请求速度（images 缓存）" width="100%" title="首页请求速度（images 缓存）" align="center"></p><p>请求时间是 <strong>1.05 s</strong> ，有缓存和无缓存基本差不多</p><div class="note warning"><p><em>Tips：大的图片在不同终端，应该使用不同分辨率，而不应该使用缩放（百分比）</em></p></div> <p>整个 <strong>压缩、合并</strong> <em>（js、css、img）</em> 再放入 <code>CDN</code> ，请求时间从 <strong>10</strong> 多秒 ，到最后的 <strong>1.70 s</strong> ，性能提升 <strong>5</strong> 倍多，可见，这个操作必要性。</p><hr><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>缓存会根据请求保存输出内容的副本，例如 <strong>页面、图片、文件</strong>，当下一个请求来到的时候:如果是相同的<code>URL</code>，缓存直接使 用本地的副本响应访问请求，而不是向源服务器再次发送请求。因此，可以从以下 <strong>2</strong> 个方面提升性能。</p><ul><li>减少相应延迟，提升响应时间</li><li>减少网络带宽消耗，节省流量</li></ul><p>我们用两幅图来了解下浏览器的 <strong>缓存机制</strong></p><p><strong>浏览器第一次请求</strong></p><p><img src="https://cdn.lishaoy.net/webOptimize/webCache3.png" alt="no-shadow" title="第一次请求"></p><p><strong>浏览器再次请求</strong></p><p><img src="https://cdn.lishaoy.net/webOptimize/webCache4.png" alt="no-shadow" title="再次请求"></p><p>从以上两幅图中，可以清楚的了解浏览器 <strong>缓存</strong> 的过程。首次访问一个 <code>URL</code> ，没有 <strong>缓存</strong> ，但是，服务器会响应一些 <code>header</code> 信息，如：<code>expires、cache-control、last-modified、etag</code> 等，来记录下次请求是否缓存、如何缓存。再次访问这个 <code>URL</code> 时候，浏览器会根据首次访问返回的 <code>header</code> 信息，来决策是否缓存、如何缓存。我们重点来分析下第二幅图，其实是分两条线路，如下 👇</p><ul><li><strong>第一条线路：</strong> 当浏览器再次访问某个 <code>URL</code> 时，会先获取资源的 <code>header</code> 信息，判断是否命中强缓存 <em>（cache-control和expires）</em> ，如命中，直接从缓存获取资源，包括响应的 <code>header</code> 信息 <em>（请求不会和服务器通信）</em> ，也就是 <strong>强缓存</strong> ，如图</li></ul><p><img src="https://cdn.lishaoy.net/webOptimize/webCache2.png" alt="强缓存" width="100%" title="强缓存" align="center"></p><ul><li><strong>第二条线路：</strong> 如没有命中 <strong>强缓存</strong> ，浏览器会发送请求到服务器，请求会携带第一次请求返回的有关缓存的 <code>header</code> 信息 <em>（Last-Modified/If-Modified-Since和Etag/If-None-Match）</em> ，由服务器根据请求中的相关 <code>header</code> 信息来比对结果是否协商缓存命中；若命中，则服务器返回新的响应 <code>header</code> 信息更新缓存中的对应 <code>header</code> 信息，但是并不返回资源内容，它会告知浏览器可以直接从缓存获取；否则返回最新的资源内容，也就是 <strong>协商缓存</strong>。</li></ul><p>现在，我们了解到浏览器缓存机制分为 <strong>强缓存、协商缓存</strong>，再来看看他们的区别 👇</p><table><thead><tr><th style="text-align:center">缓存策略</th><th style="text-align:center">获取资源形式</th><th style="text-align:center">状态码</th><th style="text-align:center">发送请求到服务器</th></tr></thead><tbody><tr><td style="text-align:center">强缓存</td><td style="text-align:center">从缓存取</td><td style="text-align:center">200（from memory cache）</td><td style="text-align:center">否，直接从缓存取</td></tr><tr><td style="text-align:center">协商缓存</td><td style="text-align:center">从缓存取</td><td style="text-align:center">304（not modified）</td><td style="text-align:center">是，通过服务器来告知缓存是否可用</td></tr></tbody></table><h3 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h3><p>与强缓存相关的 <code>header</code> 字段有两个：</p><h4 id="expires"><a href="#expires" class="headerlink" title="expires"></a>expires</h4><p><strong>expires：</strong> 这是 <code>http1.0</code> 时的规范，它的值为一个绝对时间的 <strong>GMT</strong> 格式的时间字符串，如 <code>Mon, 10 Jun 2015 21:31:12 GMT</code> ，如果发送请求的时间在 <strong>expires</strong> 之前，那么本地缓存始终有效，否则就会发送请求到服务器来获取资源</p><h4 id="cache-control"><a href="#cache-control" class="headerlink" title="cache-control"></a>cache-control</h4><p><strong>cache-control:</strong> <code>max-age=number</code> ，这是 <code>http1.1</code> 时出现的 <code>header</code> 信息，主要是利用该字段的 <code>max-age</code> 值来进行判断，它是一个相对值；资源第一次的请求时间和 <strong>Cache-Control</strong> 设定的有效期，计算出一个资源过期时间，再拿这个过期时间跟当前的请求时间比较，如果请求时间在过期时间之前，就能命中缓存，否则未命中， <strong>cache-control</strong> 除了该字段外，还有下面几个比较常用的设置值：</p><ul><li><strong>no-cache：</strong> 不使用本地缓存。需要使用缓存协商，先与服务器确认返回的响应是否被更改，如果之前的响应中存在 <code>ETag</code> ，那么请求的时候会与服务端验证，如果资源未被更改，则可以避免重新下载。</li><li><strong>no-store：</strong> 直接禁止游览器缓存数据，每次用户请求该资源，都会向服务器发送一个请求，每次都会下载完整的资源。</li><li><strong>public：</strong> 可以被所有的用户缓存，包括终端用户和 <code>CDN</code> 等中间代理服务器。</li><li><strong>private：</strong> 只能被终端用户的浏览器缓存，不允许 <code>CDN</code> 等中继缓存服务器对其缓存。</li></ul><div class="note warning"><p><em>Tips：如果 cache-control 与 expires 同时存在的话，cache-control 的优先级高于 expires</em></p></div> <h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3><p>协商缓存都是由浏览器和服务器协商，来确定是否缓存，协商主要通过下面两组 <code>header</code> 字段，这两组字段都是成对出现的，即第一次请求的响应头带上某个字段 <em>（ <strong>Last-Modified</strong> 或者 <strong>Etag</strong> ）</em> ，则后续请求会带上对应的请求字段 <em>（<strong>If-Modified-Since</strong> 或者 <strong>If-None-Match</strong> ）</em> ，若响应头没有 <strong>Last-Modified</strong> 或者 <strong>Etag</strong> 字段，则请求头也不会有对应的字段。</p><h4 id="Last-Modified-If-Modified-Since"><a href="#Last-Modified-If-Modified-Since" class="headerlink" title="Last-Modified/If-Modified-Since"></a>Last-Modified/If-Modified-Since</h4><p>二者的值都是 <code>GMT</code> 格式的时间字符串，具体过程：</p><ul><li><p>浏览器第一次跟服务器请求一个资源，服务器在返回这个资源的同时，在 <code>respone</code> 的 <code>header</code> 加上 <strong>Last-Modified</strong> 字段，这个 <code>header</code> 字段表示这个资源在服务器上的最后修改时间</p></li><li><p>浏览器再次跟服务器请求这个资源时，在 <code>request</code> 的 <code>header</code> 上加上 <strong>If-Modified-Since</strong> 字段，这个 <code>header</code> 字段的值就是上一次请求时返回的 <strong>Last-Modified</strong> 的值</p></li><li><p>服务器再次收到资源请求时，根据浏览器传过来 <strong>If-Modified-Since</strong> 和资源在服务器上的最后修改时间判断资源是否有变化，如果没有变化则返回 <code>304 Not Modified</code> ，但是不会返回资源内容；如果有变化，就正常返回资源内容。当服务器返回 <code>304 Not Modified</code> 的响应时，<code>response header</code> 中不会再添加 <strong>Last-Modified的header</strong> ，因为既然资源没有变化，那么 <strong>Last-Modified</strong> 也就不会改变，这是服务器返回 <code>304</code> 时的 <code>response header</code></p></li><li><p>浏览器收到 <code>304</code> 的响应后，就会从缓存中加载资源</p></li><li><p>如果协商缓存没有命中，浏览器直接从服务器加载资源时，<strong>Last-Modified</strong> 的 <code>Header</code> 在重新加载的时候会被更新，下次请求时，<strong>If-Modified-Since</strong> 会启用上次返回的<strong>Last-Modified</strong> 值</p></li></ul><h4 id="Etag-If-None-Match"><a href="#Etag-If-None-Match" class="headerlink" title="Etag/If-None-Match"></a>Etag/If-None-Match</h4><p>这两个值是由服务器生成的每个资源的唯一标识字符串，只要资源有变化就这个值就会改变；其判断过程与 <strong>Last-Modified、If-Modified-Since</strong> 类似，与 <strong>Last-Modified</strong> 不一样的是，当服务器返回 <code>304 Not Modified</code> 的响应时，由于 <strong>ETag</strong> 重新生成过，<code>response header</code> 中还会把这个 <strong>ETag</strong> 返回，即使这个 <strong>ETag</strong> 跟之前的没有变化。</p><div class="note warning"><p><em>Tips：Last-Modified与ETag是可以一起使用的，服务器会优先验证ETag，一致的情况下，才会继续比对Last-Modified，最后才决定是否返回304。</em></p></div> <h3 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h3><h4 id="什么是-Service-Worker"><a href="#什么是-Service-Worker" class="headerlink" title="什么是 Service Worker"></a>什么是 Service Worker</h4><blockquote><p><strong>Service Worker</strong> 本质上充当Web应用程序与浏览器之间的代理服务器，也可以在网络可用时作为浏览器和网络间的代理。它们旨在（除其他之外）使得能够创建有效的离线体验，拦截网络请求并基于网络是否可用以及更新的资源是否驻留在服务器上来采取适当的动作。他们还允许访问推送通知和后台同步API。</p><footer><strong>Service Worker API</strong><cite><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html" target="_blank" rel="noopener">developer.mozilla.org</a></cite></footer></blockquote><p><br><strong>Service worker</strong> 可以解决目前离线应用的问题，同时也可以做更多的事。 <strong>Service Worker</strong> 可以使你的应用先访问本地缓存资源，所以在离线状态时，在没有通过网络接收到更多的数据前，仍可以提供基本的功能（一般称之为 Offline First）。这是原生APP 本来就支持的功能，这也是相比于 <code>web app</code> ，原生 <code>app</code> 更受青睐的主要原因</p><p>再来看看 👀 <strong>service worker</strong> 能做些什么</p><ul><li>后台消息传递</li><li>网络代理，转发请求，伪造响应</li><li>离线缓存</li><li>消息推送</li><li>…</li></ul><div class="note success"><p><strong><em>本文主要以（<a href="https://lishaoy.net" target="_blank" rel="noopener">lishaoy.net</a>）资源缓存为例,阐述下 service worker如何工作</em></strong></p></div>  <h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p><strong>service worker</strong> 初次安装的生命周期，如图 🌠</p><p><img src="https://cdn.lishaoy.net/webOptimize/serviceWorker.png" alt="no-shadow" title="sw生命周期"></p><p>从上 👆 图可知，<strong>service worker</strong> 工作的流程：</p><ol><li><strong>安装：</strong>  <code>service worker URL</code> 通过 <code>serviceWorkerContainer.register()</code> 来获取和注册。</li><li><strong>激活：</strong> 当 <code>service worker</code> 安装完成后，会接收到一个激活事件(activate event)。 <code>onactivate</code> 主要用途是清理先前版本的 <code>service worker</code> 脚本中使用的资源。</li><li><strong>监听：</strong> 两种状态<ul><li>终止以节省内存；</li><li>监听获取 <code>fetch</code> 和消息 <code>message</code> 事件。</li></ul></li><li><strong>销毁：</strong> 是否销毁由浏览器决定，如果一个 <code>service worker</code> 长期不使用或者机器内存有限，则可能会销毁这个 <code>worker</code> 。</li></ol><div class="note warning"><p><em>Tips：激活成功之后，在 Chrome 浏览器里，可以访问 chrome://inspect/#service-workers和 chrome://serviceworker-internals/ 可以查看到当前运行的service worker ，如图 👇。</em></p></div> <p><img src="https://cdn.lishaoy.net/webOptimize/serviceWorker1.png" alt="service worker" width="100%" title="service worker" align="center"></p><p><strong>现在，我们来写个简单的例子 🌰 </strong></p><h4 id="注册-service-worker"><a href="#注册-service-worker" class="headerlink" title="注册 service worker"></a>注册 service worker</h4><p>要安装 <code>service worker</code> ，你需要在你的页面上注册它。这个步骤告诉浏览器你的 <code>service worker</code> 脚本在哪里。</p><figure class="highlight javascript"><figcaption><span>javascript</span><a href="https://lishaoy.net/webOptimize.html#注册-service-worker" target="_blank" rel="noopener">app.js</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">  navigator.serviceWorker.register(<span class="string">'/sw.js'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">registration</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Registration was successful</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ServiceWorker registration successful with scope: '</span>,    registration.scope);</span><br><span class="line">  &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// registration failed :(</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ServiceWorker registration failed: '</span>, err);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码检查 <code>service worker API</code> 是否可用，如果可用，<code>service worker /sw.js</code> 被注册。如果这个 <code>service worker</code> 已经被注册过，浏览器会自动忽略上面的代码。</p><h4 id="激活-service-worker"><a href="#激活-service-worker" class="headerlink" title="激活 service worker"></a>激活 service worker</h4><p>在你的 <code>service worker</code> 注册之后，浏览器会尝试为你的页面或站点安装并激活它。 <code>install</code> 事件会在安装完成之后触发。<code>install</code> 事件一般是被用来填充你的浏览器的离线缓存能力。你需要为 <code>install</code> 事件定义一个 <code>callback</code> ，并决定哪些文件你想要缓存.</p><figure class="highlight javascript"><figcaption><span>javascript</span><a href="https://lishaoy.net/webOptimize.html#激活-service-worker" target="_blank" rel="noopener">sw.js</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The files we want to cache</span></span><br><span class="line"><span class="keyword">var</span> CACHE_NAME = <span class="string">'my-site-cache-v1'</span>;</span><br><span class="line"><span class="keyword">var</span> urlsToCache = [</span><br><span class="line">  <span class="string">'/'</span>,</span><br><span class="line">  <span class="string">'/css/main.css'</span>,</span><br><span class="line">  <span class="string">'/js/main.js'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">self.addEventListener(<span class="string">'install'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Perform install steps</span></span><br><span class="line">  event.waitUntil(</span><br><span class="line">    caches.open(CACHE_NAME)</span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span>(<span class="params">cache</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Opened cache'</span>);</span><br><span class="line">        <span class="keyword">return</span> cache.addAll(urlsToCache);</span><br><span class="line">      &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在我们的 <code>install callback</code> 中，我们需要执行以下步骤：</p><ul><li>开启一个缓存</li><li>缓存我们的文件</li><li>决定是否所有的资源是否要被缓存</li></ul><p>上面的代码中，我们通过 <code>caches.open</code> 打开我们指定的 <code>cache</code> 文件名，然后我们调用 <code>cache.addAll</code> 并传入我们的文件数组。这是通过一连串 <code>promise</code> <em>（caches.open 和 cache.addAll）</em> 完成的。<code>event.waitUntil</code> 拿到一个 <code>promise</code> 并使用它来获得安装耗费的时间以及是否安装成功。</p><h4 id="监听-service-worker"><a href="#监听-service-worker" class="headerlink" title="监听 service worker"></a>监听 service worker</h4><p>现在我们已经将你的站点资源缓存了，你需要告诉 <code>service worker</code> 让它用这些缓存内容来做点什么。有了 <code>fetch</code> 事件，这是很容易做到的。</p><p>每次任何被 <code>service worker</code> 控制的资源被请求到时，都会触发 <code>fetch</code> 事件，我们可以给 <code>service worker</code> 添加一个 <code>fetch</code> 的事件监听器，接着调用 <code>event</code> 上的 <code>respondWith()</code> 方法来劫持我们的 <strong>HTTP</strong> 响应，然后你用可以用自己的方法来更新他们。</p><figure class="highlight javascript"><figcaption><span>javascript</span><a href="https://lishaoy.net/webOptimize.html#监听-service-worker" target="_blank" rel="noopener">sw.js</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">self.addEventListener(<span class="string">'fetch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event.respondWith(</span><br><span class="line">    caches.match(event.request);</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>caches.match(event.request)</code> 允许我们对网络请求的资源和 <code>cache</code> 里可获取的资源进行匹配，查看是否缓存中有相应的资源。这个匹配通过 <code>url</code> 和 <code>vary header</code> 进行，就像正常的 <strong>HTTP</strong> 请求一样。</p><p>那么，我们如何返回 <code>request</code> 呢，下面 👇 就是一个例子 🌰</p><figure class="highlight javascript"><figcaption><span>javascript</span><a href="https://lishaoy.net/webOptimize.html#监听-service-worker" target="_blank" rel="noopener">sw.js</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">self.addEventListener(<span class="string">'fetch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event.respondWith(</span><br><span class="line">    caches.match(event.request)</span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Cache hit - return response</span></span><br><span class="line">        <span class="keyword">if</span> (response) &#123;</span><br><span class="line">          <span class="keyword">return</span> response;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> fetch(event.request);</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面的代码里我们定义了 <code>fetch</code> 事件，在 <code>event.respondWith</code> 里，我们传入了一个由 <code>caches.match</code> 产生的 <code>promise.caches.match</code> 查找 <code>request</code> 中被 <code>service worker</code> 缓存命中的 <code>response</code> 。如果我们有一个命中的 <code>response</code> ，我们返回被缓存的值，否则我们返回一个实时从网络请求 <code>fetch</code> 的结果。</p><h4 id="sw-toolbox"><a href="#sw-toolbox" class="headerlink" title="sw-toolbox"></a>sw-toolbox</h4><div class="note success"><p><em>当然，我也可以使用第三方库，例如：<a href="https://lishaoy.net" target="_blank" rel="noopener">lishaoy.net</a> 使用了 <strong>sw-toolbox</strong>。</em></p></div><p><strong>sw-toolbox</strong> 使用非常简单，下面 👇 就是 <a href="https://lishaoy.net" target="_blank" rel="noopener">lishaoy.net</a> 的一个例子 🌰</p><figure class="highlight javascript"><figcaption><span>javascript</span><a href="https://lishaoy.net/webOptimize.html#sw-toolbox" target="_blank" rel="noopener">persilee.js</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"serviceWorker"</span> <span class="keyword">in</span> navigator ? navigator.serviceWorker.register(<span class="string">'/sw.js'</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  navigator.serviceWorker.controller ? <span class="built_in">console</span>.log(<span class="string">"Assets cached by the controlling service worker."</span>) : <span class="built_in">console</span>.log(<span class="string">"Please reload this page to allow the service worker to handle network operations."</span>)</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"ERROR: "</span> + e)</span><br><span class="line">&#125;) : <span class="built_in">console</span>.log(<span class="string">"Service workers are not supported in the current browser."</span>)</span><br></pre></td></tr></table></figure><p>以上是 <strong>注册</strong> 一个 <code>service woker</code></p><figure class="highlight javascript"><figcaption><span>javascript</span><a href="https://lishaoy.net/webOptimize.html#sw-toolbox" target="_blank" rel="noopener">sw.js</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cacheVersion = <span class="string">"20180527"</span>;</span><br><span class="line">    <span class="keyword">var</span> staticImageCacheName = <span class="string">"image"</span> + cacheVersion;</span><br><span class="line">    <span class="keyword">var</span> staticAssetsCacheName = <span class="string">"assets"</span> + cacheVersion;</span><br><span class="line">    <span class="keyword">var</span> contentCacheName = <span class="string">"content"</span> + cacheVersion;</span><br><span class="line">    <span class="keyword">var</span> vendorCacheName = <span class="string">"vendor"</span> + cacheVersion;</span><br><span class="line">    <span class="keyword">var</span> maxEntries = <span class="number">100</span>;</span><br><span class="line">    self.importScripts(<span class="string">"/lib/sw-toolbox/sw-toolbox.js"</span>);</span><br><span class="line">    self.toolbox.options.debug = <span class="literal">false</span>;</span><br><span class="line">    self.toolbox.options.networkTimeoutSeconds = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    self.toolbox.router.get(<span class="string">"/images/(.*)"</span>, self.toolbox.cacheFirst, &#123;</span><br><span class="line">        cache: &#123;</span><br><span class="line">            name: staticImageCacheName,</span><br><span class="line">            maxEntries: maxEntries</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    self.toolbox.router.get(<span class="string">'/js/(.*)'</span>, self.toolbox.cacheFirst, &#123;</span><br><span class="line">        cache: &#123;</span><br><span class="line">            name: staticAssetsCacheName,</span><br><span class="line">            maxEntries: maxEntries</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    self.toolbox.router.get(<span class="string">'/css/(.*)'</span>, self.toolbox.cacheFirst, &#123;</span><br><span class="line">        cache: &#123;</span><br><span class="line">            name: staticAssetsCacheName,</span><br><span class="line">            maxEntries: maxEntries</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    self.addEventListener(<span class="string">"install"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> event.waitUntil(self.skipWaiting())</span><br><span class="line">    &#125;);</span><br><span class="line">    self.addEventListener(<span class="string">"activate"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> event.waitUntil(self.clients.claim())</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>就这样搞定了 🍉 <em>(具体的用法可以去 <a href="https://googlechromelabs.github.io/sw-toolbox/api.html#main" target="_blank" rel="noopener">sw-toolbox</a> 查看)</em></p><p>有的同学就问，<code>service worker</code> 这么好用，这个缓存空间到底是多大？其实，在  <strong>Chrome</strong> 可以看到，如图</p><p><img src="https://cdn.lishaoy.net/webOptimize/storageQuota.png" alt="fstorage quota" width="100%" title="storage quota" align="center"></p><p>可以看到，大概有 <strong>30G</strong> ，我的站点只用了 <strong>183MB</strong> ，完全够用了 🍓</p><p>最后，来两张图 </p><p><img src="https://cdn.lishaoy.net/webOptimize/serviceWorker2.png" alt="from ServiceWorker" width="100%" title="from ServiceWorker" align="center"></p><p><img src="https://cdn.lishaoy.net/webOptimize/serviceWorker3.png" alt="Cache Storage" width="100%" title="Cache Storage" align="center"></p><p><img class="hidden" src="https://cdn.lishaoy.net/webOptimize/Optimize.png" alt="web optimize" width="100%" title="web optimize" align="center"></p><h2 id="未完，待续。。。-😜"><a href="#未完，待续。。。-😜" class="headerlink" title="未完，待续。。。 😜"></a>未完，待续。。。 😜</h2>]]></content:encoded>
      
      <comments>https://www.h.lishaoy.net/webOptimize.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>Promise诞生记</title>
      <link>https://www.h.lishaoy.net/createPromise.html</link>
      <guid>https://www.h.lishaoy.net/createPromise.html</guid>
      <pubDate>Tue, 17 Apr 2018 17:34:09 GMT</pubDate>
      <description>
      
        &lt;span itemprop=&quot;image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;https://cdn.lishaoy.net/createPromise/promise.png&quot; class=&quot;full-image&quot; alt=&quot;Promise&quot; title=&quot;Promise&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;p&gt;前端近年的兴起，有大部分是因为 &lt;code&gt;NodeJS&lt;/code&gt; 的诞生，而 &lt;code&gt;NodeJS&lt;/code&gt; 是个适用于 &lt;strong&gt;异步IO&lt;/strong&gt; 密集型的语言，一些基于 &lt;code&gt;NodeJS&lt;/code&gt; 的框架，比喻 &lt;em&gt;KOA2、Adonis&lt;/em&gt; 就有大量的 &lt;code&gt;async&lt;/code&gt; 和 &lt;code&gt;await&lt;/code&gt; 语法，&lt;code&gt;async&lt;/code&gt;的函数的返回值就是 &lt;code&gt;Promise&lt;/code&gt; 对象，我们可以用 &lt;code&gt;async&lt;/code&gt; 和 &lt;code&gt;await&lt;/code&gt; 语法，写出优雅的异步代码，来替换难看且难维护的回调函数。&lt;/p&gt;
&lt;p&gt;这里我们会渐进式的来创建一个 &lt;code&gt;Promise&lt;/code&gt; 的实现，如果，你还不了解 &lt;code&gt;Promise&lt;/code&gt; ，赶快移步 &lt;a href=&quot;http://es6.ruanyifeng.com/#docs/promise&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Promise&lt;/a&gt; 了解学习，当然这个实现会符合 &lt;a href=&quot;https://promisesaplus.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Promise/A+&lt;/a&gt; 规范，&lt;code&gt;JavaScript&lt;/code&gt; 中有很多第三方的 &lt;code&gt;Promise&lt;/code&gt; 库，&lt;a href=&quot;http://bluebirdjs.com/docs/getting-started.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;bluebird&lt;/a&gt; 就是一个第三方 &lt;code&gt;Promise&lt;/code&gt; 类库，相比其它第三方类库或标准对象来说，其有以下优点：功能更齐全而不臃肿、浏览器兼容性更好,大家可以了解下。&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="https://cdn.lishaoy.net/createPromise/promise.png" class="full-image" alt="Promise" title="Promise"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><p>前端近年的兴起，有大部分是因为 <code>NodeJS</code> 的诞生，而 <code>NodeJS</code> 是个适用于 <strong>异步IO</strong> 密集型的语言，一些基于 <code>NodeJS</code> 的框架，比喻 <em>KOA2、Adonis</em> 就有大量的 <code>async</code> 和 <code>await</code> 语法，<code>async</code>的函数的返回值就是 <code>Promise</code> 对象，我们可以用 <code>async</code> 和 <code>await</code> 语法，写出优雅的异步代码，来替换难看且难维护的回调函数。</p><p>这里我们会渐进式的来创建一个 <code>Promise</code> 的实现，如果，你还不了解 <code>Promise</code> ，赶快移步 <a href="http://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="noopener">Promise</a> 了解学习，当然这个实现会符合 <a href="https://promisesaplus.com" target="_blank" rel="noopener">Promise/A+</a> 规范，<code>JavaScript</code> 中有很多第三方的 <code>Promise</code> 库，<a href="http://bluebirdjs.com/docs/getting-started.html" target="_blank" rel="noopener">bluebird</a> 就是一个第三方 <code>Promise</code> 类库，相比其它第三方类库或标准对象来说，其有以下优点：功能更齐全而不臃肿、浏览器兼容性更好,大家可以了解下。</p><hr><a id="more"></a><p>废话不多说，直接开干。。。 😠</p><h2 id="定义-Promise-类型"><a href="#定义-Promise-类型" class="headerlink" title="定义 Promise 类型"></a>定义 Promise 类型</h2><p>一个简单 <code>Promise</code> 语法，如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ... doSomething</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</span><br><span class="line">    resolve(value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// success</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// failure</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="实现-resolve-和-then"><a href="#实现-resolve-和-then" class="headerlink" title="实现 resolve 和 then"></a>实现 resolve 和 then</h3><p>首先我们以上 👆 的语法，自己定义一个 <code>Promise</code> 实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> callback = <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">//实现 then 方法 , 先一步一步来，实现传一个参数 -- resolve</span></span><br><span class="line">  <span class="keyword">this</span>.then = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    callback = cb;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//实现 resolve , value:异步操作的最终值</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    callback(value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//执行 function 参数</span></span><br><span class="line">  fn(resolve);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个简单的实例写好了，然后，来用一下,看看 👀 结果如何</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">  resolve(<span class="number">66</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><div class="note info"><p>执行结果是：<code>callback is not a function</code></p></div><h3 id="修改-callback-为异步"><a href="#修改-callback-为异步" class="headerlink" title="修改 callback 为异步"></a>修改 callback 为异步</h3><p><strong>这里就遇到一个问题： </strong>  </p><p><strong> 发现 <code>resolve()</code> 在 <code>then()</code> 之前调用，在 <code>resolve()</code> 被调用的时候， <code>callback</code> 还是 <code>null</code> ，我们的代码是同步的，而不是异步的。<br> 如是，想办法解决掉这个问题，就是利用 <code>setTimeout</code> , 把 <code>callback</code> 加入异步队列</strong> </p><p>代码如下 👇</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> callback = <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">//实现 then 方法 , 先一步一步来，实现传一个参数 -- resolve</span></span><br><span class="line">  <span class="keyword">this</span>.then = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    callback = cb;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//实现 resolve , value:异步操作的最终值</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 用 setTimeout 把 callback 加入到异步队列，这样就会，先执行 then() 方法</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      callback(value);</span><br><span class="line">    &#125;,<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//执行 function 参数</span></span><br><span class="line">  fn(resolve);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，再来用一下,看看 👀 结果如何</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">  resolve(<span class="number">66</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><div class="note info"><p>执行结果是：<code>66</code></p></div><h2 id="未完待续。。。"><a href="#未完待续。。。" class="headerlink" title="未完待续。。。"></a>未完待续。。。</h2>]]></content:encoded>
      
      <comments>https://www.h.lishaoy.net/createPromise.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>IVAN AIVAZOVSKY 赏析</title>
      <link>https://www.h.lishaoy.net/IVANAIVAZOVSKY.html</link>
      <guid>https://www.h.lishaoy.net/IVANAIVAZOVSKY.html</guid>
      <pubDate>Sat, 07 Apr 2018 02:39:13 GMT</pubDate>
      <description>
      
        &lt;span itemprop=&quot;image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;https://cdn.lishaoy.net/IVANAIVAZOVSKY/home.png&quot; class=&quot;full-image&quot; alt=&quot;IVAN AIVAZOVSKY&quot; title=&quot;IVAN AIVAZOVSKY&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;p&gt;&lt;em&gt;在 &lt;a href=&quot;https://www.awwwards.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;awwwards&lt;/a&gt; 上发现一个设计和交互超级棒的网页  &lt;a href=&quot;http://ivanaivazovsky.life&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ivanaivazovsky.life&lt;/a&gt;，整个设计非常简洁大胆，色彩基本只有黑白色，看起来非常舒服，直接看效果吧！&lt;/em&gt; 🍷 &lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="https://cdn.lishaoy.net/IVANAIVAZOVSKY/home.png" class="full-image" alt="IVAN AIVAZOVSKY" title="IVAN AIVAZOVSKY"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><p><em>在 <a href="https://www.awwwards.com" target="_blank" rel="noopener">awwwards</a> 上发现一个设计和交互超级棒的网页  <a href="http://ivanaivazovsky.life" target="_blank" rel="noopener">ivanaivazovsky.life</a>，整个设计非常简洁大胆，色彩基本只有黑白色，看起来非常舒服，直接看效果吧！</em> 🍷 </p><hr><a id="more"></a><h4 id="HOME"><a href="#HOME" class="headerlink" title="HOME"></a>HOME</h4><p>网页加载完成后，显示的首页，加载首页有一个动画效果，有一层烟雾慢慢散开，然后才出现人物。</p><p>这个页面非常简洁上面：MENU 、SOUND.ON（音乐开关）、和 语言的切换下面：200周年小logo、ABOUT（关于）、CREDITS（大概是工作人员名单的意思）</p><span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="https://cdn.lishaoy.net/IVANAIVAZOVSKY/home.png" class="full-image" alt="home" title="home"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><h4 id="MENU"><a href="#MENU" class="headerlink" title="MENU"></a>MENU</h4><p>菜单的设计是全屏的，每个菜单都有一个背景图，觉得这个设计简洁而且大气。</p><span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="https://cdn.lishaoy.net/IVANAIVAZOVSKY/menu.png" class="full-image" alt="menu" title="menu"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><h4 id="WORKS"><a href="#WORKS" class="headerlink" title="WORKS"></a>WORKS</h4><p>进来会显示所有的作品，左边有个分类菜单（FILTER）</p><span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="https://cdn.lishaoy.net/IVANAIVAZOVSKY/works1.png" class="full-image" alt="works" title="works"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><p><br>分类菜单（FILTER），非常的简洁，没有任何文字描述，鼠标放上去会有一个简单的介绍</p><span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="https://cdn.lishaoy.net/IVANAIVAZOVSKY/works2.png" class="full-image" alt="works" title="works"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><p><br>点击每个作品，可以进来详情页面，页非常简洁，黑框框的简介，这个不能收进去，如果能收进去就更好了</p><span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="https://cdn.lishaoy.net/IVANAIVAZOVSKY/works-item1.png" class="full-image" alt="works-item" title="works-item"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><p><br>点击黑色的加，可以进入详细介绍，黑底白字，一个小叉叉，简洁舒服</p><span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="https://cdn.lishaoy.net/IVANAIVAZOVSKY/works-item2.png" class="full-image" alt="works-item" title="works-item"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><p><br>点击 VIEW ALL PAINTINGS 可以显示缩小的视图，方便随意切换，这个设计也是棒棒的</p><span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="https://cdn.lishaoy.net/IVANAIVAZOVSKY/works-item3.png" class="full-image" alt="works-item" title="works-item"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><p>大的文字导航，漂亮的图片背景，鼠标放到每个菜单上背景图可以对应切换</p><span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="https://cdn.lishaoy.net/IVANAIVAZOVSKY/life.png" class="full-image" alt="life" title="life"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><p><br>点击菜单进入live详情，这里还有一个小动画</p><span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="https://cdn.lishaoy.net/IVANAIVAZOVSKY/life-item1.png" class="full-image" alt="life-item" title="life-item"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><p><br>点击 ARCHIVE 可以总预览界面</p><span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="https://cdn.lishaoy.net/IVANAIVAZOVSKY/life-item2.png" class="full-image" alt="life-item" title="life-item"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><h4 id="AWARDS"><a href="#AWARDS" class="headerlink" title="AWARDS"></a>AWARDS</h4><span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="https://cdn.lishaoy.net/IVANAIVAZOVSKY/awards.png" class="full-image" alt="awards" title="awards"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><h4 id="MAP"><a href="#MAP" class="headerlink" title="MAP"></a>MAP</h4><p>这个界面也是超简洁，把鼠标放在圆点上出来简介</p><span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="https://cdn.lishaoy.net/IVANAIVAZOVSKY/map1.png" class="full-image" alt="map" title="map"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><p><br>点击简介，进入详情，左下角的 NEXT 可以切换图片</p><span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="https://cdn.lishaoy.net/IVANAIVAZOVSKY/map2.png" class="full-image" alt="map" title="map"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><p>忘了介绍 左右上角中间 有个导航，告诉你的位置，也方便回到主页</p>]]></content:encoded>
      
      <comments>https://www.h.lishaoy.net/IVANAIVAZOVSKY.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>CSSModules</title>
      <link>https://www.h.lishaoy.net/CSSModules.html</link>
      <guid>https://www.h.lishaoy.net/CSSModules.html</guid>
      <pubDate>Sat, 07 Apr 2018 01:58:11 GMT</pubDate>
      <description>
      
        &lt;span itemprop=&quot;image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;https://cdn.lishaoy.net/CSSModules/cssModules.png&quot; class=&quot;full-image&quot; alt=&quot;CSS Modules&quot; title=&quot;CSS Modules&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;p&gt;这篇文章来一起了解 &lt;code&gt;css&lt;/code&gt; 模块化的用法和原理 ，&lt;strong&gt;dome&lt;/strong&gt; 地址：&lt;a href=&quot;https://github.com/persilee/webpack_test&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;css modules&lt;/a&gt; 😮&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="https://cdn.lishaoy.net/CSSModules/cssModules.png" class="full-image" alt="CSS Modules" title="CSS Modules"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><p>这篇文章来一起了解 <code>css</code> 模块化的用法和原理 ，<strong>dome</strong> 地址：<a href="https://github.com/persilee/webpack_test" target="_blank" rel="noopener">css modules</a> 😮</p><hr><a id="more"></a><h4 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h4><p>一般我们引入页面的 <code>CSS</code> 的作用域都是全局的，都是对这个页面起作用，产生局部的作用域，就是使用一个独一无二的 <code>class</code> 的名称，不会和其它选择器重名的， <strong><code>CSS Modules</code></strong> 就是这个原理。下面我们看一段代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'jquery'</span>;</span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./main.css'</span>;</span><br><span class="line"><span class="keyword">import</span> test <span class="keyword">from</span> <span class="string">'./test.html'</span>;</span><br><span class="line"></span><br><span class="line">$(<span class="string">'body'</span>).append($(<span class="string">'&lt;div&gt;&lt;h1&gt;我会变绿&lt;/h1&gt;&lt;/div&gt;'</span>));</span><br><span class="line">$(<span class="string">'div h1'</span>).addClass(styles.testGreen);</span><br><span class="line">$(<span class="string">'body'</span>).append(test).find(<span class="string">'h2'</span>).addClass(styles.testBlue);</span><br></pre></td></tr></table></figure><p>上面的代码我把 <code>main.css</code> 输入到 <code>style</code> 对象，然后下面用了 <code>styles.testGreen</code> 对象的属性形式调用，就会应用 <code>main.css</code> 里的样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.testGreen</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构建工具（ <code>webpack</code> ）编译成一个哈希字符串</p><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;h1 class="_305zeUSoiGREv3GqPa9H8F"&gt;我会变绿&lt;/h1&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><code>main.css</code> 也会同时编译</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">._305zeUSoiGREv3GqPa9H8F</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#aaf200</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一来，这个类名就是独一无二的了，只对应用的组件有效。<strong><code>CSS Modules</code></strong> 支持不同的构建工具，这里我使用的是 <code>webpack</code> ,下文都是以 <code>webpack</code> 为例。</p><p>下面我们来看下 <strong><code>webpack.config.js</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  context: __dirname + <span class="string">'/src'</span>,</span><br><span class="line">  devtool: <span class="string">'eval-source-map'</span>, <span class="comment">//配置生成Source Maps，选择合适的选项</span></span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: [<span class="string">'./app.js'</span>, <span class="string">'./test.js'</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: __dirname + <span class="string">'/dist'</span>,</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    publicPath: <span class="string">'/assets'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.json$/</span>,<span class="attr">loader</span>: <span class="string">'json-loader'</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.js$/</span>,<span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,<span class="attr">loader</span>: <span class="string">'babel-loader'</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.css$/</span>,<span class="attr">loader</span>: ExtractTextPlugin.extract(&#123;</span><br><span class="line">          fallbackLoader: <span class="string">"style-loader"</span>,</span><br><span class="line">          loader: &#123;</span><br><span class="line">            loader: <span class="string">"css-loader"</span>,</span><br><span class="line">            query: &#123;</span><br><span class="line">              modules: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.html$/</span>,<span class="attr">loader</span>: <span class="string">'html-loader'</span>&#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'style.css'</span>)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面的代码可以看到，<code>query:{modules:true}</code> 代表开启 <strong><code>CSS Modules</code></strong> 模块，这里还配置了把所以得 <code>css</code> 合并一个文件，具体的可以了解 <code>webpack</code> 的 <code>extract-text-webpack-plugin</code>插件。</p><h4 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h4><p><strong><code>CSS Modules</code></strong> 允许用 <code>:global(.className)</code> 的语法声明一个全局的作用域。加了 <code>:global</code> 的不会被编译成哈希值。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:global(.title)</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>test.js</code> 使用普通的写法，就会引用全局的 <code>.title</code> 的样式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'jquery'</span>;</span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./main.css'</span>;</span><br><span class="line"><span class="keyword">import</span> test <span class="keyword">from</span> <span class="string">'./test.html'</span>;</span><br><span class="line"></span><br><span class="line">$(<span class="string">'body'</span>).append($(<span class="string">'&lt;div&gt;&lt;h1&gt;我是title&lt;/h1&gt;&lt;/div&gt;'</span>));</span><br><span class="line">$(<span class="string">'div h1'</span>).addClass(<span class="string">'title'</span>);</span><br></pre></td></tr></table></figure><p>结果 <code>h1</code> 的title显示黑色。</p><h4 id="Class的组合"><a href="#Class的组合" class="headerlink" title="Class的组合"></a>Class的组合</h4><p>在 <strong><code>CSS Modules</code></strong> 里，一个选择器可以继承另一个选择器。</p><p>在 <code>mian.css</code> 里，我让 <code>.testBlue</code> 继承 <code>.testBg</code> 类</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.testBg</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.testBlue</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="attribute">composes</span>: testBg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不用修改 <code>test.js</code> ,应用了 <code>.testBlue</code> 就会有一个红色的背景。</p><p>编译结果：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.eh33VC37uFHXkCZ8LfKYd</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.xrmZso54fTBX29J9G65Ai</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0c77f8</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相应的 <code>html</code> 代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"xrmZso54fTBX29J9G65Ai eh33VC37uFHXkCZ8LfKYd _2gsuNWm9029FHPYJP62C-t"</span>&gt;</span></span><br><span class="line">    我会变蓝</span><br><span class="line"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="输入变量"><a href="#输入变量" class="headerlink" title="输入变量"></a>输入变量</h4><p><strong><code>CSS Modules</code></strong> 支持使用变量，不过要安装 <strong>PsotCSS</strong> 和 <strong>postcss-modules-values</strong>。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save postcss-loader postcss-modules-<span class="built_in">values</span></span><br></pre></td></tr></table></figure><p>把 <code>postcss-loader</code> 加入 <code>webpack.config.js</code> .</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">    loader: <span class="string">'style-loader!css-loader?modules!postcss-loader'</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>然后我在 <code>colors.css</code> 里定义了一些变量。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">value</span> blue: #<span class="number">0</span>c77f8;</span><br><span class="line">@<span class="keyword">value</span> red: #ff0000;</span><br><span class="line">@<span class="keyword">value</span> green: #aaf200;</span><br></pre></td></tr></table></figure><p>在 <code>main.css</code> 里可以这样引用变量</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">value</span> colors: <span class="string">"./color.css"</span>;</span><br><span class="line">@<span class="keyword">value</span> blue, red, green from colors;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.testBg</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.testGreen</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.testBlue</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="attribute">composes</span>: testBg;</span><br><span class="line">  <span class="attribute">composes</span>: div;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以把 <code>colors.css</code> 的变量拿过来用了，是不是很神奇。</p>]]></content:encoded>
      
      <comments>https://www.h.lishaoy.net/CSSModules.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>如何使用 markdown 语法写博客</title>
      <link>https://www.h.lishaoy.net/markdownGrammar.html</link>
      <guid>https://www.h.lishaoy.net/markdownGrammar.html</guid>
      <pubDate>Fri, 06 Apr 2018 23:25:19 GMT</pubDate>
      <description>
      
        &lt;span itemprop=&quot;image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;https://cdn.lishaoy.net/markdownGrammar/markdown.png&quot; class=&quot;full-image&quot; alt=&quot;markdown&quot; title=&quot;markdown&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;p&gt;平时我写日记、文档和博客都会用到 &lt;code&gt;markdown&lt;/code&gt; 语法，我用的是 &lt;code&gt;马克飞象&lt;/code&gt; 先在本地写好，而且可以和 &lt;code&gt;印象笔记&lt;/code&gt; 同步，如果知识积累的多了，也会总结下，分享到社区，直接 &lt;kbd&gt;⌘ -  C&lt;/kbd&gt;  然后 &lt;kbd&gt;⌘ -  V&lt;/kbd&gt;  就可以了，特别方便。 🙂&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="https://cdn.lishaoy.net/markdownGrammar/markdown.png" class="full-image" alt="markdown" title="markdown"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><p>平时我写日记、文档和博客都会用到 <code>markdown</code> 语法，我用的是 <code>马克飞象</code> 先在本地写好，而且可以和 <code>印象笔记</code> 同步，如果知识积累的多了，也会总结下，分享到社区，直接 <kbd>⌘ -  C</kbd>  然后 <kbd>⌘ -  V</kbd>  就可以了，特别方便。 🙂</p><hr><a id="more"></a><h3 id="什么是Markdown语法"><a href="#什么是Markdown语法" class="headerlink" title="什么是Markdown语法"></a>什么是Markdown语法</h3><p><code>Markdown</code> 是一种轻量级标记语言，目标是实现「易读易写」。</p><blockquote><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— <a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener">维基百科</a></p></blockquote><hr><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p><strong>在 <code>Markdown</code> 中，你只需要在文本前面加上 <code>#</code> 即可，同理、你还可以增加二级标题、三级标题、四级标题、五级标题和六级标题，总共六级，只需要增加 <code>#</code> 即可，标题字号相应降低。例如：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><p>效果如下 ：</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><hr><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><strong><code>Markdown</code> 标记区块引用是使用类似 email 中用的引用方式，只需要在整个段落的第一行最前面加上 &gt; 。</strong>例如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;这是一个引用示例</span><br></pre></td></tr></table></figure></p><p>效果如下：</p><blockquote><p>这是一个引用示例</p></blockquote><p><strong>区块引用可以嵌套，只要根据层次加上不同数量的 &gt; ：</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这是第一级引用。</span><br><span class="line">&gt;</span><br><span class="line">&gt; &gt; 这是第二级引用。</span><br><span class="line">&gt;</span><br><span class="line">&gt; 现在回到第一级引用。</span><br></pre></td></tr></table></figure><p>效果如下：</p><blockquote><p>这是第一级引用。</p><blockquote><p>这是第二级引用。</p></blockquote><p>现在回到第一级引用。</p></blockquote><hr><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p><strong>Markdown 支持有序列表和无序列表。</strong></p><ol><li>无序列表使用星号、加号或是减号作为列表标记：</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*   Red</span><br><span class="line">*   Green</span><br><span class="line">*   Blue</span><br></pre></td></tr></table></figure><p>等同于<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+   Red</span><br><span class="line">+   Green</span><br><span class="line">+   Blue</span><br></pre></td></tr></table></figure></p><p>也等同于<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-   Red</span><br><span class="line">-   Green</span><br><span class="line">-   Blue</span><br></pre></td></tr></table></figure></p><p>效果如下：</p><ul><li>Red</li><li>Green</li><li>Blue</li></ul><hr><ol><li>有序列表则使用数字接着一个英文句点：</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.  Bird</span><br><span class="line"><span class="number">2</span>.  McHale</span><br><span class="line"><span class="number">3</span>.  Parish</span><br></pre></td></tr></table></figure><p>效果如下：</p><ol><li>Bird</li><li>McHale</li><li>Parish</li></ol><p>如果你的列表标记写成：<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.  Bird</span><br><span class="line"><span class="number">1</span>.  McHale</span><br><span class="line"><span class="number">1</span>.  Parish</span><br></pre></td></tr></table></figure></p><p>效果是：</p><ol><li>Bird</li><li>McHale</li><li>Parish</li></ol><p>甚至是：<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>. Bird</span><br><span class="line"><span class="number">1</span>. McHale</span><br><span class="line"><span class="number">8</span>. Parish</span><br></pre></td></tr></table></figure></p><p>效果是：</p><ol><li>Bird</li><li>McHale</li><li>Parish</li></ol><p>可以看到，数字还是正常的，所以，你可以让 <code>Markdown</code> 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。</p><p>如果要在列表项目内放进引用，那 &gt; 就需要缩进：<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*   A <span class="keyword">list</span> item with <span class="keyword">a</span> blockquote:</span><br><span class="line"></span><br><span class="line">    &gt; This <span class="keyword">is</span> <span class="keyword">a</span> blockquote</span><br><span class="line">    &gt; inside <span class="keyword">a</span> <span class="keyword">list</span> item.</span><br></pre></td></tr></table></figure></p><p>效果如下：</p><ul><li><p>A list item with a blockquote:</p><blockquote><p>This is a blockquoteinside a list item.</p></blockquote></li></ul><hr><h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>只要把你的代码块包裹在  <code>```</code>  之间，你就不需要通过无休止的缩进来标记代码块了。 在围栏式代码块中，你可以指定一个可选的语言标识符，然后我们就可以为它启用语法着色了。 举个例子，这样可以为一段 <code>Ruby</code> 代码着色：</p><p><code>```ruby <br>require ‘redcarpet’ <br>markdown = Redcarpet.new(“Hello World!”) <br>puts markdown.to_html <br>```</code></p><p>效果如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'redcarpet'</span></span><br><span class="line">markdown = Redcarpet.new(<span class="string">"Hello World!"</span>)</span><br><span class="line">puts markdown.to_html</span><br></pre></td></tr></table></figure><hr><h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p>在 <code>Markdown</code> 中，可以使用 * 和 _ 来表示斜体和加粗。</p><p>斜体：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*Coding，让开发更简单*</span><br><span class="line">_Coding，让开发更简单_</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><em>Coding，让开发更简单</em> <br><em>Coding，让开发更简单</em></p><p>加粗：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**Coding，让开发更简单**</span><br><span class="line">__Coding，让开发更简单__</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><strong>Coding，让开发更简单</strong> <br><strong>Coding，让开发更简单</strong></p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>如果要标记一小段行内代码，你可以用反引号把它包起来 <code>```</code> ，例如：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Use the `<span class="built_in">printf</span>()` <span class="function"><span class="keyword">function</span>.</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p>Use the <code>printf()</code> function.</p><hr><h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><p><code>Markdown</code> 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用尖括号包起来，<code>Markdown</code> 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;http://example.com/&gt;</span><br></pre></td></tr></table></figure></p><p>效果如下：</p><p><a href="http://example.com/" target="_blank" rel="noopener">http://example.com/</a></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><code>Markdown</code> 支持两种形式的链接语法： <em>行内式</em> 和 <em>参考式</em> 两种形式。我个人比较喜欢用 <em>参考式</em> 。</p><p>不管是哪一种，链接文字都是用 [方括号] 来标记。</p><ol><li><em>行内式</em> 的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 <code>title</code> 文字，只要在网址后面，用双引号把 <code>title</code> 文字包起来即可，例如：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is [an example](http://example.com/ &quot;Title&quot;) inline link.</span><br></pre></td></tr></table></figure><p>效果如下：</p><p>This is <a href="http://example.com/" title="Title" target="_blank" rel="noopener">an example</a> inline link.</p><hr><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p><code>Markdown</code> 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： <em>行内式</em> 和 <em>参考式</em> 。</p><ol><li>行内式的图片语法看起来像是：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![Alt text](/path/to/img.jpg)</span><br><span class="line"></span><br><span class="line">![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</span><br></pre></td></tr></table></figure><p>详细叙述如下：</p><ul><li>一个惊叹号 <code>!</code></li><li>接着一个方括号，里面放上图片的替代文字</li><li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 <code>title</code> 文字。</li></ul><hr><ol><li>参考式的图片语法则长得像这样：</li></ol><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="meta">[</span>Alt text<span class="meta">]</span><span class="meta">[</span>id<span class="meta">]</span></span><br></pre></td></tr></table></figure><p><code>id</code> 是图片参考的名称，图片参考的定义方式则和连结参考一样：<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[</span>id<span class="meta">]</span>: url/to/image  "Optional title attribute"</span><br></pre></td></tr></table></figure></p><p><code>Markdown</code> 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code>  标签。</p><hr><h3 id="LaTeX-公式"><a href="#LaTeX-公式" class="headerlink" title="LaTeX 公式"></a>LaTeX 公式</h3><p>可以创建行内公式，例如 :<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$</span><br></pre></td></tr></table></figure></p><p>效果如下：</p><p>$\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$</p><p>或者块级公式：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$x = \dfrac&#123;-b \pm \sqrt&#123;b^2 - 4ac&#125;&#125;&#123;2a&#125; $$</span><br></pre></td></tr></table></figure></p><p>效果如下：</p><p>$$ x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$</p><hr><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| Item      |    Value | Qty  |</span><br><span class="line">| :-------- | --------:| :--: |</span><br><span class="line">| Computer  | <span class="number">1600</span> USD |  <span class="number">5</span>   |</span><br><span class="line">| Phone     |   <span class="number">12</span> USD |  <span class="number">12</span>  |</span><br><span class="line">| Pipe      |    <span class="number">1</span> USD | <span class="number">234</span>  |</span><br></pre></td></tr></table></figure><p>效果如下：</p><table><thead><tr><th style="text-align:left">Item</th><th style="text-align:right">Value</th><th style="text-align:center">Qty</th></tr></thead><tbody><tr><td style="text-align:left">Computer</td><td style="text-align:right">1600 USD</td><td style="text-align:center">5</td></tr><tr><td style="text-align:left">Phone</td><td style="text-align:right">12 USD</td><td style="text-align:center">12</td></tr><tr><td style="text-align:left">Pipe</td><td style="text-align:right">1 USD</td><td style="text-align:center">234</td></tr></tbody></table><hr><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p><code>```flow <br>st=&gt;start: Start <br>e=&gt;end <br>op=&gt;operation: My Operation <br>cond=&gt;condition: Yes or No? <br><br>st-&gt;op-&gt;cond <br>cond(yes)-&gt;e <br>cond(no)-&gt;op <br>```</code></p><p>效果如下：</p><div id="flowchart-0" class="flow-chart"></div><p>以及时序图:</p><p><code>```sequence <br>Alice-&gt;Bob: Hello Bob, how are you? <br>Note right of Bob: Bob thinks <br>Bob–&gt;Alice: I am good thanks! <br>```</code></p><p>效果如下：</p><div id="sequence-0"></div><h3 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h3><p>使用 <code>- [ ]</code> 和 <code>- [x]</code> 语法可以创建复选框，实现 todo-list 等功能。例如：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- <span class="meta">[</span>x<span class="meta">]</span> 已完成事项</span><br><span class="line">- <span class="meta">[</span> <span class="meta">]</span> 待办事项1</span><br><span class="line">- <span class="meta">[</span> <span class="meta">]</span> 待办事项2</span><br></pre></td></tr></table></figure><p>效果如下：</p><ul><li style="list-style: none"><input type="checkbox" checked> 已完成事项</li><li style="list-style: none"><input type="checkbox"> 待办事项1</li><li style="list-style: none"><input type="checkbox"> 待办事项2</li></ul><hr><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>在 <code>Markdown</code> 中，可以制作分割线，例如：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure><p>效果如下：</p><hr><h3 id="反斜杠"><a href="#反斜杠" class="headerlink" title="反斜杠"></a>反斜杠</h3><p><code>Markdown</code> 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 <code>&lt;em&gt;</code> 标签），你可以在星号的前面加上反斜杠：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\*literal asterisks\*</span><br></pre></td></tr></table></figure></p><p>效果如下：</p><p>*literal asterisks*</p><p><code>Markdown</code> 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line">*   星号</span><br><span class="line">_   底线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  括弧</span><br><span class="line">#   井字号</span><br><span class="line">+   加号</span><br><span class="line">-   减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   惊叹号</span><br></pre></td></tr></table></figure><p><script src="https://cdnjs.cloudflare.com/ajax/libs/webfont/1.6.27/webfontloader.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/snap.svg/0.4.1/snap.svg-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js"></script><textarea id="sequence-0-code" style="display: none">Alice->Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob-->Alice: I am good thanks!</textarea><textarea id="sequence-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12,"theme":"simple"}</textarea><script>  var code = document.getElementById("sequence-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-0-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-0", options);</script><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: Starte=>endop=>operation: My Operationcond=>condition: Yes or No?st->op->condcond(yes)->econd(no)->op</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12,"theme":"simple"}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script></p>]]></content:encoded>
      
      <comments>https://www.h.lishaoy.net/markdownGrammar.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>被遗忘的CSS</title>
      <link>https://www.h.lishaoy.net/upsetCssSummary.html</link>
      <guid>https://www.h.lishaoy.net/upsetCssSummary.html</guid>
      <pubDate>Fri, 06 Apr 2018 22:45:52 GMT</pubDate>
      <description>
      
        &lt;span itemprop=&quot;image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;https://cdn.lishaoy.net/upsetCssSummary/css.png&quot; class=&quot;full-image&quot; alt=&quot;css&quot; title=&quot;css&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;p&gt;平时在工作中遇到一些比较偏门的 &lt;code&gt;css&lt;/code&gt; ，用过一两次，但是老是记不住，于是又需要去 &lt;strong&gt;baidu、 google&lt;/strong&gt; ，所以都积累起来，方便以后查看（持续更新…） 😀&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="https://cdn.lishaoy.net/upsetCssSummary/css.png" class="full-image" alt="css" title="css"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><p>平时在工作中遇到一些比较偏门的 <code>css</code> ，用过一两次，但是老是记不住，于是又需要去 <strong>baidu、 google</strong> ，所以都积累起来，方便以后查看（持续更新…） 😀</p><hr><a id="more"></a><h4 id="outline-当input选中的时候会出现一个边框"><a href="#outline-当input选中的时候会出现一个边框" class="headerlink" title="outline  当input选中的时候会出现一个边框"></a><code>outline</code>  <strong>当input选中的时候会出现一个边框</strong></h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*一般设置成 none*/</span></span><br><span class="line"><span class="selector-tag">textarea</span><span class="selector-pseudo">:focus</span>, <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>&#123;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="contenteditable-规定元素内容是否可编辑"><a href="#contenteditable-规定元素内容是否可编辑" class="headerlink" title="contenteditable 规定元素内容是否可编辑"></a><code>contenteditable</code> <strong>规定元素内容是否可编辑</strong></h4><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example-one"</span> <span class="attr">contenteditable</span>=<span class="string">"true"</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#example-one</span> &#123; </span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">10px</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[contenteditable="true"]</span> &#123; </span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>; <span class="attribute">outline</span>: <span class="number">2px</span> dashed <span class="number">#CCC</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[contenteditable="true"]</span><span class="selector-pseudo">:hover</span> &#123; </span><br><span class="line">    <span class="attribute">outline</span>: <span class="number">2px</span> dashed <span class="number">#0090D2</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="webkit-playsinline-video-都可以在页面中播放，而不是全屏播放"><a href="#webkit-playsinline-video-都可以在页面中播放，而不是全屏播放" class="headerlink" title="webkit-playsinline video 都可以在页面中播放，而不是全屏播放"></a><code>webkit-playsinline</code> <strong>video 都可以在页面中播放，而不是全屏播放</strong></h4><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">"myvideo"</span> <span class="attr">src</span>=<span class="string">"test.mp4"</span> <span class="attr">webkit-playsinline</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="clearfix-清除浮动"><a href="#clearfix-清除浮动" class="headerlink" title="clearfix 清除浮动"></a><code>clearfix</code> <strong>清除浮动</strong></h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    <span class="attribute">zoom</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">     <span class="attribute">visibility</span>: hidden;</span><br><span class="line">     <span class="attribute">display</span>: block;</span><br><span class="line">     <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">     <span class="attribute">content</span>: <span class="string">" "</span>;</span><br><span class="line">     <span class="attribute">clear</span>: both;</span><br><span class="line">     <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="user-select-禁止选中文本"><a href="#user-select-禁止选中文本" class="headerlink" title="user-select 禁止选中文本"></a><code>user-select</code> <strong>禁止选中文本</strong></h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-user-select</span>: none; <span class="comment">/* Chrome, Opera, Safari */</span></span><br><span class="line">    <span class="attribute">-moz-user-select</span>: none; <span class="comment">/* Firefox 2+ */</span></span><br><span class="line">    <span class="attribute">-ms-user-select</span>: none; <span class="comment">/* IE 10+ */</span></span><br><span class="line">    <span class="attribute">user-select</span>: none; <span class="comment">/* Standard syntax */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="webkit-scrollbar-自定义浏览器滚动条"><a href="#webkit-scrollbar-自定义浏览器滚动条" class="headerlink" title="webkit-scrollbar 自定义浏览器滚动条"></a><code>webkit-scrollbar</code> <strong>自定义浏览器滚动条</strong></h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*定义滚动条宽高及背景，宽高分别对应横竖滚动条的尺寸*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::-webkit-scrollbar</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(245, 245, 245, 0.47);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*定义滚动条的轨道，内阴影及圆角*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::-webkit-scrollbar-track</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="built_in">rgba</span>(0, 0, 0, .3);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*定义滑块，内阴影及圆角*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::-webkit-scrollbar-thumb</span> &#123;</span><br><span class="line">    <span class="comment">/*width: 10px;*/</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">-webkit-box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="built_in">rgba</span>(0, 0, 0, .3);</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(85, 85, 85, 0.25);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="webkit-appearance-去除默认样式"><a href="#webkit-appearance-去除默认样式" class="headerlink" title="webkit-appearance 去除默认样式"></a><code>webkit-appearance</code> <strong>去除默认样式</strong></h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span>, <span class="selector-tag">button</span>, <span class="selector-tag">textarea</span>, <span class="selector-tag">select</span> &#123;</span><br><span class="line">    *font-size: 100%;</span><br><span class="line">    <span class="selector-tag">-webkit-appearance</span><span class="selector-pseudo">:none</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用CSS-transforms-或者-animations时可能会有页面闪烁的bug"><a href="#使用CSS-transforms-或者-animations时可能会有页面闪烁的bug" class="headerlink" title="使用CSS transforms 或者 animations时可能会有页面闪烁的bug"></a><strong>使用CSS transforms 或者 animations时可能会有页面闪烁的bug</strong></h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">elements</span> &#123;</span><br><span class="line">     <span class="attribute">-webkit-backface-visibility</span>: hidden; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="transform-style-preserve-3d-让元素支持3D"><a href="#transform-style-preserve-3d-让元素支持3D" class="headerlink" title="transform-style: preserve-3d 让元素支持3D"></a><code>transform-style: preserve-3d</code> <strong>让元素支持3D</strong></h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">elements</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateY</span>(60deg); <span class="comment">/* Chrome, Safari, Opera */</span></span><br><span class="line">    <span class="attribute">-webkit-transform-style</span>: preserve-<span class="number">3</span>d; <span class="comment">/* Chrome, Safari, Opera */</span></span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(60deg);</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="perspective-这个属性定义子元素会获得透视效果，而不是元素本身"><a href="#perspective-这个属性定义子元素会获得透视效果，而不是元素本身" class="headerlink" title="perspective 这个属性定义子元素会获得透视效果，而不是元素本身"></a><code>perspective</code> <strong>这个属性定义子元素会获得透视效果，而不是元素本身</strong></h4><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cube pers250"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"face front"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"face back"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"face right"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"face left"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"face top"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"face bottom"</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cube</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">backface-visibility</span>: visible;</span><br><span class="line">  <span class="attribute">perspective-origin</span>: <span class="number">150%</span> <span class="number">150%</span>;</span><br><span class="line">  <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">  <span class="attribute">-webkit-backface-visibility</span>: visible;</span><br><span class="line">  <span class="attribute">-webkit-perspective-origin</span>: <span class="number">150%</span> <span class="number">150%</span>;</span><br><span class="line">  <span class="attribute">-webkit-transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pers250</span> &#123;</span><br><span class="line">  <span class="attribute">perspective</span>: <span class="number">250px</span>;</span><br><span class="line">  <span class="attribute">-webkit-perspective</span>: <span class="number">250px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.face</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="css实现不换行、自动换行、强制换行"><a href="#css实现不换行、自动换行、强制换行" class="headerlink" title="css实现不换行、自动换行、强制换行"></a><strong>css实现不换行、自动换行、强制换行</strong></h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*不换行*/</span></span><br><span class="line"><span class="selector-tag">white-space</span><span class="selector-pseudo">:nowrap</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*自动换行*/</span></span><br><span class="line"><span class="selector-tag">word-wrap</span>: <span class="selector-tag">break-word</span>; </span><br><span class="line"><span class="selector-tag">word-break</span>: <span class="selector-tag">normal</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*强制换行*/</span></span><br><span class="line"><span class="selector-tag">word-break</span><span class="selector-pseudo">:break-all</span>;</span><br></pre></td></tr></table></figure><h4 id="font-smoothing-设置字体平滑，会让字体看起来比较舒服"><a href="#font-smoothing-设置字体平滑，会让字体看起来比较舒服" class="headerlink" title="font-smoothing 设置字体平滑，会让字体看起来比较舒服"></a><code>font-smoothing</code> <strong>设置字体平滑，会让字体看起来比较舒服</strong></h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>, <span class="selector-class">.h1</span>, <span class="selector-tag">h2</span>, <span class="selector-class">.h2</span>, <span class="selector-tag">h3</span>, <span class="selector-class">.h3</span>, <span class="selector-tag">h4</span>, <span class="selector-class">.h4</span>, <span class="selector-tag">h5</span>, <span class="selector-class">.h5</span>, <span class="selector-tag">h6</span>, <span class="selector-class">.h6</span>, <span class="selector-tag">p</span>, <span class="selector-class">.navbar</span>, <span class="selector-class">.brand</span>, <span class="selector-tag">a</span>, <span class="selector-class">.td-name</span>, <span class="selector-tag">td</span> &#123;</span><br><span class="line">    <span class="attribute">-moz-osx-font-smoothing</span>: grayscale;</span><br><span class="line">    <span class="attribute">-webkit-font-smoothing</span>: antialiased;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>, <span class="string">"微软雅黑"</span>, <span class="string">'Muli'</span>, <span class="string">"Helvetica"</span>, Arial, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="selection-修改选中文本颜色"><a href="#selection-修改选中文本颜色" class="headerlink" title="::selection 修改选中文本颜色"></a><code>::selection</code> <strong>修改选中文本颜色</strong></h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">::selection</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: white;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="built_in">rgba</span>(0, 0, 0, 0.8);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">::-webkit-selection</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: white;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="built_in">rgba</span>(0, 0, 0, 0.8);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">::-moz-selection</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: white;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="built_in">rgba</span>(0, 0, 0, 0.8);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://www.h.lishaoy.net/upsetCssSummary.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>PHP ThinkPHP 初识</title>
      <link>https://www.h.lishaoy.net/phpThinkPHPBasis.html</link>
      <guid>https://www.h.lishaoy.net/phpThinkPHPBasis.html</guid>
      <pubDate>Fri, 06 Apr 2018 07:59:52 GMT</pubDate>
      <description>
      
        &lt;span itemprop=&quot;image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;https://cdn.lishaoy.net/phpThinkPHPBasis/php.png&quot; class=&quot;full-image&quot; alt=&quot;php &amp;&amp; thinkPHP 基础&quot; title=&quot;php &amp;&amp; thinkPHP 基础&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;p&gt;这篇文章主要带大家认识一下 &lt;code&gt;PHP&lt;/code&gt; 、 &lt;code&gt;thinkPHP&lt;/code&gt; ，都是一下基础，其中包括 &lt;strong&gt;PHP语法（变量、字符串、数组、表单、数据库）&lt;/strong&gt; 、&lt;strong&gt;面向对象（Class创建、属性、继承、访问控制、抽象、接口等）&lt;/strong&gt; 、 &lt;strong&gt;thinkPHP（控制器、视图、模型等）&lt;/strong&gt; 😝&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="https://cdn.lishaoy.net/phpThinkPHPBasis/php.png" class="full-image" alt="php && thinkPHP 基础" title="php && thinkPHP 基础"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><p>这篇文章主要带大家认识一下 <code>PHP</code> 、 <code>thinkPHP</code> ，都是一下基础，其中包括 <strong>PHP语法（变量、字符串、数组、表单、数据库）</strong> 、<strong>面向对象（Class创建、属性、继承、访问控制、抽象、接口等）</strong> 、 <strong>thinkPHP（控制器、视图、模型等）</strong> 😝</p><hr><a id="more"></a><h2 id="PHP基础知识"><a href="#PHP基础知识" class="headerlink" title="PHP基础知识"></a>PHP基础知识</h2><p>以下知识点所有内容都是来自官方提供的 <strong>PHP</strong> 文档《<a href="http://php.net/manual/zh/index.php" target="_blank" rel="noopener">PHP手册</a>》，更多细节及知识点可以查看《<a href="http://php.net/manual/zh/index.php" target="_blank" rel="noopener">PHP手册</a>》。</p><p>如果你平时用 <strong>Windows</strong> 系统，可以使用 <a href="http://wampserver.com" target="_blank" rel="noopener">WAMP</a> 来搭建一个本地的开发环境。如果你是 <strong>OSX</strong> ，可以使用 <a href="https://www.mamp.info/en/" target="_blank" rel="noopener">MAMP</a> 来搭建一个开发环境。</p><h3 id="PHP语法"><a href="#PHP语法" class="headerlink" title="PHP语法"></a>PHP语法</h3><h4 id="认识PHP"><a href="#认识PHP" class="headerlink" title="认识PHP"></a>认识PHP</h4><p>PHP 代码被包含在特殊的起始符和结束符 <code>&lt;?php</code> 和 <code>?&gt;</code> 中，使得可以进出“PHP 模式”。如果文件都是 <strong>PHP</strong> 代码，可以省略结束标记，但是必须以 <code>;</code> 结束。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>php<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  &lt;?php</span><br><span class="line">    echo "lishaoying";</span><br><span class="line">    $name = '李少颖';</span><br><span class="line">    echo "hello: " . $name ;</span><br><span class="line">  ?&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果会输出：<code>lishaoyinghello: 李少颖</code>, <strong>PHP</strong> 解析器会解析开始<code>&lt;?php</code> 和结束标记 <code>?&gt;</code> 之间的内容。</p><hr><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p><strong>PHP</strong> 中的变量用一个美元符号后面跟变量名来表示。变量名是区分大小写的。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$name = <span class="string">'lishaoy.net'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"hello $name \r\n"</span>;</span><br></pre></td></tr></table></figure></p><p>结果会输出：<code>hello lishaoy.net</code>。</p><hr><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>在 <strong>PHP</strong> 里面定义一个字符串，可以使用单引号<code>&#39; &#39;</code>或者双引号<code>&quot; &quot;</code>。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$email = <span class="string">"persilee@foxmail.com&lt;br /&gt;"</span>;</span><br></pre></td></tr></table></figure></p><p>第三种表达字符串的方法是用 <strong>heredoc</strong> 句法结构：<code>&lt;&lt;&lt;</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$word = &lt;&lt;&lt; WORD</span><br><span class="line">这是一个测试 - $name 。 . &lt;br /&gt;</span><br><span class="line">今天，天气不错，我们出去玩吧！ . &lt;br /&gt;</span><br><span class="line">WORD;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $word;</span><br></pre></td></tr></table></figure><p>结果会输出： <code>这是一个测试 - lishaoy.net 。</code></p><hr><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>可以用 <code>array()</code> 语言结构来新建一个数组。它接受任意数量用逗号分隔的 键（<strong>key</strong>） <code>=&gt;</code> 值（<strong>value</strong>）对。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$tracks = <span class="keyword">array</span>(</span><br><span class="line">  <span class="number">0</span> =&gt; <span class="string">'长城'</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> var_dump(</span><br><span class="line">  $tracks[<span class="number">0</span>]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>结果会输出： <code>string(6) &quot;长城&quot;</code>。</p><hr><h4 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h4><p><code>$_GET</code>，还有 <code>$_POST</code>，这两个东西里面会存储使用不同的方法提交的表单的内容，<code>$_GET</code> 里面存储的是用 <strong>GET</strong> 方法提交的表单内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">""</span> <span class="attr">action</span>=<span class="string">"process.php"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user_name"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">placeholder</span>=<span class="string">"用户名"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">placeholder</span>=<span class="string">"Email"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>提 交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>process.php</strong>文件内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;pre&gt;'</span>;</span><br><span class="line">  var_dump(</span><br><span class="line">    $_GET[<span class="string">'user_name'</span>]</span><br><span class="line">  );</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;/pre&gt;'</span>;</span><br></pre></td></tr></table></figure><p>点提交之后会把文本框的内容传递到<strong>process.php</strong>文件处理，这里会输出文本框的输入内容。</p><hr><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p><strong>PDO</strong> 类，代表 <strong>PHP</strong> 和数据库服务之间的一个连接。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$db_handle = <span class="keyword">new</span> PDO(<span class="string">'mysql:host=127.0.0.1;dbname=msg;port=8889;charset=utf8'</span>,<span class="string">'msg_test'</span>,<span class="string">'123'</span>);</span><br></pre></td></tr></table></figure><p>这样就可以创建一个和数据库的连接。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  $db_handle = <span class="keyword">new</span> PDO(<span class="string">'mysql:host=127.0.0.1;dbname=msg;port=8889;charset=utf8'</span>,<span class="string">'msg_test'</span>,<span class="string">'123'</span>);</span><br><span class="line"></span><br><span class="line">$statement = $db_handle-&gt;prepare(</span><br><span class="line">  <span class="string">'insert into posts(title, content) values (:title, :content)'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$title = <span class="string">'Wall-e'</span>;</span><br><span class="line">$content = <span class="string">'wall-e已经在地球上孤独生活了几百年，他爱上了。。。'</span>;</span><br><span class="line"></span><br><span class="line">$statement-&gt;bindParam(<span class="string">':title'</span>, $title);</span><br><span class="line">$statement-&gt;bindParam(<span class="string">':content'</span>, $content);</span><br><span class="line"></span><br><span class="line">$statement-&gt;execute();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">  <span class="keyword">echo</span> $e-&gt;getMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以向数据库的<strong>posts</strong>表插入一条数据。</p><hr><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><h4 id="创建Class"><a href="#创建Class" class="headerlink" title="创建Class"></a>创建Class</h4><p>每个类的定义都以关键字 <code>class</code> 开头，后面跟着类名，后面跟着一对花括号，里面包含有类的属性与方法的定义。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Track</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h4 id="增加属性"><a href="#增加属性" class="headerlink" title="增加属性"></a>增加属性</h4><p>类的变量成员叫做“<strong>属性</strong>”，或者叫“<strong>字段</strong>”、“<strong>特征</strong>”，在本文档统一称为“<strong>属性</strong>”。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Track</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $track_name;</span><br><span class="line">    <span class="keyword">public</span> $track_artist;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p><strong>继承</strong> 将会影响到类与类，对象与对象之间的关系。</p><p>比如，当扩展一个类，子类就会<strong>继承</strong>父类所有公有的和受保护的方法。除非子类覆盖了父类的方法，被<strong>继承</strong>的方法都会保留其原有功能。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> <span class="keyword">extends</span> <span class="title">Track</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h4 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h4><p>对属性或方法的访问控制，是通过在前面添加关键字 <code>public</code>（公有），<code>protected</code>（受保护）或 <code>private</code>（私有）来实现的。被定义为公有的类成员可以 <strong>在任何地方被访问</strong>。被定义为受保护的类成员则可以 <strong>被其自身以及其子类和父类访问</strong>。被定义为私有的类成员则 <strong>只能被其定义所在的类访问</strong>。</p><hr><h4 id="静态属性与方法"><a href="#静态属性与方法" class="headerlink" title="静态属性与方法"></a>静态属性与方法</h4><p>声明类属性或方法为<strong>静态</strong>( <code>static</code> )，就可以不实例化类而直接访问。静态属性不能通过一个类已实例化的对象来访问（但静态方法可以）。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Track</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> $track_name = <span class="string">'Magic'</span>;</span><br><span class="line">    <span class="keyword">public</span> $track_artist;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">track_playing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'正在播放'</span> . <span class="keyword">self</span>::$track_name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>具有<strong>构造函数</strong>( <code>__construct</code> )的类会在每次创建新对象时先调用此方法，所以非常适合在使用对象之前做一些初始化工作。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Track</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $track_name;</span><br><span class="line">    <span class="keyword">public</span> $track_artist;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'初始化数据...'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">track_playing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'正在播放'</span> . <span class="keyword">$this</span>-&gt;$track_name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h4 id="构造器与获取器"><a href="#构造器与获取器" class="headerlink" title="构造器与获取器"></a>构造器与获取器</h4><p>在给不可访问属性赋值时，<code>__set()</code> 会被调用。读取不可访问属性的值时，<code>__get()</code> 会被调用。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Track</span></span></span><br><span class="line"><span class="class"></span>&#123;      </span><br><span class="line">    <span class="keyword">private</span> $track_name;</span><br><span class="line">    <span class="keyword">private</span> $track_artist;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span><span class="params">($name, $value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (property_exists(<span class="keyword">$this</span>, $name)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;$name = $value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;$name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">track_playing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'正在播放'</span> . <span class="keyword">$this</span>-&gt;$track_name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><p><strong>定义为抽象的类不能被实例化</strong>( <code>abstract</code> )。任何一个类，如果它里面至少有一个方法是被声明为抽象的，那么这个类就必须被声明为抽象的。被定义为抽象的方法只是声明了其调用方式（参数），不能定义其具体的功能实现。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Entity</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $entity_type;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_entity_type</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;entity_type;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Entity</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $entity_type = <span class="string">'user'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;entity_type . <span class="string">'：保存成功！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><p>使用 <strong>接口</strong>（ <code>interface</code>），可以指定某个类必须实现哪些方法，但不需要定义这些方法的具体内容。</p><p><strong>接口</strong> 是通过 <code>interface</code> 关键字来定义的，就像定义一个标准的类一样，但其中定义所有的方法都是空的。</p><p><strong>接口</strong> 中定义的所有方法都必须是公有，这是接口的特性。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">DataInterface</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_data</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">EntityInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_entity_type</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Entity</span> <span class="keyword">implements</span> <span class="title">DataInterface</span>, <span class="title">EntityInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_data</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'数据...'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_entity_type</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'类型...'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h2 id="ThinkPHP"><a href="#ThinkPHP" class="headerlink" title="ThinkPHP"></a>ThinkPHP</h2><p>以下内容基本都是来自<strong>ThinkPHP</strong><a href="http://document.thinkphp.cn/manual_3_2.html#preface" target="_blank" rel="noopener">官方文档</a>，更多细节及知识点可查看 <a href="http://document.thinkphp.cn/manual_3_2.html#preface" target="_blank" rel="noopener">官方文档</a>。</p><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><h4 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h4><p><strong>PHP版本要求</strong></p><ul><li>PHP5.3以上版本</li></ul><p><strong>支持的服务器和数据库环境</strong></p><ul><li>支持Windows/Unix服务器环境</li><li>可运行于包括Apache、IIS和nginx在内的多种WEB服务器和模式</li><li>支持Mysql、MsSQL、PgSQL、Sqlite、Oracle、Ibase、Mongo以及PDO等多种数据库和连接</li></ul><p>如果你平时用 <strong>Windows</strong> 系统，可以使用 <a href="http://wampserver.com" target="_blank" rel="noopener">WAMP</a> 来搭建一个本地的开发环境。如果你是 <strong>OSX</strong> ，可以使用 <a href="https://www.mamp.info/en/" target="_blank" rel="noopener">MAMP</a> 来搭建一个开发环境。</p><hr><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p>初始的目录结构如下：<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">www  WEB部署目录（或者子目录）</span><br><span class="line">├─<span class="built_in">index</span>.php       入口文件</span><br><span class="line">├─README.md       README文件</span><br><span class="line">├─Application     应用目录</span><br><span class="line">├─Public          资源文件目录</span><br><span class="line">└─ThinkPHP        框架目录</span><br></pre></td></tr></table></figure></p><p>其中框架目录<strong>ThinkPHP</strong>的结构如下：<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├─ThinkPHP 框架系统目录（可以部署在非web目录下面）</span><br><span class="line">│  ├─Common       核心公共函数目录</span><br><span class="line">│  ├─Conf         核心配置目录 </span><br><span class="line">│  ├─Lang         核心语言包目录</span><br><span class="line">│  ├─Library      框架类库目录</span><br><span class="line">│  │  ├─Think     核心Think类库包目录</span><br><span class="line">│  │  ├─Behavior  行为类库目录</span><br><span class="line">│  │  ├─Org       Org类库包目录</span><br><span class="line">│  │  ├─Vendor    第三方类库目录</span><br><span class="line">│  │  ├─ ...      更多类库目录</span><br><span class="line">│  ├─Mode         框架应用模式目录</span><br><span class="line">│  ├─Tpl          系统模板目录</span><br><span class="line">│  ├─LICENSE.txt  框架授权协议文件</span><br><span class="line">│  ├─logo.png     框架LOGO文件</span><br><span class="line">│  ├─README.txt   框架README文件</span><br><span class="line">│  └─ThinkPHP.php    框架入口文件</span><br></pre></td></tr></table></figure></p><hr><h4 id="入口文件"><a href="#入口文件" class="headerlink" title="入口文件"></a>入口文件</h4><p><strong>ThinkPHP</strong>采用单一入口模式进行项目部署和访问，无论完成什么功能，一个应用都有一个统一（但不一定是唯一）的入口。</p><p><strong>入口文件主要完成：</strong></p><ul><li>定义框架路径、项目路径（可选）</li><li>定义调试模式和应用模式（可选）</li><li>定义系统相关常量（可选）</li><li>载入框架入口文件（<strong>必须</strong>）</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开启调试模式 建议开发阶段开启 部署阶段注释或者设为false</span></span><br><span class="line">define(<span class="string">'APP_DEBUG'</span>,<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义应用目录</span></span><br><span class="line">define( <span class="string">'APP_PATH'</span>, dirname(<span class="keyword">__FILE__</span>).<span class="string">'/Application/'</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成后台模块</span></span><br><span class="line">define(<span class="string">'BIND_MODULE'</span>,<span class="string">'Admin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入ThinkPHP入口文件</span></span><br><span class="line"><span class="keyword">require</span> dirname( <span class="keyword">__FILE__</span>).<span class="string">'/ThinkPHP/ThinkPHP.php'</span>;</span><br></pre></td></tr></table></figure><hr><h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><p>入口文件是应用的单一入口，对应用的所有请求都定向到应用入口文件，系统会从URL参数中解析当前请求的模块、控制器和操作：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://serverName/<span class="built_in">index</span>.php/模块/控制器/操作</span><br></pre></td></tr></table></figure><hr><h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h3><h4 id="控制器定义"><a href="#控制器定义" class="headerlink" title="控制器定义"></a>控制器定义</h4><p>一般来说，ThinkPHP的控制器是一个类，而操作则是控制器类的一个公共方法。下面就是一个典型的控制器类的定义：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Admin</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'hello,thinkphp!'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在浏览器里访问：<code>http://msg:8899/index.php/Login/hello</code>，会显示：<code>hello,thinkphp!</code>。</p><hr><h4 id="AJAX返回"><a href="#AJAX返回" class="headerlink" title="AJAX返回"></a>AJAX返回</h4><p><strong>ThinkPHP</strong> 可以很好的支持AJAX请求，系统的\Think\Controller类提供了ajaxReturn方法用于AJAX调用后返回数据给客户端。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Admin</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      $data[<span class="string">'status'</span>]  = <span class="number">1</span>;</span><br><span class="line">      $data[<span class="string">'content'</span>] = <span class="string">'content'</span>;</span><br><span class="line">      <span class="keyword">$this</span>-&gt;ajaxReturn($data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h4 id="跳转和重定向"><a href="#跳转和重定向" class="headerlink" title="跳转和重定向"></a>跳转和重定向</h4><p><strong>页面跳转</strong></p><p>在应用开发中，经常会遇到一些带有提示信息的跳转页面，例如操作成功或者操作错误页面，并且自动跳转到另外一个目标页面。系统的<code>\Think\Controller</code>类内置了两个跳转方法<code>success</code>和<code>error</code>，用于页面跳转提示，而且可以支持ajax提交。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">jump</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  $posts = D(<span class="string">'posts'</span>); <span class="comment">//实例化User对象</span></span><br><span class="line">  $data[<span class="string">'title'</span>] = <span class="string">'cat'</span>;</span><br><span class="line">  $data[<span class="string">'content'</span>] = <span class="string">'猫，属于猫科动物，分家猫、野猫，是全世界家庭中较为广泛的宠物。'</span>;</span><br><span class="line">  $result = $posts-&gt;add($data);</span><br><span class="line">  <span class="keyword">if</span>($result)&#123;</span><br><span class="line">      <span class="comment">//设置成功后跳转页面的地址，默认的返回页面是$_SERVER['HTTP_REFERER']</span></span><br><span class="line">      <span class="keyword">$this</span>-&gt;success(<span class="string">'新增成功'</span>,<span class="string">'Login/login'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//错误页面的默认跳转页面是返回前一页，通常不需要设置</span></span><br><span class="line">      <span class="keyword">$this</span>-&gt;error(<span class="string">'新增失败'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>重定向</strong></p><p><code>Controller</code>类的<code>redirect</code>方法可以实现页面的重定向功能。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重定向到New模块的Category操作</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;redirect(<span class="string">'New/category'</span>, <span class="keyword">array</span>(<span class="string">'cate_id'</span> =&gt; <span class="number">2</span>), <span class="number">5</span>, <span class="string">'页面跳转中...'</span>);</span><br></pre></td></tr></table></figure><p>上面的用法是停留5秒后跳转到<code>New</code>模块的<code>category</code>操作，并且显示页面跳转中字样，重定向后会改变当前的<strong>URL</strong>地址。</p><hr><h4 id="输入变量"><a href="#输入变量" class="headerlink" title="输入变量"></a>输入变量</h4><p><strong>获取变量</strong></p><p><code>I</code>方法是<strong>ThinkPHP</strong>用于更加方便和安全的获取系统输入变量，可以用于任何地方，用法格式如下：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I(<span class="string">'变量类型.变量名/修饰符'</span>,[<span class="string">'默认值'</span>],[<span class="string">'过滤方法'</span>],[<span class="string">'额外数据源'</span>])</span><br></pre></td></tr></table></figure></p><p>变量类型是指请求方式或者输入类型，包括：</p><table><thead><tr><th style="text-align:left">变量类型</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">get</td><td style="text-align:left">获取GET参数</td></tr><tr><td style="text-align:left">post</td><td style="text-align:left">获取POST参数</td></tr><tr><td style="text-align:left">param</td><td style="text-align:left">自动判断请求类型获取GET、POST或者PUT参数</td></tr><tr><td style="text-align:left">request</td><td style="text-align:left">获取REQUEST 参数</td></tr><tr><td style="text-align:left">put</td><td style="text-align:left">获取PUT 参数</td></tr><tr><td style="text-align:left">session</td><td style="text-align:left">获取 $_SESSION 参数</td></tr><tr><td style="text-align:left">cookie</td><td style="text-align:left">获取 $_COOKIE 参数</td></tr><tr><td style="text-align:left">server</td><td style="text-align:left">获取 $_SERVER 参数</td></tr><tr><td style="text-align:left">globals</td><td style="text-align:left">获取 $GLOBALS参数</td></tr><tr><td style="text-align:left">path</td><td style="text-align:left">获取 PATHINFO模式的URL参数（3.2.2新增）</td></tr><tr><td style="text-align:left">data</td><td style="text-align:left">获取 其他类型的参数，需要配合额外数据源参数（3.2.2新增）</td></tr></tbody></table><p>我们以<code>GET</code>变量类型为例，说明下 <code>I</code> 方法的使用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">variable</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $data[<span class="string">'title'</span>] = I(<span class="string">'get.title'</span>);</span><br><span class="line">    $data[<span class="string">'content'</span>] = I(<span class="string">'get.content'</span>);</span><br><span class="line">    dump($data);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;display();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array(<span class="number">2</span>) &#123;</span><br><span class="line">  [<span class="string">"title"</span>] =&gt; <span class="built_in">string</span>(<span class="number">6</span>) <span class="string">"啊啊"</span></span><br><span class="line">  [<span class="string">"content"</span>] =&gt; <span class="built_in">string</span>(<span class="number">6</span>) <span class="string">"啊啊"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><h4 id="模板定义"><a href="#模板定义" class="headerlink" title="模板定义"></a>模板定义</h4><p>每个模块的模板文件是独立的，为了对模板文件更加有效的管理，<strong>ThinkPHP</strong>对模板文件进行目录划分，默认的模板文件定义规则是：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">视图目录/[模板主题]/控制器名/操作名+模板后缀</span><br></pre></td></tr></table></figure></p><p>默认的视图目录是模块的 <strong>View</strong> 目录（模块可以有多个视图文件目录，这取决于你的应用需要），框架的默认视图文件后缀是<code>.html</code>。 新版模板主题默认是空（表示不启用模板主题功能）。</p><p>在每个模板主题下面，是以模块下面的控制器名为目录，然后是每个控制器的具体操作模板文件，例如：</p><p>例如<strong>Login</strong>下的<strong>variable</strong>，对应的模板文件：<code>Admin/View/Login/variable.html</code></p><hr><h4 id="模板赋值"><a href="#模板赋值" class="headerlink" title="模板赋值"></a>模板赋值</h4><p>如果要在模板中输出变量，必须在在控制器中把变量传递给模板，系统提供了assign方法对模板变量赋值，无论何种变量类型都统一使用assign赋值。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">variable</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      $data[<span class="string">'title'</span>] = I(<span class="string">'get.title'</span>);</span><br><span class="line">      $data[<span class="string">'content'</span>] = I(<span class="string">'get.content'</span>);</span><br><span class="line">      <span class="keyword">$this</span>-&gt;assign($data);</span><br><span class="line">      <span class="keyword">$this</span>-&gt;display();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><code>assign</code>方法必须在<code>display</code>和<code>show</code>方法之前调用，并且系统只会输出设定的变量，其它变量不会输出（系统变量例外），一定程度上保证了变量的安全性。</p><p>赋值后，就可以在模板文件中输出变量了，如果使用的是内置模板的话，就可以这样输出： <code>{$title}</code>。</p><hr><h4 id="渲染模板"><a href="#渲染模板" class="headerlink" title="渲染模板"></a>渲染模板</h4><p>渲染模板输出最常用的是使用<code>display</code>方法，调用格式：<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">display</span>(<span class="string">'[模板文件]'</span>[,<span class="string">'字符编码'</span>][,<span class="string">'输出类型'</span>])</span><br></pre></td></tr></table></figure></p><p>如果没有按照模板定义规则来定义模板文件（或者需要调用其他控制器下面的某个模板），可以使用：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定模板输出</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;display(<span class="string">'edit'</span>);</span><br></pre></td></tr></table></figure></p><p>表示调用当前模块下面的<code>edit</code>模板<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;display(<span class="string">'Member:read'</span>);</span><br></pre></td></tr></table></figure></p><p>表示调用<code>Member</code>模块下面的<code>read</code>模板。</p><hr><h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><h4 id="模型定义"><a href="#模型定义" class="headerlink" title="模型定义"></a>模型定义</h4><blockquote><p>模型类并非必须定义，只有当存在独立的业务逻辑或者属性的时候才需要定义。</p></blockquote><p>模型类通常需要继承系统的\Think\Model类或其子类，下面是一个Home\Model\UserModel类的定义：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Admin</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostsModel</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>模型类的作用大多数情况是操作数据表的，如果按照系统的规范来命名模型类的话，大多数情况下是可以自动对应数据表。</p><h4 id="模型实例化"><a href="#模型实例化" class="headerlink" title="模型实例化"></a>模型实例化</h4><p>在ThinkPHP中，可以无需进行任何模型定义。</p><p>根据不同的模型定义，我们有几种实例化模型的方法，根据需要采用不同的方式：<strong>直接实例化</strong>可以和实例化其他类库一样实例化模型类，例如：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$User = <span class="keyword">new</span> \Home\Model\UserModel();</span><br><span class="line">$Info = <span class="keyword">new</span> \Admin\Model\InfoModel();</span><br><span class="line"><span class="comment">// 带参数实例化</span></span><br><span class="line">$New  = <span class="keyword">new</span> \Home\Model\NewModel(<span class="string">'blog'</span>,<span class="string">'think_'</span>,$connection);</span><br></pre></td></tr></table></figure></p><p><strong>D方法实例化</strong>上面实例化的时候我们需要传入完整的类名，系统提供了一个快捷方法 <strong>D</strong> 用于数据模型的实例化操作。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">jump</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      $posts = D(<span class="string">'posts'</span>); <span class="comment">//实例化posts对象</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><strong>M方法实例化模型</strong><strong>D</strong> 方法实例化模型类的时候通常是实例化某个具体的模型类，如果你仅仅是对数据表进行基本的  <strong>CURD</strong> 操作的话，使用 <strong>M</strong> 方法实例化的话，由于不需要加载具体的模型类，所以性能会更高。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用M方法实例化</span></span><br><span class="line">$User = M(<span class="string">'User'</span>);</span><br><span class="line"><span class="comment">// 和用法 $User = new \Think\Model('User'); 等效</span></span><br><span class="line"><span class="comment">// 执行其他的数据操作</span></span><br><span class="line">$User-&gt;select();</span><br></pre></td></tr></table></figure><h4 id="CURD操作"><a href="#CURD操作" class="headerlink" title="CURD操作"></a>CURD操作</h4><p><strong>ThinkPHP</strong>提供了灵活和方便的数据操作方法，对数据库操作的四个基本操作（CURD）：创建、更新、读取和删除的实现是最基本的，也是必须掌握的，在这基础之上才能熟悉更多实用的数据操作方法。</p><p><strong>CURD</strong> 操作通常是可以和连贯操作配合完成的。</p><p><strong>创建数据对象</strong></p><p><strong>ThinkPHP</strong>可以帮助你快速地创建数据对象，最典型的应用就是自动根据表单数据创建数据对象，这个优势在一个数据表的字段非常之多的情况下尤其明显。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化User模型</span></span><br><span class="line">$User = M(<span class="string">'User'</span>);</span><br><span class="line"><span class="comment">// 根据表单提交的POST数据创建数据对象</span></span><br><span class="line">$User-&gt;create();</span><br></pre></td></tr></table></figure><p><strong>数据写入</strong></p><p><strong>ThinkPHP</strong>的数据写入操作使用<code>add</code>方法，使用示例如下：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">jump</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  $posts = D(<span class="string">'posts'</span>); <span class="comment">//实例化User对象</span></span><br><span class="line">  $data[<span class="string">'title'</span>] = <span class="string">'cat'</span>;</span><br><span class="line">  $data[<span class="string">'content'</span>] = <span class="string">'猫，属于猫科动物，分家猫、野猫，是全世界家庭中较为广泛的宠物。'</span>;</span><br><span class="line">  $result = $posts-&gt;add($data);</span><br></pre></td></tr></table></figure></p><p><strong>读取数据</strong></p><p>读取数据是指读取数据表中的一行数据（或者关联数据），主要通过<code>find</code>方法完成，例如：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPosts</span><span class="params">()</span></span>&#123;</span><br><span class="line">      $posts = D(<span class="string">'posts'</span>); <span class="comment">//实例化posts对象</span></span><br><span class="line"></span><br><span class="line">      $posts-&gt;where(<span class="string">'id=1'</span>)-&gt;find();</span><br><span class="line"></span><br><span class="line">      dump($posts);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><code>find</code>方法查询数据的时候可以配合相关的连贯操作方法，其中最关键的则是where方法。</p><p><strong>更新数据</strong></p><p>更新数据使用<code>save</code>方法，例如：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">savePosts</span><span class="params">()</span></span>&#123;</span><br><span class="line">      $posts = D(<span class="string">'posts'</span>); <span class="comment">//实例化posts对象</span></span><br><span class="line">      $data[<span class="string">'title'</span>] = <span class="string">'dog'</span>;</span><br><span class="line">      $data[<span class="string">'content'</span>] = <span class="string">'狗，（拉丁文:Canis lupus familiaris,英文名称dog）中文亦称“犬”，狗属于食肉目，分布于世界各地。狗与马、牛、羊、猪、鸡并称“六畜”。有科学家认为狗是由早期人类从灰狼...'</span>;</span><br><span class="line">      $posts-&gt;where(<span class="string">'id=1'</span>)-&gt;save($data);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><strong>数据删除</strong></p><p><strong>ThinkPHP</strong>删除数据使用<code>delete</code>方法，例如：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deletePosts</span><span class="params">()</span></span>&#123;</span><br><span class="line">      $posts = D(<span class="string">'posts'</span>); <span class="comment">//实例化posts对象</span></span><br><span class="line"></span><br><span class="line">      $posts-&gt;delete(<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>表示删除主键为<strong>4</strong>的数据</p><h4 id="连贯操作"><a href="#连贯操作" class="headerlink" title="连贯操作"></a>连贯操作</h4><p><strong>ThinkPHP</strong>模型基础类提供的连贯操作方法（也有些框架称之为链式操作），可以有效的提高数据存取的代码清晰度和开发效率，并且支持所有的<strong>CURD</strong>操作。</p><p>使用也比较简单， 假如我们现在要查询一个<strong>User</strong>表的满足状态为<strong>1</strong>的前<strong>10</strong>条记录，并希望按照用户的创建时间排序 ，代码如下：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$User-&gt;where(<span class="string">'status=1'</span>)-&gt;order(<span class="string">'create_time'</span>)-&gt;limit(<span class="number">10</span>)-&gt;select();</span><br></pre></td></tr></table></figure></p><p>这里的<code>where</code>、<code>order</code>和<code>limit</code>方法就被称之为连贯操作方法，除了<code>select</code>方法必须放到最后一个外（因为select方法并不是连贯操作方法），连贯操作的方法调用顺序没有先后。</p>]]></content:encoded>
      
      <comments>https://www.h.lishaoy.net/phpThinkPHPBasis.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>浅谈JavaScript作用域</title>
      <link>https://www.h.lishaoy.net/javascriptScope.html</link>
      <guid>https://www.h.lishaoy.net/javascriptScope.html</guid>
      <pubDate>Sat, 31 Mar 2018 17:03:45 GMT</pubDate>
      <description>
      
        &lt;span itemprop=&quot;image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;https://cdn.lishaoy.net/javascriptScope/javascriptScope01.png &quot; class=&quot;full-image&quot; alt=&quot;javascript Scope&quot; title=&quot;javascript Scope&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;p&gt;我们在面试时，总会碰到一些奇奇怪怪的关于 &lt;strong&gt;作用域&lt;/strong&gt; 的面试题，其实弄清楚原理，万变不离其宗，大部分的面试题都可以得 ‘姐’。 &lt;/p&gt;
&lt;p&gt;所以，今天我们来谈谈 &lt;code&gt;JavaScript&lt;/code&gt; 的 &lt;strong&gt;作用域(javascript scope)&lt;/strong&gt; ，这是老生常谈的话题，这里我们会从 &lt;strong&gt;作用域&lt;/strong&gt; 开始，会延伸到 &lt;strong&gt;预解析规则（预编译） 、 变量提升 、函数提升 、表达式 、语句 、IIFE 、 匿名函数表达式 、 具名函数表达式&lt;/strong&gt; 等，彻底搞明白作用域这些事 🤓&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="https://cdn.lishaoy.net/javascriptScope/javascriptScope01.png " class="full-image" alt="javascript Scope" title="javascript Scope"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><p>我们在面试时，总会碰到一些奇奇怪怪的关于 <strong>作用域</strong> 的面试题，其实弄清楚原理，万变不离其宗，大部分的面试题都可以得 ‘姐’。 </p><p>所以，今天我们来谈谈 <code>JavaScript</code> 的 <strong>作用域(javascript scope)</strong> ，这是老生常谈的话题，这里我们会从 <strong>作用域</strong> 开始，会延伸到 <strong>预解析规则（预编译） 、 变量提升 、函数提升 、表达式 、语句 、IIFE 、 匿名函数表达式 、 具名函数表达式</strong> 等，彻底搞明白作用域这些事 🤓</p><hr><a id="more"></a><h3 id="变量提升和函数提升"><a href="#变量提升和函数提升" class="headerlink" title="变量提升和函数提升"></a>变量提升和函数提升</h3><p>在开始阐述之前，我们来看一段代码，看看结果是什么？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">alert(a);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123; alter(<span class="number">2</span>); &#125;</span><br><span class="line">alert(a);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line">alert(a);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">alert(a);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123; alter(<span class="number">4</span>); &#125;</span><br><span class="line">alert(a);</span><br><span class="line">a();</span><br></pre></td></tr></table></figure><p>这里先揭晓答案：<div class="note success"><ul><li>第一个 <code>alert(a)</code>  弹出 <code>function a(){ alter(4); }</code> 函数体</li><li>第二个 <code>alter(a)</code>  弹出 <code>function a(){ alter(4); }</code> 函数体</li><li>第三个 <code>alter(a)</code>  弹出 <strong>1</strong></li><li>第四个 <code>alter(a)</code>  弹出 <strong>3</strong></li><li>第五个 <code>alter(a)</code>  弹出 <strong>3</strong></li><li>最后一行报错 <code>a is not a function</code></li></ul></div>  </p><p>下面来分析一下这段代码：其实在 <code>javascript</code> 开始执行代码之前，有一个 <strong>预解析（预编译）</strong> 的过程，这个过程会产生 <strong>变量提升</strong> 和 <strong>函数提升</strong> ，其实整个执行过程可以分为两部分，方便理解：</p><ol><li><strong>预解析</strong>这个过程，会把 关键字 <code>var</code> 、 <code>function</code> 、 <strong>参数</strong> 提取出来</li></ol><p>上面这段代码 <strong>预解析</strong> 的过程是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第1行，没有关键字 ， 不解析</span></span><br><span class="line"><span class="comment">// 第2行，遇到 function 关键字，解析到全局的头部</span></span><br><span class="line">a = <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123; alter(<span class="number">2</span>); &#125;</span><br><span class="line"><span class="comment">// 第3行，没有关键字 ， 不解析</span></span><br><span class="line"><span class="comment">// 第4行，遇到关键字 var ， 解析到全局的头部</span></span><br><span class="line">a = <span class="literal">undefined</span></span><br><span class="line"><span class="comment">// 第5行，没有关键字 ， 不解析</span></span><br><span class="line"><span class="comment">// 第6行，遇到关键字 var ， 解析到全局的头部</span></span><br><span class="line">a = <span class="literal">undefined</span></span><br><span class="line"><span class="comment">// 第8行，遇到 function 关键字，解析到全局的头部</span></span><br><span class="line">a = <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123; alter(<span class="number">4</span>); &#125;</span><br><span class="line"><span class="comment">// 第9行，没有关键字 ， 不解析</span></span><br><span class="line"><span class="comment">// 第10行，a() 函数调用</span></span><br></pre></td></tr></table></figure><p>此时这里有4个同名变量 a ，依循规则是：<code>function</code> 优先与 <code>var</code>, 同名的后面覆盖前面的因此，<code>a = function a(){ alter(2); }</code> 替换掉下面的2个 <del><code>a = undefined</code></del> ，<code>a = function a(){ alter(4); }</code> 又替换掉 <del><code>a = function a(){ alter(2); }</code></del> ,最终只剩下 <code>a = function a(){ alter(4); }</code></p><p><strong>预解析（预编译）</strong> 后的代码样子是这样的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123; alter(<span class="number">4</span>); &#125;</span><br><span class="line">alert(a);</span><br><span class="line">alert(a);</span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">alert(a);</span><br><span class="line">a = <span class="number">3</span>;</span><br><span class="line">alert(a);</span><br><span class="line">alert(a);</span><br><span class="line">a();</span><br></pre></td></tr></table></figure><ol><li>执行代码，就是执行的这段代码，依次从上到下执行，最后的 <code>a()</code> 函数调用，这时的 <code>a</code> 已被 <strong>表达式</strong> 赋值成 <strong>3</strong> ，而报错 <code>a is not a function</code></li></ol><hr><h3 id="全局作用域和局部作用域"><a href="#全局作用域和局部作用域" class="headerlink" title="全局作用域和局部作用域"></a>全局作用域和局部作用域</h3><p>再看这段代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(a);</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">fn1();</span><br><span class="line">alert(a);</span><br></pre></td></tr></table></figure><p>这里先揭晓答案：<div class="note success"><ul><li>第一个 <code>alert(a)</code> 弹出 <code>undefined</code></li><li>第二个 <code>alert(a)</code> 弹出 <strong>1</strong></li></ul></div></p><p><code>JavaScript</code> 的作用域只用两种，一个是全局的，一个是函数的，也称为 <strong>全局作用域</strong> 和 <strong>局部作用域</strong> ；<strong>局部作用域</strong> 可以访问 <strong>全局作用域</strong> 。但是 <strong>全局作用域</strong> 不能访问 <strong>局部作用域</strong> </p><p>同样用 <strong>预解析（预编译）</strong> 的方法来分析这段代码</p><ol><li><strong>预解析（预编译）</strong> 全局作用域</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第1行，遇到 var 关键字，解析到全局的头部</span></span><br><span class="line">a = <span class="literal">undefined</span></span><br><span class="line"><span class="comment">// 第2行，遇到 function 关键字，解析到全局的头部</span></span><br><span class="line">fn1 = <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(a);</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第3行，没有遇到关键字，不解析</span></span><br><span class="line"><span class="comment">// 第4行，没有遇到关键字，不解析</span></span><br></pre></td></tr></table></figure><ol><li>开始执行代码</li></ol><p>第1行，遇到表达式 <code>a = 1</code>, <strong>a</strong> 被赋值成 <strong>1</strong> <br>第6行，遇到函数调用 <code>fn1()</code> ,开始 <strong>预解析（预编译）</strong> 局部</p><ol><li><strong>预解析（预编译）</strong> 局部作用域</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第3行，没有遇到关键字，不解析</span></span><br><span class="line"><span class="comment">// 第4行，遇到 var 关键字，解析到局部</span></span><br><span class="line">a = <span class="literal">undefined</span></span><br></pre></td></tr></table></figure><ol><li>开始执行 <strong>局部</strong> 代码</li></ol><p>第3行，弹出 <code>undefined</code> 第4行，遇到表达式，把局部 <strong>a</strong> 改成 <strong>2</strong></p><ol><li>局部执行完成，继续执行全局</li></ol><p>第7行，弹出 <strong>1</strong> ，因为全局和局部是两个独立的作用域</p><hr><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>如果，把上面👆代码，稍作修改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(a);</span><br><span class="line">    a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">fn1();</span><br><span class="line">alert(a);</span><br></pre></td></tr></table></figure><p>去掉了 <code>function</code> 里的 <code>var</code> ，结果就会不一样这次，输出的是：</p><ul><li>第一个 <code>alert</code> 弹出 <strong>1</strong></li><li>第二个 <code>alert</code> 弹出 <strong>2</strong>因为在解析局部是没有发现 <code>var a</code> ，如是在执行时，就会去全局查找，找到了全局的 <code>a = 1</code> ，所以 第一个 <code>alert</code> 弹出 <strong>1</strong> ，而不是 <code>undefined</code> ,这个就是 <strong>作用域连</strong></li></ul><hr><h3 id="表达式、语句-和-IIFE"><a href="#表达式、语句-和-IIFE" class="headerlink" title="表达式、语句 和 IIFE"></a>表达式、语句 和 IIFE</h3><p>在看下以下 👇 的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    b = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">  &#125;</span><br><span class="line">)();</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    b = <span class="number">30</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先揭晓答案：<div class="note success"><ul><li>第1个 <code>console.log(b)</code> 输出的是 <strong>10</strong></li><li>第2个 <code>console.log(b)</code> 输出函数体 <code>b() {console.log(b); b = 20; console.log(b);}</code></li><li>第3个 <code>console.log(b)</code> 输出函数体 <code>b() {console.log(b); b = 20; console.log(b);}</code></li><li>第4个 <code>console.log(b)</code> 输出的是 <strong>10</strong></li><li>第5个 没有任何输出</li></ul></div></p><p>在分析这段代码之前，我们需要掌握一点知识，什么是 <strong>语句</strong> ，什么是 <strong>表达式</strong> 以及 <strong>IIFE</strong></p><h4 id="表达式、语句"><a href="#表达式、语句" class="headerlink" title="表达式、语句"></a>表达式、语句</h4><p><code>JavaScript</code> 程序的执行单位为行 <code>（line）</code> ，也就是一行一行地执行。一般情况下，每一行就是一个语句。</p><p>语句 <code>（statement）</code> 是为了完成某种任务而进行的操作，比如下面就是一行赋值语句。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span> + <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p><code>1 + 3</code> 叫做表达式 <code>（expression）</code> ，指一个为了得到返回值的计算式。语句和表达式的区别在于，前者主要为了进行某种操作，一般情况下不需要返回值；后者则是为了得到返回值，一定会返回一个值。凡是 JavaScript 语言中预期为值的地方，都可以使用表达式。比如，赋值语句的等号右边，预期是一个值，因此可以放置各种表达式。</p><h4 id="立即执行函数-–-IIFE-（Immediately-Invoked-Function-Expression）"><a href="#立即执行函数-–-IIFE-（Immediately-Invoked-Function-Expression）" class="headerlink" title="立即执行函数 – IIFE （Immediately-Invoked Function Expression）"></a>立即执行函数 – IIFE <em>（Immediately-Invoked Function Expression）</em></h4><p>在 <code>Javascript</code> 中，圆括号 <code>()</code> 是一种运算符，跟在 <strong>函数名</strong> 之后，表示调用该函数。例如： <code>a()</code></p><p>有时，我们需要在定义函数之后，立即调用该函数。这时，你不能在函数的定义之后加上圆括号，这会产生语法错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/* code */</span> &#125;();</span><br><span class="line"><span class="comment">// SyntaxError: Unexpected token (</span></span><br></pre></td></tr></table></figure><p>产生这个错误的原因是，<code>function</code> 这个关键字即可以当作语句，也可以当作表达式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语句</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表达式</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>为了避免解析上的歧义，<code>JavaScript</code> 引擎规定，如果 <code>function</code> 关键字出现在行首，一律解释成语句。因此，<code>JavaScript</code> 引擎看到行首是 <code>function</code> 关键字之后，认为这一段都是函数的定义，不应该以圆括号结尾，所以就报错了。</p><p>解决方法就是不要让 <code>function</code> 出现在行首，让引擎将其理解成一个表达式。最简单的处理，就是将其放在一个圆括号里面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/* code */</span> &#125;());</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/* code */</span> &#125;)();</span><br></pre></td></tr></table></figure><p>上面两种写法都是以圆括号开头，引擎就会认为后面跟的是一个表示式，而不是函数定义语句，所以就避免了错误。这就叫做“立即调用的函数表达式” <em>（Immediately-Invoked Function Expression）</em> ，简称 <strong>IIFE</strong>。</p><p>了解这些知识之后，再来分析上面 👆 提到的这段代码</p><p>先拆开来分析下代码，把这段单独拿出来，看看 👀</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    b = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">  &#125;</span><br><span class="line">)();</span><br></pre></td></tr></table></figure><p>其实这段是可以单独运行的，结果是</p><div class="note success"><ul><li>第1个 <code>console.log(b)</code> 输出函数体 <code>b() {console.log(b); b = 20; console.log(b);}</code></li><li>第2个 <code>console.log(b)</code> 输出函数体 <code>b() {console.log(b); b = 20; console.log(b);}</code></li></ul></div><p>再来分析下原因，很明显这个就是一个 <strong>IIFE</strong> , 由一个 <strong>函数表达式</strong> 和 圆括号 <code>()</code> 运算符组成，上面 👆 这段代码和下面 👇 是等价的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    b = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><p>再来分析，就比较容易理解了</p><ul><li><strong>首先开始解析</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b = <span class="literal">undefined</span>; <span class="comment">//第一行 遇到 var 关键字，变量提升</span></span><br></pre></td></tr></table></figure><p>解析完之后的样子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b;</span><br><span class="line">b = <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    b = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;;</span><br><span class="line">b();</span><br></pre></td></tr></table></figure><ul><li><strong>执行代码</strong></li></ul><p>第2行，遇到 <strong>表达式语句</strong> 将 <code>b(){console.log(b); b = 20; console.log(b);}</code> 赋值给 <code>b</code><br>第7行，调用函数，开始局部解析</p><p>局部解析没有发现关键字 <code>var</code> 和 <code>function</code> ，没有任何动作</p><p>继续执行 <strong>局部</strong> 代码</p><p>第3行， <code>console.log(b)</code> 输出外部的 <code>b = b(){console.log(b); b = 20; console.log(b);}</code> <br>第4行， 由第3行可知，此时， <code>b</code> 是个内部函数体，而不是外部变量 <code>b</code> ，解析器只会把 <code>b = 20;</code> 当成普通 <strong>表达式</strong> ，而不是 <strong>表达式语句</strong> ，不会进行赋值操作 <br>第5行， <code>b</code> 的值没有任何改变，依然输出函数体 <code>b = b(){console.log(b); b = 20; console.log(b);}</code> <br></p><p>最终，回到最开始代码本身</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    b = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">  &#125;</span><br><span class="line">)();</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    b = <span class="number">30</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>预解析：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">b = <span class="literal">undefined</span>; <span class="comment">//变量提升</span></span><br><span class="line">b = <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123; <span class="comment">//函数提升</span></span><br><span class="line">    b = <span class="number">30</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遵循，函数 <code>一等公民</code> 原则，函数优先级高于变量， <del><code>b = undefined;</code></del> 被干掉</p><p>预解析之后，应该是这个样子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    b = <span class="number">30</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;</span><br><span class="line">b = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    b = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br></pre></td></tr></table></figure><p>再来看下答案，就很清楚了</p><div class="note success"><ul><li>第1个 <code>console.log(b)</code> 输出的是 <strong>10</strong></li><li>第2个 <code>console.log(b)</code> 输出函数体 <code>b() {console.log(b); b = 20; console.log(b);}</code></li><li>第3个 <code>console.log(b)</code> 输出函数体 <code>b() {console.log(b); b = 20; console.log(b);}</code></li><li>第4个 <code>console.log(b)</code> 输出的是 <strong>10</strong></li><li>第5个 没有任何输出，由于函数提升，最终 被 <code>b = 10</code> 覆盖</li></ul></div><p>这里，可以把上面 👆 代码稍作改动，结果会不一样，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">20</span>;  <span class="comment">// ++++ 加了 var</span></span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">  &#125;</span><br><span class="line">)();</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    b = <span class="number">30</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就不揭晓答案了，感兴趣的，可自行思考 🤔 ，看看 👀 最终答案如何。。。</p><hr><h3 id="匿名函数表达式、具名函数表达式"><a href="#匿名函数表达式、具名函数表达式" class="headerlink" title="匿名函数表达式、具名函数表达式"></a>匿名函数表达式、具名函数表达式</h3><p>在来看看这段代码👇</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    foo();</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    foo();</span><br><span class="line">    <span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    foo();</span><br><span class="line">    <span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a &gt; <span class="number">3</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(++a);</span><br><span class="line">        foo();</span><br><span class="line">    &#125;;</span><br><span class="line">    foo();</span><br><span class="line">    bar();</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><p>先揭晓答案：<div class="note success"><ul><li>第1个 <code>foo()</code> 输出的是 <strong>1</strong></li><li>第2个 <code>foo()</code> 输出的是 <strong>1</strong></li><li>第3个 <code>foo()</code> 输出的是 <strong>2</strong></li><li>第4个 <code>foo()</code> 输出的是 <strong>2</strong></li><li>最后的 <code>bar()</code> 输出的是 <strong>4</strong></li></ul></div></p><p>以上代码包含了 <strong>函数声明</strong> 、 <strong>匿名函数表达式</strong> 、 <strong>具名函数表达式</strong> ，<strong>匿名函数表达式</strong> 、 <strong>具名函数表达式</strong> 是把函数体赋值给一个变量，因此拥有和变量相同的特性 <strong>变量提升</strong> ，而 <strong>具名函数表达式</strong> 的函数名只能在函数内部使用。</p><p>了解了这些，再来分析段代码</p><ul><li><strong>全局预解析</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="literal">undefined</span></span><br><span class="line">fn = <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>执行代码</strong>第1行，遇到表达式,把 <strong>a</strong> 的值改变成3 <br>最后行，遇到函数调用，重新 <strong>预解析</strong> 局部</p></li><li><p><strong>局部预解析</strong></p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第4行，遇到 function 关键字，解析到局部的头部</span></span><br><span class="line">foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第8行，遇到 var 关键字，解析到局部的头部</span></span><br><span class="line">foo = <span class="literal">undefined</span></span><br><span class="line"><span class="comment">// 第12行，遇到 var 关键字，解析到局部的头部</span></span><br><span class="line">bar = <span class="literal">undefined</span></span><br></pre></td></tr></table></figure><p>由于有两个同名变量 <code>foo</code> ，遵循 <code>function</code> 优先 <code>var</code> 因此， <del><code>foo = undefined</code></del> 被干掉</p><p><strong>局部预解析</strong> 完之后的代码应该是这个样子👇</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> bar;</span><br><span class="line">    foo();</span><br><span class="line">    foo();</span><br><span class="line">    foo = <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    foo();</span><br><span class="line">    bar = <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a &gt; <span class="number">3</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(++a);</span><br><span class="line">        foo();</span><br><span class="line">    &#125;;</span><br><span class="line">    foo();</span><br><span class="line">    bar();</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><ul><li><strong>执行局部代码</strong> <br>第1个 <code>foo()</code> 输出的是 <strong>1</strong> <br>第2个 <code>foo()</code> 输出的是 <strong>1</strong> <br>第3个 <code>foo()</code> 输出的是 <strong>2</strong> <br>第4个 <code>foo()</code> 输出的是 <strong>2</strong> ，注意这个 <code>foo()</code> 输出的是上面 <code>foo = function foo() {console.log(2);}</code> 的内容，因为 <strong>具名函数表达式</strong> 的函数名只能在函数内部使用，在外部无法访问。<br>最后的 <code>bar()</code> 输出的是 <strong>4</strong> ，这里才是输出 <code>function foo() {if(a &gt; 3) return;console.log(++a);foo();}</code> 里的内容，而且，这个函数体内也有自身的调用，结果 <code>a</code> 变量 <strong>+1</strong> ，说明可以调用，其实，可以用 <code>bar.name</code> 输出的就是 <code>foo</code></li></ul><p><strong>所以，注意：</strong></p><div class="note danger"><ul><li><code>bar = function foo()</code> , 不要用这种写法 ，优雅的写法是 <strong>变量名</strong> 和 <strong>函数名</strong> 保持一致 <code>foo = function foo()</code></li><li>不推荐使用 <strong>匿名函数表达式</strong> ，有以下 👇 几个缺点<ul><li>在追踪栈中没函数名，调试困难</li><li>如果需要引用自身，只能用非标准的 <code>arguments.callee</code>（ES5严格模式禁用）</li></ul></li></ul></div>]]></content:encoded>
      
      <comments>https://www.h.lishaoy.net/javascriptScope.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>初 ☘ 夏 ☀️</title>
      <link>https://www.h.lishaoy.net/summer.html</link>
      <guid>https://www.h.lishaoy.net/summer.html</guid>
      <pubDate>Fri, 30 Mar 2018 18:13:59 GMT</pubDate>
      <description>
      
        &lt;span itemprop=&quot;image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;https://cdn.lishaoy.net/summer/summer01.png&quot; class=&quot;full-image&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;strong&gt;七月的风懒懒的 连云都变热热的 夏天的风正暖暖吹过 穿过头发穿过耳朵……&lt;/strong&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;table class=&quot;per-table&quot;&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;strong&gt;摄影/后期：&lt;/strong&gt;&lt;/td&gt;
        &lt;td&gt;子木&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;strong&gt;模特：&lt;/strong&gt;&lt;/td&gt;
        &lt;td&gt;Danny&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;strong&gt;地点：&lt;/strong&gt;&lt;/td&gt;
        &lt;td&gt;花卉世界&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;strong&gt;拍摄于：&lt;/strong&gt;&lt;/td&gt;
        &lt;td&gt;2015年7月12&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
      
      </description>
      
      <content:encoded><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="https://cdn.lishaoy.net/summer/summer01.png" class="full-image"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><div class="text-center"><strong>七月的风懒懒的 连云都变热热的 夏天的风正暖暖吹过 穿过头发穿过耳朵……</strong></div><hr><table class="per-table">    <tr>        <td><strong>摄影/后期：</strong></td>        <td>子木</td>    </tr>    <tr>        <td><strong>模特：</strong></td>        <td>Danny</td>    </tr>    <tr>        <td><strong>地点：</strong></td>        <td>花卉世界</td>    </tr>    <tr>        <td><strong>拍摄于：</strong></td>        <td>2015年7月12</td>    </tr></table><a id="more"></a><p><br></p><p><img src="https://cdn.lishaoy.net/summer/summer02.png" alt="hexo" width="100%" align="center"></p><p><img src="https://cdn.lishaoy.net/summer/summer04.png" alt="hexo" width="100%" align="center"></p><p><img src="https://cdn.lishaoy.net/summer/summer01.png" alt="hexo" width="100%" align="center"></p><p><img src="https://cdn.lishaoy.net/summer/summer08.png" alt="hexo" width="100%" align="center"></p><p><img src="https://cdn.lishaoy.net/summer/summer05.png" alt="hexo" width="100%" align="center"></p><p><img src="https://cdn.lishaoy.net/summer/summer09.png" alt="hexo" width="100%" align="center"></p><p><img src="https://cdn.lishaoy.net/summer/summer06.png" alt="hexo" width="100%" align="center"></p><p><img src="https://cdn.lishaoy.net/summer/summer07.png" alt="hexo" width="100%" align="center"></p><p><img src="https://cdn.lishaoy.net/summer/summer03.png" alt="hexo" width="100%" align="center"></p>]]></content:encoded>
      
      <comments>https://www.h.lishaoy.net/summer.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>girlfriends</title>
      <link>https://www.h.lishaoy.net/shenzhenUuniversity.html</link>
      <guid>https://www.h.lishaoy.net/shenzhenUuniversity.html</guid>
      <pubDate>Thu, 29 Mar 2018 17:11:45 GMT</pubDate>
      <description>
      
        &lt;span itemprop=&quot;image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;https://cdn.lishaoy.net/shenzhenUuniversity/girlfriends02.png&quot; class=&quot;full-image&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;strong&gt;悲伤一起哭，欢乐一起笑，好书一起读，好歌一起听……&lt;/strong&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;table class=&quot;per-table&quot;&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;strong&gt;摄影/后期：&lt;/strong&gt;&lt;/td&gt;
        &lt;td&gt;子木&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;strong&gt;模特：&lt;/strong&gt;&lt;/td&gt;
        &lt;td&gt;Donna and cherry&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;strong&gt;地点：&lt;/strong&gt;&lt;/td&gt;
        &lt;td&gt;深圳大学天台&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;strong&gt;拍摄于：&lt;/strong&gt;&lt;/td&gt;
        &lt;td&gt;2015年8月23&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
      
      </description>
      
      <content:encoded><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="https://cdn.lishaoy.net/shenzhenUuniversity/girlfriends02.png" class="full-image"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><div class="text-center"><strong>悲伤一起哭，欢乐一起笑，好书一起读，好歌一起听……</strong></div><hr><table class="per-table">    <tr>        <td><strong>摄影/后期：</strong></td>        <td>子木</td>    </tr>    <tr>        <td><strong>模特：</strong></td>        <td>Donna and cherry</td>    </tr>    <tr>        <td><strong>地点：</strong></td>        <td>深圳大学天台</td>    </tr>    <tr>        <td><strong>拍摄于：</strong></td>        <td>2015年8月23</td>    </tr></table><a id="more"></a><p><br></p><p><img src="https://cdn.lishaoy.net/shenzhenUuniversity/girlfriends01.png" alt="hexo" width="100%" align="center"></p><p><img src="https://cdn.lishaoy.net/shenzhenUuniversity/girlfriends02.png" alt="hexo" width="100%" align="center"></p><p><img src="https://cdn.lishaoy.net/shenzhenUuniversity/girlfriends03.png" alt="hexo" width="100%" align="center"></p><p><img src="https://cdn.lishaoy.net/shenzhenUuniversity/girlfriends04.png" alt="hexo" width="100%" align="center"></p><p><img src="https://cdn.lishaoy.net/shenzhenUuniversity/girlfriends05.png" alt="hexo" width="100%" align="center"></p><p><img src="https://cdn.lishaoy.net/shenzhenUuniversity/girlfriends06.png" alt="hexo" width="100%" align="center"></p>]]></content:encoded>
      
      <comments>https://www.h.lishaoy.net/shenzhenUuniversity.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>猫吧</title>
      <link>https://www.h.lishaoy.net/catBar20150927.html</link>
      <guid>https://www.h.lishaoy.net/catBar20150927.html</guid>
      <pubDate>Wed, 28 Mar 2018 10:20:47 GMT</pubDate>
      <description>
      
        &lt;span itemprop=&quot;image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;https://cdn.lishaoy.net/catBar20150927/catBar04.png&quot; class=&quot;full-image&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;strong&gt;很久之前拍的照片,猫吧里貌似有5只大肥猫 🐱 …&lt;/strong&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;table class=&quot;per-table&quot;&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;strong&gt;摄影/后期：&lt;/strong&gt;&lt;/td&gt;
        &lt;td&gt;子木&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;strong&gt;模特：&lt;/strong&gt;&lt;/td&gt;
        &lt;td&gt;👩‍⚖️‍ &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;strong&gt;地点：&lt;/strong&gt;&lt;/td&gt;
        &lt;td&gt;深圳福田 🐱 &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;strong&gt;拍摄于：&lt;/strong&gt;&lt;/td&gt;
        &lt;td&gt;2015年9月27&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
      
      </description>
      
      <content:encoded><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="https://cdn.lishaoy.net/catBar20150927/catBar04.png" class="full-image"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><div class="text-center"><strong>很久之前拍的照片,猫吧里貌似有5只大肥猫 🐱 …</strong></div><hr><table class="per-table">    <tr>        <td><strong>摄影/后期：</strong></td>        <td>子木</td>    </tr>    <tr>        <td><strong>模特：</strong></td>        <td>👩‍⚖️‍ </td>    </tr>    <tr>        <td><strong>地点：</strong></td>        <td>深圳福田 🐱 </td>    </tr>    <tr>        <td><strong>拍摄于：</strong></td>        <td>2015年9月27</td>    </tr></table><a id="more"></a><p><br></p><p><img src="https://cdn.lishaoy.net/catBar20150927/catBar01.png" alt="hexo" width="100%" align="center"></p><p><img src="https://cdn.lishaoy.net/catBar20150927/catBar02.png" alt="hexo" width="100%" align="center"></p><p><img src="https://cdn.lishaoy.net/catBar20150927/catBar03.png" alt="hexo" width="100%" align="center"></p><p><img src="https://cdn.lishaoy.net/catBar20150927/catBar04.png" alt="hexo" width="100%" align="center"></p><p><img src="https://cdn.lishaoy.net/catBar20150927/catBar05.png" alt="hexo" width="100%" align="center"></p><p><img src="https://cdn.lishaoy.net/catBar20150927/catBar06.png" alt="hexo" width="100%" align="center"></p><p><img src="https://cdn.lishaoy.net/catBar20150927/catBar07.png" alt="hexo" width="100%" align="center"></p><p><img src="https://cdn.lishaoy.net/catBar20150927/catBar09.png" alt="hexo" width="100%" align="center"></p><p><img src="https://cdn.lishaoy.net/catBar20150927/catBar10.png" alt="hexo" width="100%" align="center"></p><p><img src="https://cdn.lishaoy.net/catBar20150927/catBar11.png" alt="hexo" width="100%" align="center"></p><p><img src="https://cdn.lishaoy.net/catBar20150927/catBar08.png" alt="hexo" width="100%" align="center"></p><p><img src="https://cdn.lishaoy.net/catBar20150927/catBar12.png" alt="hexo" width="100%" align="center"></p>]]></content:encoded>
      
      <comments>https://www.h.lishaoy.net/catBar20150927.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>如何用 CSS + HTML + JS 创建桌面应用</title>
      <link>https://www.h.lishaoy.net/nwjsElectronjs.html</link>
      <guid>https://www.h.lishaoy.net/nwjsElectronjs.html</guid>
      <pubDate>Tue, 27 Mar 2018 17:42:26 GMT</pubDate>
      <description>
      
        &lt;p&gt;最近研究了一下基于 &lt;code&gt;Chromium&lt;/code&gt; 定制浏览器的方案，查阅了大量资料，具体方案也有了大概的蓝图 😉 &lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>最近研究了一下基于 <code>Chromium</code> 定制浏览器的方案，查阅了大量资料，具体方案也有了大概的蓝图 😉 </p><hr><a id="more"></a><p>在阐述方案之前，先要了解几个名词：</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><h4 id="Chromium"><a href="#Chromium" class="headerlink" title="Chromium"></a>Chromium</h4><blockquote><p>Chromium是一个由Google主导开发的网页浏览器，以BSD许可证等多重自由版权发行并开放源代码。Chromium的开发可能早自2006年即开始。</p></blockquote><blockquote><p>Chromium是Google为发展自家的浏览器Google Chrome而打开的项目，所以Chromium相当于Google Chrome的工程版或实验版（尽管Google Chrome本身也有β版），新功能会率先在Chromium上开放，待验证后才会应用在Google Chrome上，故Google Chrome的功能会相对落后但较稳定。 —— <a href="https://zh.wikipedia.org/wiki/Chromium#cite_note-3" target="_blank" rel="noopener">维基百科</a></p></blockquote><h4 id="CEF"><a href="#CEF" class="headerlink" title="CEF"></a>CEF</h4><blockquote><p>Chromium Embedded Framework (CEF)是个基于Google Chromium项目的开源Web browser控件，支持Windows, Linux, Mac平台。除了提供C/C++接口外，也有其他语言的移植版。</p></blockquote><blockquote><p>因为基于Chromium，所以CEF支持Webkit &amp; Chrome中实现的HTML5的特性，并且在性能上面，也比较接近Chrome。CEF还提供的如下特性：自定义插件、自定义协议、自定义JavaScript对象和扩展；可控制的resource loading, navigation, context menus等等  —— <a href="https://baike.baidu.com/item/CEF/20837917?fr=aladdin" target="_blank" rel="noopener">百度百科</a></p></blockquote><h4 id="NW"><a href="#NW" class="headerlink" title="NW"></a>NW</h4><blockquote><p>NW.js 是基于 Chromium 和 Node.js 运行的， 以前也叫nodeWebkit。这就给了你使用HTML和JavaScript来制作桌面应用的可能。在应用里你可以直接调用Node.js的各种api以及现有的第三方包。因为Chromium和 Node.js 的跨平台，那么你的应用也是可以跨平台的。—— <a href="https://segmentfault.com/a/1190000003870613" target="_blank" rel="noopener">SegmentFault</a></p></blockquote><h4 id="Electron"><a href="#Electron" class="headerlink" title="Electron"></a>Electron</h4><blockquote><p>Electron（最初名为Atom Shell）是GitHub开发的一个开源框架。它允许使用Node.js（作为后端）和Chromium（作为前端）完成桌面GUI应用程序的开发。Electron现已被多个开源Web应用程序用于前端与后端的开发，著名项目包括GitHub的Atom和微软的Visual Studio Code。—— <a href="https://zh.wikipedia.org/wiki/Electron_%28%E8%BD%AF%E4%BB%B6%E6%A1%86%E6%9E%B6%29" target="_blank" rel="noopener">维基百科</a></p></blockquote><p>所以 ，<strong>CEF</strong>、<strong>nw</strong>、<strong>Electron</strong> 都是基于 <code>Chromium</code> 的开源框架，可以实现所需的定制浏览器需求，准确的讲应该是用 <code>HTML5</code> 、 <code>CSS3</code> 、 <code>JavaScript</code> 来制作拥有漂亮界面的<strong>桌面应用</strong>。</p><p>就是一个本地客户端应用程序使用一个内置的浏览器内核渲染前端界面，另一方面还可以调用本地系统级API，实现本地应用程序的各种功能。</p><hr><h3 id="市场调研"><a href="#市场调研" class="headerlink" title="市场调研"></a>市场调研</h3><p>通过查阅大量资料得知，以各企业的线上产品及使用的技术供参考。</p><h4 id="CEF-案例"><a href="#CEF-案例" class="headerlink" title="CEF 案例"></a>CEF 案例</h4><p>据 <strong>CEF</strong> 官方介绍，以下（如图）桌面应用在使用 <code>CEF</code>。</p><p><img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/CEF.png?raw=true" alt="CEF" width="85%" title="who is using CEF" align="center"></p><p>国内桌面应用有：<a href="http://note.youdao.com" target="_blank" rel="noopener">有道云笔记</a> <i style="color:#aaa">（网易）</i>、<a href="https://www.dingtalk.com/?source=2202&amp;lwfrom=2017120202092064209309201" target="_blank" rel="noopener">钉钉</a><i style="color:#aaa">（阿里巴巴）</i>、<a href="https://im.qq.com/pcqq/" target="_blank" rel="noopener">QQ</a><i style="color:#aaa">（腾讯）</i> 等，查看安装后目录及文件，可以看出 <strong>有道云笔记</strong>、<strong>钉钉</strong> 是使用的是<code>CEF</code>，而 <strong>钉钉</strong> 界面是使用 <code>AngularJs</code>，据了解后端应该用了<code>C++</code>和<code>Python</code>。</p><p><strong>QQ</strong> 很早之前就通过内嵌 <strong>IE</strong> 来实现一些功能和界面。从2013年开始，<strong>QQ</strong> 引入了 <code>CEF</code>，对一些之前用 <strong>IE</strong> 的地方进行了替换。</p><p><img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520329975606.png?raw=true" alt="no-shadow" title="钉钉Mac版目录"></p><p><img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520330256871.png?raw=true" alt="no-shadow" title="钉钉Mac版应用界面"></p><h4 id="NW-案例"><a href="#NW-案例" class="headerlink" title="NW 案例"></a>NW 案例</h4><p>这个是 <strong><a href="https://nwjs.io" target="_blank" rel="noopener">NW</a></strong> 官方给出的使用 <code>nw.js</code> 的应用列表：<a href="https://github.com/nwjs/nw.js/wiki/List-of-apps-and-companies-using-nw.js" target="_blank" rel="noopener">https://github.com/nwjs/nw.js/wiki/List-of-apps-and-companies-using-nw.js</a> </p><p>而国内的有，比如微信开发工具等，是基于 <code>nw.js</code> 开发的。</p><p><img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520571438918.png?raw=true" alt="no-shadow" title="微信开发工具Mac版目录"></p><p><img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520571517344.png?raw=true" alt="no-shadow" title="微信开发工具Mac版"></p><h4 id="Electron-案例"><a href="#Electron-案例" class="headerlink" title="Electron 案例"></a>Electron 案例</h4><p>这个是 <strong><a href="https://electronjs.org" target="_blank" rel="noopener">Electron</a></strong> 官方给出的是用 <code>electron</code> 的应用列表：<a href="https://electronjs.org/apps" target="_blank" rel="noopener">https://electronjs.org/apps</a></p><p>如图，<strong>Electron</strong> 已被像 <strong>微软</strong>、 <strong>Facebook</strong>、 <strong>Slack</strong> 和 <strong>Docker</strong> 这样的公司用于创建应用程序。</p><p><img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520668439676.png?raw=true" alt="electron" width="85%" title="electron 应用" align="center"></p><p>我所用的编辑器 <strong>Visual Studio Code</strong> 就是基于 <code>electron</code> 开发的</p><p><img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520669844227.png?raw=true" alt="no-shadow" title="VS Code Mac版"></p><hr><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>下面会分别用 <code>nw.js</code> 和 <code>electron</code> 做一个简单的 <strong>Dome</strong>。</p><p>由于 <strong>CEF</strong> 文档资料少且原生是 <code>C\C++</code> ，虽然官方给出了 <code>java</code> 版的 <strong>JCEF</strong> ，开发起来效率较低，故此不知演示。</p><p>这个是 <strong><a href="https://bitbucket.org/chromiumembedded/cef" target="_blank" rel="noopener">CEF</a></strong> 官网，在 <em>External Projects</em> 章节列出支持语言：</p><blockquote><ul><li>Net (CEF3) - <a href="https://github.com/cefsharp/CefSharp" target="_blank" rel="noopener">https://github.com/cefsharp/CefSharp</a></li><li>Net (CEF1) - <a href="https://bitbucket.org/fddima/cefglue" target="_blank" rel="noopener">https://bitbucket.org/fddima/cefglue</a></li><li>Net/Mono (CEF3) - <a href="https://bitbucket.org/xilium/xilium.cefglue" target="_blank" rel="noopener">https://bitbucket.org/xilium/xilium.cefglue</a></li><li>Net (CEF3) - <a href="https://bitbucket.org/chromiumfx/chromiumfx" target="_blank" rel="noopener">https://bitbucket.org/chromiumfx/chromiumfx</a></li><li>Delphi (CEF1) - <a href="http://code.google.com/p/delphichromiumembedded/" target="_blank" rel="noopener">http://code.google.com/p/delphichromiumembedded/</a></li><li>Delphi (CEF3) - <a href="https://github.com/hgourvest/dcef3" target="_blank" rel="noopener">https://github.com/hgourvest/dcef3</a></li><li>Delphi (CEF3) - <a href="https://github.com/salvadordf/CEF4Delphi" target="_blank" rel="noopener">https://github.com/salvadordf/CEF4Delphi</a></li><li>Go - <a href="https://github.com/CzarekTomczak/cef2go" target="_blank" rel="noopener">https://github.com/CzarekTomczak/cef2go</a></li><li>Java - <a href="https://bitbucket.org/chromiumembedded/java-cef" target="_blank" rel="noopener">https://bitbucket.org/chromiumembedded/java-cef</a></li><li>Java - <a href="http://code.google.com/p/javacef/" target="_blank" rel="noopener">http://code.google.com/p/javacef/</a></li><li>Python - <a href="http://code.google.com/p/cefpython/" target="_blank" rel="noopener">http://code.google.com/p/cefpython/</a></li></ul></blockquote><h4 id="NW-gt-Hello-world"><a href="#NW-gt-Hello-world" class="headerlink" title="NW =&gt; Hello, world!"></a>NW =&gt; Hello, world!</h4><p>从一个简单的例子来让我们看看如何编写一个 <strong>NW</strong> 应用。</p><ul><li><strong>第一步</strong> 创建 <code>package.json</code> 配置文件</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"helloworld"</span>,</span><br><span class="line">    <span class="string">"main"</span>: <span class="string">"index.html"</span>,</span><br><span class="line">    <span class="string">"icon"</span>: <span class="string">"img/app.png"</span>,</span><br><span class="line">    <span class="string">"window"</span>: &#123;</span><br><span class="line">        <span class="string">"icon"</span>: <span class="string">"img/app.png"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>main</code> 配置应用打开首页，<code>name</code> 配置应用的名称。</p><ul><li><strong>第二步</strong> 创建 <code>index.html</code> </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Holle NW<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    html,</span></span><br><span class="line"><span class="undefined">    body &#123;</span></span><br><span class="line"><span class="undefined">        height: 100%;</span></span><br><span class="line"><span class="undefined">        margin: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="undefined">        height: 100%;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">display</span>: <span class="selector-tag">flex</span>; <span class="comment">/* css3 弹性盒子 */</span></span></span><br><span class="line"><span class="undefined">        justify-content: center;</span></span><br><span class="line"><span class="undefined">        align-items: center;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Holle NW!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是一个简单的 <strong>HTML</strong> 文件，加入了一点CSS，目的是让 <strong>Holle NW!</strong> 水平垂直居中。</p><ul><li><strong>第三步</strong> 打包应用</li></ul><p>这里我只测试了 <strong>Mac</strong> 和 <strong>Windows</strong> 的打包，<strong>Linux</strong> 没有测试。</p><p><strong>Mac打包应用：</strong> 在项目根目录执行以下命令，把所有文件压缩成 <code>app.nw</code> 文件。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip -r app.nw *</span><br></pre></td></tr></table></figure><p>然后把<code>app.nw</code> 文件放到 <code>nwjs.app/Contents/Resources/</code> 目录下即可，效果如图：</p><p><img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520711078780.png?raw=true" alt="no-shadow" title="Mac下运行效果"></p><p><strong>Windows打包应用：</strong>  将应用的所有相关文件打成一个名为<code>package.nw</code> 的压缩包，将<code>package.nw</code> 与<strong>NW</strong>可执行文件放到相同目录即可，效果如图：</p><p><img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520711343860.png?raw=true" alt="no-shadow" title="Windons下运行效果 "></p><hr><h4 id="Electron-gt-Hello-world"><a href="#Electron-gt-Hello-world" class="headerlink" title="Electron =&gt; Hello, world!"></a>Electron =&gt; Hello, world!</h4><p><strong>Electron</strong> 可以让你使用纯 <code>JavaScript</code> 调用丰富的原生(操作系统) <strong>APIs</strong> 来创造桌面应用。</p><p>只需3个文件就可以构建一个简单的应用</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">your-app/</span><br><span class="line">  ├── package.json</span><br><span class="line">  ├── main.js</span><br><span class="line">  └── index.html</span><br></pre></td></tr></table></figure><ul><li><strong>第一步</strong> 创建配置文件</li></ul><p>首先需要安装 <strong>Node</strong> 环境，用 <code>npm</code> 来创建一个应用的配置文件 <code>package.json</code></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p>在 <code>package.json</code> 里新增启动命令 <code>start</code> </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"your-app"</span>,</span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"0.1.0"</span>,</span><br><span class="line">    <span class="string">"main"</span>: <span class="string">"main.js"</span>,</span><br><span class="line">    <span class="string">"scripts"</span>: &#123;</span><br><span class="line">      <span class="string">"start"</span>: <span class="string">"electron ."</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>第二步</strong> 创建入口文件 <code>main.js</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;app, BrowserWindow&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">        width: <span class="number">1008</span>,</span><br><span class="line">        height: <span class="number">759</span></span><br><span class="line">    &#125;)</span><br><span class="line">      </span><br><span class="line">    win.loadURL(url.format(&#123;</span><br><span class="line">        pathname: path.join(__dirname, <span class="string">'index.html'</span>),</span><br><span class="line">        protocol: <span class="string">'file:'</span>,</span><br><span class="line">        slashes: <span class="literal">true</span></span><br><span class="line">    &#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">'ready'</span>, createWindow)</span><br></pre></td></tr></table></figure><p>代码已经很清晰直观，<code>createWindow</code> 创建一个桌面窗口，而大小由 <code>width</code>、<code>height</code> 控制，<code>win.loadURL</code> 用来加载页面。</p><ul><li><strong>第三步</strong> 创建展示文件 <code>index.html</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello Electron<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    html,</span></span><br><span class="line"><span class="undefined">    body &#123;</span></span><br><span class="line"><span class="undefined">        height: 100%;</span></span><br><span class="line"><span class="undefined">        margin: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="undefined">        height: 100%;</span></span><br><span class="line"><span class="undefined">        display: flex;</span></span><br><span class="line"><span class="css">        <span class="comment">/* css3 弹性盒子 */</span></span></span><br><span class="line"><span class="undefined">        justify-content: center;</span></span><br><span class="line"><span class="undefined">        align-items: center;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello Electron!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是一个简单的 <strong>HTML</strong> 文件，加入了一点CSS，目的是让 <strong>Holle NW!</strong> 水平垂直居中。</p><ul><li><strong>第四步</strong> 打包应用</li></ul><p><strong>打包应用：</strong> 打包应用可以是用 <code>electron-packager</code> 工具进行打包，需要在 <code>package.json</code> 配置以下命令</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "start": "electron .",</span><br><span class="line">    "packager": "electron-packager ./ HelloElectron --all --out ./OutApp --version 0.0.1 --overwrite --ignore=node_modules --icon=./app/img/app.ico"</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>然后，运行在终端执行命令 <code>npm run packagerMac</code> 即可打包<code>linux</code>、<code>Mac</code>、<code>windows</code> 三大平台应用包，效果如图：</p><p><img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520791859473.png?raw=true" alt="打包后的应用" width="60%" title="打包后的应用" align="center"></p><p><img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520790145115.png?raw=true" alt="no-shadow" title="Mac下运行效果"></p><p><img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520792416456.png?raw=true" alt="no-shadow" title="Windows下运行效果"></p><hr><h3 id="GitHub关注度和活跃度"><a href="#GitHub关注度和活跃度" class="headerlink" title="GitHub关注度和活跃度"></a>GitHub关注度和活跃度</h3><p>首先我们需要先了解一下 <strong>GitHub</strong> 的以下三个状态的意思，</p><p><img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520857435681.png?raw=true" alt="no-shadow"></p><p><img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520857536175.png?raw=true" alt="no-shadow"> ：表示你以后会关注这个项目的所有动态，这个项目以后只要发生变动，如被别人提交了 <code>pull request</code>、被别人发起了<code>issue</code> 等等情况，你都会在自己的个人通知中心，收到一条通知消息，如果你设置了个人邮箱，那么你的邮箱也可能收到相应的邮件。</p><p><img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520857569746.png?raw=true" alt="no-shadow">：表示你喜欢这个项目或者通俗点，可以把他理解成朋友圈的点赞，表示对这个项目的支持。</p><p><img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520857709924.png?raw=true" alt="no-shadow">：当选择 <code>fork</code>，相当于你自己有了一份原项目的拷贝，当然这个拷贝只是针对当时的项目文件，如果后续原项目文件发生改变，你必须通过其他的方式去同步。<i style="color:#aaa">（一般用于修改<strong>bug</strong>和优化项目或者在此项目上开发新功能等）</i></p><h4 id="CEF-1"><a href="#CEF-1" class="headerlink" title="CEF"></a>CEF</h4><p><strong>CEF</strong> 在 <strong>GitHub</strong> 找不到项目，这个<a href="https://bitbucket.org/chromiumembedded/cef/overview" target="_blank" rel="noopener">官网</a> 提供的数据，如图<i style="color:#aaa">（由于在<strong>GitHub</strong> 没有项目，相关数据无法准确统计）</i>。</p><p><img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520855809138.png?raw=true" alt="CEF关注度" title="CEF关注度"></p><h4 id="NW-1"><a href="#NW-1" class="headerlink" title="NW"></a>NW</h4><p><strong>NW关注度：</strong> <img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520856387728.png?raw=true" alt="Alt text"></p><p><strong>NW活跃度：</strong>如图</p><p><img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520858064076.png?raw=true" alt="2011年~2018年提交量" title="2011年~2018年提交量"></p><h4 id="Electron-1"><a href="#Electron-1" class="headerlink" title="Electron"></a>Electron</h4><p><strong>Electron关注度：</strong> <img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520858325207.png?raw=true" alt="no-shadow"></p><p><strong>活跃度：</strong> 如图</p><p><img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520858451333.png?raw=true" alt="electron2013年~2018年提交量" title="electron2013年~2018年提交量"></p><hr><p>通过以上的 <strong>市场调研</strong>、<strong>实战</strong>、<strong>GitHub关注度和活跃度</strong> 等 <strong>Electron</strong> 都占有优势，如下</p><ul><li>市场案例较多，各大型企业都在使用</li><li>开发实战代码更直观，容易理解和维护，各种文档健全、网络资料较多且质量较高，周边辅助工具齐全，开发效率可大大提高</li><li><strong>GitHub</strong> 关注度和活跃度持续攀升</li></ul><p>所有结合以上情况，之后会用以下技术栈做一个完善的案例</p><ul><li><strong>跨平台桌面应用框架：</strong><code>electron</code>  <i style="color:#aaa">（Chromium + Node.js）</i></li><li><strong>UI库：</strong> <code>iView</code></li><li><strong>js框架：</strong> <code>Vue.js</code></li><li><strong>自动化构建工具：</strong>  <code>webpack</code></li><li><strong>HTML5、CSS3、ES6</strong></li></ul>]]></content:encoded>
      
      <comments>https://www.h.lishaoy.net/nwjsElectronjs.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>用 Hexo Next GitHubPages 搭建漂亮的免费博客</title>
      <link>https://www.h.lishaoy.net/hexoGithubpagesNext.html</link>
      <guid>https://www.h.lishaoy.net/hexoGithubpagesNext.html</guid>
      <pubDate>Sat, 24 Mar 2018 12:32:26 GMT</pubDate>
      <description>
      
        &lt;span itemprop=&quot;image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;https://cdn.lishaoy.net/hexoGithubpagesNext/git_hexo.jpeg&quot; class=&quot;full-image&quot; alt=&quot;GitHubPages + Hexo&quot; title=&quot;GitHubPages + Hexo&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;div class=&quot;text-center&quot;&gt;
    &lt;h3&gt;今天搭建了自己的博客 😝&lt;/h3&gt;
&lt;/div&gt;

&lt;p&gt;花费了 &lt;strong&gt;一天半&lt;/strong&gt; 的时间，终于把我的 &lt;strong&gt;个人博客&lt;/strong&gt; 搭建完成，下面我写下搭建博客的过程，其实挺简单的 🙃&lt;/p&gt;
&lt;hr&gt;
      
      </description>
      
      <content:encoded><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="https://cdn.lishaoy.net/hexoGithubpagesNext/git_hexo.jpeg" class="full-image" alt="GitHubPages + Hexo" title="GitHubPages + Hexo"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><div class="text-center">    <h3>今天搭建了自己的博客 😝</h3></div><p>花费了 <strong>一天半</strong> 的时间，终于把我的 <strong>个人博客</strong> 搭建完成，下面我写下搭建博客的过程，其实挺简单的 🙃</p><hr><a id="more"></a><h3 id="博客所用技术-（Hexo-Next-GitHubPages）"><a href="#博客所用技术-（Hexo-Next-GitHubPages）" class="headerlink" title="博客所用技术 （Hexo + Next + GitHubPages）"></a>博客所用技术 （Hexo + Next + GitHubPages）</h3><p>在文章的末尾我会 <strong>贴出</strong> 我基于 <strong>Hexo + Next + GitHubPages</strong> 搭建博客，所参考的文章链接。</p><p>如果，你也想用这些技术搭建漂亮的博客，你就需要了解下 <code>Hexo</code> 、 <code>Next</code> 、 <code>GitHubPages</code> 这三个单词，下面会逐个解释。</p><h4 id="什么是-Hexo"><a href="#什么是-Hexo" class="headerlink" title="什么是 Hexo"></a>什么是 Hexo</h4><blockquote><p><strong>Hexo</strong> 是一个快速、简洁且高效的博客框架。<strong>Hexo</strong> 使用 <em>Markdown</em>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 – <a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo</a></p></blockquote><h4 id="什么是-Next"><a href="#什么是-Next" class="headerlink" title="什么是 Next"></a>什么是 Next</h4><blockquote><p><strong>NexT</strong> 是 <strong>Hexo</strong>的一个主题（theme），拥有丰富而简单的配置，结合第三方服务，可以打造属于您自己的博客。 – <a href="http://theme-next.iissnan.com" target="_blank" rel="noopener">Next</a></p></blockquote><h4 id="什么是-GitHubPages"><a href="#什么是-GitHubPages" class="headerlink" title="什么是 GitHubPages"></a>什么是 GitHubPages</h4><blockquote><p>GitHub Pages is a static site hosting service designed to host your personal, organization, or project pages directly from a GitHub repository. – <a href="https://help.github.com/articles/what-is-github-pages/" target="_blank" rel="noopener">GitHubPages</a></p></blockquote><p><strong>翻译过来大概是：</strong> GitHub页面是一个静态的站点托管服务，旨在从GitHub存储库中直接托管您的个人、组织或项目页面。</p><p>所以，<code>Hexo</code> 、 <code>Next</code> 、 <code>GitHubPages</code> 配合起来就可以免费搭建漂亮的 <strong>个人博客</strong> , 是不是很爽 😆</p><hr><h3 id="如何基于-Hexo-搭建博客"><a href="#如何基于-Hexo-搭建博客" class="headerlink" title="如何基于 Hexo 搭建博客"></a>如何基于 Hexo 搭建博客</h3><p>基于 Hexo 搭建博客，只需简单的几步，就能完成 <strong>个人博客</strong> 的搭建。</p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><h5 id="下载安装-nodejs"><a href="#下载安装-nodejs" class="headerlink" title="下载安装 nodejs"></a>下载安装 <code>nodejs</code></h5><p><code>node</code> 会自带 <code>npm</code> 包管理工具，<em>建议安装</em> <code>yarn</code> 来管理依赖 （因为 <code>hexo</code> 貌似是用 <code>yarn</code> 管理 <strong>依赖</strong> 的，否则可以回出现 <strong>依赖</strong> 问题）。</p><p><strong>Mac</strong> 用户可以用 <code>brew</code> 安装，<strong>Windows</strong> 可以用 <code>cmder</code> 或去官网下安装包程序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><p>然后用 <code>npm</code> 安装 <code>yarn</code></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install yarn</span><br></pre></td></tr></table></figure><h5 id="安装-git"><a href="#安装-git" class="headerlink" title="安装 git"></a>安装 <code>git</code></h5><p><strong>Mac</strong> 用户可用刚安装的 <code>yarn</code> 包管理工具安装 <code>git</code>，<strong>Windows</strong> 可以 <code>cmder</code> 或去官网下安装包程序。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn <span class="built_in">add</span> git -g</span><br></pre></td></tr></table></figure><h5 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 <code>hexo</code></h5><p>进入你的项目目录，比如我的是 <code>myblog</code> ，</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> myblog</span><br></pre></td></tr></table></figure><p>然后用 <code>yarn</code> 安装 <code>hexo</code>。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn <span class="built_in">add</span> hexo -S</span><br></pre></td></tr></table></figure><p>此时，环境都准备好了，就可以开始搭建 <strong>hexo</strong> 博客了 😜</p><hr><h4 id="搭建本地博客"><a href="#搭建本地博客" class="headerlink" title="搭建本地博客"></a>搭建本地博客</h4><h5 id="进入你的项目目录"><a href="#进入你的项目目录" class="headerlink" title="进入你的项目目录"></a>进入你的项目目录</h5><p>比如：我的是 <code>myblog</code>。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> myblog</span><br></pre></td></tr></table></figure><h5 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h5><p>项目初始化，会自动生成博客模板，以后写博客只需用 <code>markdown</code> 语法编写对应的 <code>.md</code> 文件即可 ✍️ 。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><h5 id="安装所有的依赖"><a href="#安装所有的依赖" class="headerlink" title="安装所有的依赖"></a>安装所有的依赖</h5><p>建议使用用 <code>yarn</code> ，否则会出现依赖问题（<em>在本文之后有相关介绍</em>）。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn install</span><br></pre></td></tr></table></figure><h5 id="最后，启动本地服务"><a href="#最后，启动本地服务" class="headerlink" title="最后，启动本地服务"></a>最后，启动本地服务</h5><p>在浏览器输入 <code>localhost:4000</code> 即可预览博客</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p><strong>如图:</strong> 🌁 <br><img src="https://cdn.lishaoy.net/hexoGithubpagesNext/hexoinit.png" alt="hexo" width="100%" title="hexo最初的样子 😂" align="center"></p><hr><h3 id="关联-GitHub"><a href="#关联-GitHub" class="headerlink" title="关联 GitHub"></a>关联 GitHub</h3><p>通过 <strong>GitHub</strong> 的 <code>pages</code> 功能，我们可以把我们的博客托管到 <strong>GitHub</strong> ，而无需去购买云服务器 😋 ,轻松愉快的构建免费博客。</p><h4 id="创建-GitHub-账户"><a href="#创建-GitHub-账户" class="headerlink" title="创建 GitHub 账户"></a>创建 GitHub 账户</h4><p>我相信 🤔 大家应该都有 <strong>GitHub</strong> 账号了，如果没有可去 <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> 官网按照步骤创建账户即可。</p><h4 id="配置关联-GitHub"><a href="#配置关联-GitHub" class="headerlink" title="配置关联 GitHub"></a>配置关联 GitHub</h4><ul><li>有了 <strong>GitHub</strong> 账号之后，登录 <strong>GitHub</strong> ，创建一个项目，项目名称最好和你本地的项目一致，比如： <code>myblog</code></li></ul><div class="note danger"><p>项目建好之后，一定要开启 <strong>GitHub Pages</strong> 功能 ⚠️</p></div><ul><li>点击如图 <code>Settings</code> 开启，<strong>GitHub Pages</strong> 功能</li></ul><p><img src="https://cdn.lishaoy.net/hexoGithubpagesNext/gitpages.png" alt="GitHubPages" width="100%" title="GitHubPages Settings" align="center"></p><ul><li>选择 <code>master branch</code> , 然后 <strong>Save</strong> </li></ul><p><img src="https://cdn.lishaoy.net/hexoGithubpagesNext/gitpages2.png" alt="GitHubPages" width="100%" title="GitHubPages Source" align="center"></p><ul><li>复制你的项目连接，如图</li></ul><p><img src="https://cdn.lishaoy.net/hexoGithubpagesNext/gitpages3.png" alt="GitHubPages" width="100%" title="GitHubPages URL" align="center"></p><ul><li>然后在你本地项目根目录找到 <code>_config.yml</code> 文件，粘贴到以下位置</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repository:</span> <span class="attr">https://github.com/persilee/MyBlog.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h4 id="完成关联"><a href="#完成关联" class="headerlink" title="完成关联"></a>完成关联</h4><p>完成以上步骤之后，就可以把自己本地项目推送到 <strong>GitHub</strong> 托管，只剩下3步 😋</p><ol><li>安装 <code>hexo-deployer-git</code> 插件（可以通过简单的命令,完成文件生成及推送功能）</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn <span class="built_in">add</span> hexo-deployer-git -S</span><br></pre></td></tr></table></figure><ol><li>运行 <code>hexo g</code> （生成本地文件）</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><ol><li>运行 <code>hexo d</code> （将本地文件推送到 <strong>GitHub</strong> ，和 <code>git push</code> 功能相同）</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>此时，<strong>GitHub</strong> 应该已给你生成了访问连接，连接格式是: <code>你的账号名称</code> + <code>.github.io</code> + <code>\项目名称</code>,也可以去刚才 <code>GitHubPages</code> 设置页面查看例如我的：<a href="https:\\persilee.github.io\MyBlog" target="_blank" rel="noopener">https:\persilee.github.io\MyBlog</a></p><p>这时，你就可以把连接发给小伙伴们，他们通过连接都可以访问你的 <strong>博客</strong> 🙃。</p><div class="note danger"><p><strong>这里需要注意的地方是：在执行 <code>hexo g</code> 命令时候，可能会出现以下 <code>error</code>,应该是 <code>yarn</code> 和 <code>npm</code> 冲突的依赖的问题，所以前面文章建议使用 <code>yarn</code> 管理包依赖</strong></p></div><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ERROR Plugin load failed: hexo-renderer-marked</span><br><span class="line">Error: EISDIR: illegal operation <span class="keyword">on</span> <span class="keyword">a</span> directory, <span class="keyword">read</span></span><br><span class="line">ERROR Plugin load failed: hexo-server</span><br><span class="line">Error: EISDIR: illegal operation <span class="keyword">on</span> <span class="keyword">a</span> directory, <span class="keyword">read</span></span><br><span class="line">ERROR Plugin load failed: hexo-renderer-stylus</span><br><span class="line">Error: EISDIR: illegal operation <span class="keyword">on</span> <span class="keyword">a</span> directory, <span class="keyword">read</span></span><br></pre></td></tr></table></figure><p>解决办法，先用 <code>yarn</code> 分别移除，再重新安装，如下</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">## 先移除</span><br><span class="line">yarn <span class="built_in">remove</span> hexo-renderer-marked</span><br><span class="line"></span><br><span class="line">yarn <span class="built_in">remove</span> hexo-renderer-stylus</span><br><span class="line"></span><br><span class="line">yarn <span class="built_in">remove</span> hexo-server</span><br><span class="line"></span><br><span class="line">## 再安装</span><br><span class="line">yarn <span class="built_in">add</span> hexo-renderer-marked -S </span><br><span class="line"></span><br><span class="line">yarn <span class="built_in">add</span> hexo-renderer-stylus -S</span><br><span class="line"></span><br><span class="line">yarn <span class="built_in">add</span> hexo-server -S</span><br></pre></td></tr></table></figure><p>在执行 <code>hexo g</code> ,顺利执行 👌</p><hr><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>我们已经可以通过 <strong>GitHub</strong> 分发给我的地址访问 <strong>博客</strong> ，但是，这对于我们这些爱 <strong>折腾</strong> 的 <strong>程序猿👨‍💻‍</strong> 来说，还不够，弄个自己的 <strong>域名</strong> 才够拉风😂。</p><p>于是。。。</p><p>开始绑定自己的 <strong>域名</strong> <a href="https://lishaoy.net" target="_blank" rel="noopener">lishaoy.net</a></p><p>然而，我们绑定 <strong>域名</strong> 之后，只支持 <code>http</code> 协议，这样我们在 <strong>Google</strong> 浏览器访问时，会有不安全标准，而且，很容易被插入广告，于是。。。<strong>折腾</strong> 走起🌝：搞个 <code>https</code></p><p>转入正题，经过一番 <strong>折腾</strong> ，采用第三方服务 <a href="https://app.netlify.com/sites/lishaoy/settings/domain#ssl-tls-certificate" target="_blank" rel="noopener">Netlify</a> 来提供免费的SSL/TLS证书。</p><p>当然，这里我提供2种方式绑定域名，一种是 <code>HTTP</code> (不安全的网络协议)、一种是 <code>HTTPS</code> （安全的网络协议，在 <strong>Google</strong> 浏览器上回有一把小锁，如图）</p><p><img src="https://cdn.lishaoy.net/hexoGithubpagesNext/lock.png" alt="Netlity" width="100%" title="Google HTTPS 状态标识" align="center"></p><h4 id="HTTP-绑定域名"><a href="#HTTP-绑定域名" class="headerlink" title="HTTP 绑定域名"></a><code>HTTP</code> 绑定域名</h4><h5 id="设置域名解析规则"><a href="#设置域名解析规则" class="headerlink" title="设置域名解析规则"></a>设置域名解析规则</h5><p>首先，我们需要去运行商，新增域名解析规则，如图</p><p><img src="https://cdn.lishaoy.net/hexoGithubpagesNext/domain.png" alt="domain" width="100%" title="域名解析规则" align="center"></p><h5 id="新增-CNAME-文件"><a href="#新增-CNAME-文件" class="headerlink" title="新增 CNAME 文件"></a>新增 <code>CNAME</code> 文件</h5><p>配置好域名解析规则之后，还需要在项目的 <code>.\source\</code> 路径下新增 <code>CNAME</code> 文件，输入内容 <code>你的域名</code> ,如：<a href="https://lishaoy.net" target="_blank" rel="noopener">lishaoy.net</a></p><h5 id="重新新生成文件，推送到GitHub"><a href="#重新新生成文件，推送到GitHub" class="headerlink" title="重新新生成文件，推送到GitHub"></a>重新新生成文件，推送到GitHub</h5><p>重新生成文件，运行 <code>hexo g</code></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>推送 <strong>GitHub</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><hr><h4 id="HTTPS-绑定域名"><a href="#HTTPS-绑定域名" class="headerlink" title="HTTPS 绑定域名"></a><code>HTTPS</code> 绑定域名</h4><h5 id="注册-Netlify-账号"><a href="#注册-Netlify-账号" class="headerlink" title="注册 Netlify 账号"></a>注册 <code>Netlify</code> 账号</h5><p>首先，我们需要注册一个 <a href="https://app.netlify.com/sites/lishaoy/settings/domain#ssl-tls-certificate" target="_blank" rel="noopener">Netlify</a> 账号，地址：<a href="https://app.netlify.com/sites/lishaoy/settings/domain#ssl-tls-certificate" target="_blank" rel="noopener">Netlify</a> ，可以选择用 <strong>GitHub</strong> 注册。</p><p><img src="https://cdn.lishaoy.net/hexoGithubpagesNext/netlify.png" alt="Netlity" width="100%" title="Netlity Login" align="center"></p><h5 id="新增站点"><a href="#新增站点" class="headerlink" title="新增站点"></a>新增站点</h5><ul><li>点击如图按钮 <code>New site from Git</code>,来新增 <strong>站点</strong></li></ul><p><img src="https://cdn.lishaoy.net/hexoGithubpagesNext/netlify1.png" alt="Netlity" width="100%" title="New site from Git" align="center"></p><ul><li>然后，点击如图按钮 <code>GitHub</code> </li></ul><p><img src="https://cdn.lishaoy.net/hexoGithubpagesNext/netlify2.png" alt="Netlity" width="100%" title="GitHub" align="center"></p><ul><li>选择你的项目，比如我的 <code>MyBlog</code></li></ul><p><img src="https://cdn.lishaoy.net/hexoGithubpagesNext/netlify3.png" alt="Netlity" width="100%" title="Select Site" align="center"></p><ul><li>点击 <code>Deploy site</code></li></ul><p><img src="https://cdn.lishaoy.net/hexoGithubpagesNext/netlify4.png" alt="Netlity" width="100%" title="Deploy site" align="center"></p><ul><li>看到如图页面，表示成功，再点击 <code>Site settings</code> </li></ul><p><img src="https://cdn.lishaoy.net/hexoGithubpagesNext/netlify5.png" alt="Netlity" width="100%" title="Getting started" align="center"></p><p><img src="https://cdn.lishaoy.net/hexoGithubpagesNext/netlify6.png" alt="Netlity" width="100%" title="Site details" align="center"></p><ul><li><p>再点击 <code>Change site name</code> 修改短名称，方便记忆</p></li><li><p>在自己的域名管理中设置 <strong>DNS</strong> ，我使用的是 <strong>阿里云</strong> ，在管理界面添加如图规则</p></li></ul><p><img src="https://cdn.lishaoy.net/hexoGithubpagesNext/netlify7.png" alt="Netlity" width="100%" title="设置域名规则" align="center"></p><ul><li>在点击 <code>Domain management</code> 下的 <code>HTTPS</code> ，按照步骤完成操作，稍等片刻，即可看到我们的 <strong>域名</strong> 已经上锁 🔐 </li></ul><p><img src="https://cdn.lishaoy.net/hexoGithubpagesNext/netlify8.png" alt="Netlity" width="100%" title="lishaoy.net上锁" align="center"></p><p>😝 😜 😄 😆 😂 🤣 …</p><hr><h3 id="更换-next-主题"><a href="#更换-next-主题" class="headerlink" title="更换 next 主题"></a>更换 <code>next</code> 主题</h3><p><code>hexo</code> 的主题很多，你可以选择其他喜欢 ❤️ 的主题，我使用的是 <code>next</code> 主题。</p><h4 id="安装-next-主题"><a href="#安装-next-主题" class="headerlink" title="安装 next 主题"></a>安装 <code>next</code> 主题</h4><p>执行以下命令，安装 <code>next</code> 主题</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/iissnan/hexo-theme-<span class="keyword">next</span>.git themes/<span class="keyword">next</span></span><br></pre></td></tr></table></figure><h4 id="更改配置文件"><a href="#更改配置文件" class="headerlink" title="更改配置文件"></a>更改配置文件</h4><p>修改根目录下的 <code>./_config.yml</code> 文件，如下</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugin<span class="variable">s:</span> http<span class="variable">s:</span>//hexo.io/plugins/</span><br><span class="line">## Theme<span class="variable">s:</span> http<span class="variable">s:</span>//hexo.io/themes/</span><br><span class="line">theme: <span class="keyword">next</span></span><br></pre></td></tr></table></figure><h5 id="重新新生成文件，推送到GitHub-1"><a href="#重新新生成文件，推送到GitHub-1" class="headerlink" title="重新新生成文件，推送到GitHub"></a>重新新生成文件，推送到GitHub</h5><p>重新生成文件，运行 <code>hexo g</code></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>推送 <strong>GitHub</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>也可以运行以下命令，启动一个本地服务，调试确定无问题之后再 推送到 <strong>GitHub</strong> </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s --<span class="keyword">debug</span></span><br></pre></td></tr></table></figure><p>本地服务启动后，可以在浏览器输入 <code>http://localhost:4000</code> 预览，如图</p><p><img src="https://cdn.lishaoy.net/hexoGithubpagesNext/nextpage.png" alt="next" width="100%" title="next 主题最初的样子🙃" align="center"></p><p><strong>本文到此告一段落，关于 <code>next</code> 主题美化的问题，可以参考以下链接文章 🤗</strong></p><p>以下是我搭建 <strong>博客</strong> 参考的文章链接 👇 </p><div class="note default"><ul><li><a href="http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html" target="_blank" rel="noopener">hexo的next主题个性化教程:打造炫酷网站</a></li><li><a href="https://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/" target="_blank" rel="noopener">Hexo搭建博客教程</a></li><li><a href="https://www.jianshu.com/p/d95cff938277" target="_blank" rel="noopener">Hexo博客搭建全攻略(二)：NexT主题配置</a></li></ul></div>]]></content:encoded>
      
      <comments>https://www.h.lishaoy.net/hexoGithubpagesNext.html#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
