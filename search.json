[{"title":"猫吧","url":"%2F2018%2F03%2F28%2FcatBar20150927%2F","content":"\n{% fi catBar20150927/catBar04.JPG %}\n<div class=\"text-center\">\n**很久之前拍的照片 <i style=\"color:#aaa\">（拍摄于2015年9月27）</i>**\n</div>\n<table class=\"per-table\">\n    <tr>\n        <td>**摄影/后期：**</td>\n        <td>子木</td>\n    </tr>\n    <tr>\n        <td>**模特：**</td>\n        <td>👩‍⚖️‍ </td>\n    </tr>\n    <tr>\n        <td>**地点：**</td>\n        <td>深圳福田</td>\n    </tr>\n</table>\n\n---\n\n<!-- more -->\n\n<img src=\"catBar20150927/catBar01.JPG\" alt=\"hexo\" width=\"100%\" align=\"center\" />\n\n<img src=\"catBar20150927/catBar02.JPG\" alt=\"hexo\" width=\"100%\" align=\"center\" />\n\n<img src=\"catBar20150927/catBar03.JPG\" alt=\"hexo\" width=\"100%\" align=\"center\" />\n\n<img src=\"catBar20150927/catBar04.JPG\" alt=\"hexo\" width=\"100%\" align=\"center\" />\n\n<img src=\"catBar20150927/catBar05.JPG\" alt=\"hexo\" width=\"100%\" align=\"center\" />\n\n<img src=\"catBar20150927/catBar06.JPG\" alt=\"hexo\" width=\"100%\" align=\"center\" />\n\n<img src=\"catBar20150927/catBar07.JPG\" alt=\"hexo\" width=\"100%\" align=\"center\" />\n\n<img src=\"catBar20150927/catBar09.JPG\" alt=\"hexo\" width=\"100%\" align=\"center\" />\n\n<img src=\"catBar20150927/catBar10.JPG\" alt=\"hexo\" width=\"100%\" align=\"center\" />\n\n<img src=\"catBar20150927/catBar11.JPG\" alt=\"hexo\" width=\"100%\" align=\"center\" />\n\n<img src=\"catBar20150927/catBar08.JPG\" alt=\"hexo\" width=\"100%\" align=\"center\" />\n\n<img src=\"catBar20150927/catBar12.JPG\" alt=\"hexo\" width=\"100%\" align=\"center\" />","tags":["照片"],"categories":["摄影"]},{"title":"如何用 CSS + HTML + JS 创建桌面应用","url":"%2F2018%2F03%2F28%2FnwjsElectronjs%2F","content":"\n最近研究了一下基于 `Chromium` 定制浏览器的方案，查阅了大量资料，具体方案也有了大概的蓝图 😉 \n\n<!-- more -->\n\n在阐述方案之前，先要了解几个名词：\n\n### 简介\n\n#### Chromium\n\n>Chromium是一个由Google主导开发的网页浏览器，以BSD许可证等多重自由版权发行并开放源代码。Chromium的开发可能早自2006年即开始。\n\n>Chromium是Google为发展自家的浏览器Google Chrome而打开的项目，所以Chromium相当于Google Chrome的工程版或实验版（尽管Google Chrome本身也有β版），新功能会率先在Chromium上开放，待验证后才会应用在Google Chrome上，故Google Chrome的功能会相对落后但较稳定。 —— [维基百科](https://zh.wikipedia.org/wiki/Chromium#cite_note-3)\n\n#### CEF\n\n>Chromium Embedded Framework (CEF)是个基于Google Chromium项目的开源Web browser控件，支持Windows, Linux, Mac平台。除了提供C/C++接口外，也有其他语言的移植版。\n\n>因为基于Chromium，所以CEF支持Webkit & Chrome中实现的HTML5的特性，并且在性能上面，也比较接近Chrome。\nCEF还提供的如下特性：自定义插件、自定义协议、自定义JavaScript对象和扩展；可控制的resource loading, navigation, context menus等等  —— [百度百科](https://baike.baidu.com/item/CEF/20837917?fr=aladdin)\n\n#### NW\n\n>NW.js 是基于 Chromium 和 Node.js 运行的， 以前也叫nodeWebkit。这就给了你使用HTML和JavaScript来制作桌面应用的可能。在应用里你可以直接调用Node.js的各种api以及现有的第三方包。因为Chromium和 Node.js 的跨平台，那么你的应用也是可以跨平台的。—— [SegmentFault][1]\n\n#### Electron\n\n>Electron（最初名为Atom Shell）是GitHub开发的一个开源框架。它允许使用Node.js（作为后端）和Chromium（作为前端）完成桌面GUI应用程序的开发。Electron现已被多个开源Web应用程序用于前端与后端的开发，著名项目包括GitHub的Atom和微软的Visual Studio Code。—— [维基百科][2]\n\n所以 ，**CEF**、**nw**、**Electron** 都是基于 `Chromium` 的开源框架，可以实现所需的定制浏览器需求，准确的讲应该是用 `HTML5` 、 `CSS3` 、 `JavaScript` 来制作拥有漂亮界面的**桌面应用**。\n\n就是一个本地客户端应用程序使用一个内置的浏览器内核渲染前端界面，另一方面还可以调用本地系统级API，实现本地应用程序的各种功能。\n\n------\n\n### 市场调研\n\n通过查阅大量资料得知，以各企业的线上产品及使用的技术供参考。\n\n#### CEF 案例\n\n据 **CEF** 官方介绍，以下（如图）桌面应用在使用 `CEF`。\n\n<img src=\"https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/CEF.png?raw=true\" alt=\"CEF\" width=\"85%\" title=\"who is using CEF\" align=\"center\" />\n\n国内桌面应用有：[有道云笔记][3] <i style=\"color:#aaa\">（网易）</i>、[钉钉][4]<i style=\"color:#aaa\">（阿里巴巴）</i>、[QQ][5]<i style=\"color:#aaa\">（腾讯）</i> 等，查看安装后目录及文件，可以看出 **有道云笔记**、**钉钉** 是使用的是`CEF`，而 **钉钉** 界面是使用 `AngularJs`，据了解后端应该用了`C++`和`Python`。\n\n**QQ** 很早之前就通过内嵌 **IE** 来实现一些功能和界面。从2013年开始，**QQ** 引入了 `CEF`，对一些之前用 **IE** 的地方进行了替换。\n\n![no-shadow](https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520329975606.png?raw=true \"钉钉Mac版目录\")\n\n![no-shadow](https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520330256871.png?raw=true \"钉钉Mac版应用界面\")\n\n#### NW 案例\n\n这个是 **[NW](https://nwjs.io)** 官方给出的使用 `nw.js` 的应用列表：[https://github.com/nwjs/nw.js/wiki/List-of-apps-and-companies-using-nw.js][6] \n\n而国内的有，比如微信开发工具等，是基于 `nw.js` 开发的。\n\n![no-shadow](https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520571438918.png?raw=true \"微信开发工具Mac版目录\")\n\n![no-shadow](https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520571517344.png?raw=true \"微信开发工具Mac版\")\n\n#### Electron 案例\n\n这个是 **[Electron](https://electronjs.org)** 官方给出的是用 `electron` 的应用列表：[https://electronjs.org/apps](https://electronjs.org/apps)\n\n如图，**Electron** 已被像 **微软**、 **Facebook**、 **Slack** 和 **Docker** 这样的公司用于创建应用程序。\n\n<img src=\"https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520668439676.png?raw=true\" alt=\"electron\" width=\"85%\" title=\"electron 应用\" align=\"center\" />\n\n我所用的编辑器 **Visual Studio Code** 就是基于 `electron` 开发的\n\n![no-shadow](https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520669844227.png?raw=true \"VS Code Mac版\")\n \n ----\n\n### 实战\n\n下面会分别用 `nw.js` 和 `electron` 做一个简单的 **Dome**。\n\n由于 **CEF** 文档资料少且原生是 `C\\C++` ，虽然官方给出了 `java` 版的 **JCEF** ，开发起来效率较低，故此不知演示。\n\n这个是 **[CEF][7]** 官网，在 *External Projects* 章节列出支持语言：\n\n> - Net (CEF3) - https://github.com/cefsharp/CefSharp\n> - Net (CEF1) - https://bitbucket.org/fddima/cefglue\n> - Net/Mono (CEF3) - https://bitbucket.org/xilium/xilium.cefglue\n> - Net (CEF3) - https://bitbucket.org/chromiumfx/chromiumfx\n> - Delphi (CEF1) - http://code.google.com/p/delphichromiumembedded/\n> - Delphi (CEF3) - https://github.com/hgourvest/dcef3\n> - Delphi (CEF3) - https://github.com/salvadordf/CEF4Delphi\n> - Go - https://github.com/CzarekTomczak/cef2go\n> - Java - https://bitbucket.org/chromiumembedded/java-cef\n> - Java - http://code.google.com/p/javacef/\n> - Python - http://code.google.com/p/cefpython/\n\n#### NW => Hello, world!\n\n从一个简单的例子来让我们看看如何编写一个 **NW** 应用。\n\n- **第一步** 创建 `package.json` 配置文件\n\n```vim\n{\n    \"name\": \"helloworld\",\n    \"main\": \"index.html\",\n    \"icon\": \"img/app.png\",\n    \"window\": {\n        \"icon\": \"img/app.png\"\n    }\n}\n```\n`main` 配置应用打开首页，`name` 配置应用的名称。\n\n- **第二步** 创建 `index.html` \n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Holle NW</title>\n</head>\n<style>\n    html,\n    body {\n        height: 100%;\n        margin: 0;\n    }\n\n    .box {\n        height: 100%;\n        display: flex; /* css3 弹性盒子 */\n        justify-content: center;\n        align-items: center;\n    }\n</style>\n\n<body>\n    <div class=\"box\">\n        <h1>Holle NW!</h1>\n    </div>\n</body>\n\n</html>\n```\n这是一个简单的 **HTML** 文件，加入了一点CSS，目的是让 **Holle NW!** 水平垂直居中。\n\n- **第三步** 打包应用\n\n这里我只测试了 **Mac** 和 **Windows** 的打包，**Linux** 没有测试。\n\n**Mac打包应用：** 在项目根目录执行以下命令，把所有文件压缩成 `app.nw` 文件。\n\n```vim\nzip -r app.nw *\n```\n\n然后把`app.nw` 文件放到 `nwjs.app/Contents/Resources/` 目录下即可，效果如图：\n\n![no-shadow](https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520711078780.png?raw=true \"Mac下运行效果\")\n\n**Windows打包应用：**  将应用的所有相关文件打成一个名为`package.nw` 的压缩包，将`package.nw` 与**NW**可执行文件放到相同目录即可，效果如图：\n\n![no-shadow](https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520711343860.png?raw=true \"Windons下运行效果 \")\n\n-----\n\n#### Electron => Hello, world!\n\n**Electron** 可以让你使用纯 `JavaScript` 调用丰富的原生(操作系统) **APIs** 来创造桌面应用。\n\n只需3个文件就可以构建一个简单的应用\n\n```zsh\nyour-app/\n  ├── package.json\n  ├── main.js\n  └── index.html\n```\n\n- **第一步** 创建配置文件\n\n首先需要安装 **Node** 环境，用 `npm` 来创建一个应用的配置文件 `package.json`\n\n```vim\nnpm init\n```\n\n在 `package.json` 里新增启动命令 `start` \n\n```vim\n{\n    \"name\": \"your-app\",\n    \"version\": \"0.1.0\",\n    \"main\": \"main.js\",\n    \"scripts\": {\n      \"start\": \"electron .\"\n    }\n  }\n```\n\n- **第二步** 创建入口文件 `main.js`\n\n```javascript\nconst {app, BrowserWindow} = require('electron');\nconst path = require('path')\nconst url = require('url')\n\nfunction createWindow() {\n    win = new BrowserWindow({\n        width: 1008,\n        height: 759\n    })\n      \n    win.loadURL(url.format({\n        pathname: path.join(__dirname, 'index.html'),\n        protocol: 'file:',\n        slashes: true\n    }))\n}\n\napp.on('ready', createWindow)\n```\n\n代码已经很清晰直观，`createWindow` 创建一个桌面窗口，而大小由 `width`、`height` 控制，`win.loadURL` 用来加载页面。\n\n- **第三步** 创建展示文件 `index.html`\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Hello Electron</title>\n</head>\n<style>\n    html,\n    body {\n        height: 100%;\n        margin: 0;\n    }\n\n    .box {\n        height: 100%;\n        display: flex;\n        /* css3 弹性盒子 */\n        justify-content: center;\n        align-items: center;\n    }\n</style>\n\n<body>\n    <div class=\"box\">\n        <h1>Hello Electron!</h1>\n    </div>\n</body>\n\n</html>\n```\n这是一个简单的 **HTML** 文件，加入了一点CSS，目的是让 **Holle NW!** 水平垂直居中。\n\n- **第四步** 打包应用\n\n**打包应用：** 打包应用可以是用 `electron-packager` 工具进行打包，需要在 `package.json` 配置以下命令\n\n```json\n\"scripts\": {\n    \"start\": \"electron .\",\n    \"packager\": \"electron-packager ./ HelloElectron --all --out ./OutApp --version 0.0.1 --overwrite --ignore=node_modules --icon=./app/img/app.ico\"\n  },\n```\n\n然后，运行在终端执行命令 `npm run packagerMac` 即可打包`linux`、`Mac`、`windows` 三大平台应用包，效果如图：\n\n<img src=\"https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520791859473.png?raw=true\" alt=\"打包后的应用\" width=\"60%\" title=\"打包后的应用\" align=\"center\" />\n\n![no-shadow](https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520790145115.png?raw=true \"Mac下运行效果\")\n\n![no-shadow](https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520792416456.png?raw=true \"Windows下运行效果\")\n\n----\n\n### GitHub关注度和活跃度\n\n首先我们需要先了解一下 **GitHub** 的以下三个状态的意思，\n\n![no-shadow](https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520857435681.png?raw=true)\n\n![no-shadow](https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520857536175.png?raw=true) ：表示你以后会关注这个项目的所有动态，这个项目以后只要发生变动，如被别人提交了 `pull request`、被别人发起了`issue` 等等情况，你都会在自己的个人通知中心，收到一条通知消息，如果你设置了个人邮箱，那么你的邮箱也可能收到相应的邮件。\n\n![no-shadow](https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520857569746.png?raw=true)：表示你喜欢这个项目或者通俗点，可以把他理解成朋友圈的点赞，表示对这个项目的支持。\n\n![no-shadow](https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520857709924.png?raw=true)：当选择 `fork`，相当于你自己有了一份原项目的拷贝，当然这个拷贝只是针对当时的项目文件，如果后续原项目文件发生改变，你必须通过其他的方式去同步。<i style=\"color:#aaa\">（一般用于修改**bug**和优化项目或者在此项目上开发新功能等）</i>\n\n#### CEF\n\n**CEF** 在 **GitHub** 找不到项目，这个[官网][8] 提供的数据，如图<i style=\"color:#aaa\">（由于在**GitHub** 没有项目，相关数据无法准确统计）</i>。\n\n![CEF关注度](https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520855809138.png?raw=true \"CEF关注度\")\n\n#### NW\n\n**NW关注度：** ![Alt text](https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520856387728.png?raw=true)\n\n**NW活跃度：**如图\n\n![2011年~2018年提交量](https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520858064076.png?raw=true \"2011年~2018年提交量\")\n\n#### Electron\n\n**Electron关注度：** ![no-shadow](https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520858325207.png?raw=true)\n\n**活跃度：** 如图\n\n![electron2013年~2018年提交量](https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520858451333.png?raw=true \"electron2013年~2018年提交量\")\n\n----\n\n通过以上的 **市场调研**、**实战**、**GitHub关注度和活跃度** 等 **Electron** 都占有优势，如下\n\n-  市场案例较多，各大型企业都在使用\n-  开发实战代码更直观，容易理解和维护，各种文档健全、网络资料较多且质量较高，周边辅助工具齐全，开发效率可大大提高\n-  **GitHub** 关注度和活跃度持续攀升\n\n所有结合以上情况，之后会用以下技术栈做一个完善的案例\n\n- **跨平台桌面应用框架：**`electron`  <i style=\"color:#aaa\">（Chromium + Node.js）</i>\n- **UI库：** `iView`\n- **js框架：** `Vue.js`\n- **自动化构建工具：**  `webpack`\n- **HTML5、CSS3、ES6**\n\n\n  [1]: https://segmentfault.com/a/1190000003870613\n  [2]: https://zh.wikipedia.org/wiki/Electron_%28%E8%BD%AF%E4%BB%B6%E6%A1%86%E6%9E%B6%29\n  [3]: http://note.youdao.com\n  [4]: https://www.dingtalk.com/?source=2202&lwfrom=2017120202092064209309201\n  [5]: https://im.qq.com/pcqq/\n  [6]: https://github.com/nwjs/nw.js/wiki/List-of-apps-and-companies-using-nw.js\n  [7]: https://bitbucket.org/chromiumembedded/cef\n  [8]: https://bitbucket.org/chromiumembedded/cef/overview","tags":["桌面应用"],"categories":["Node"]},{"title":"用 Hexo + Next + GitHubPages 搭建漂亮的免费博客","url":"%2F2018%2F03%2F24%2F%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%2F","content":"{% fi 我的第一篇博客/git_hexo.jpeg, GitHubPages + Hexo, GitHubPages + Hexo %}\n<div class=\"text-center\">\n    <h3>今天搭建了自己的博客 😝</h3>\n</div>\n\n花费了 **一天半** 的时间，终于把我的 **个人博客** 搭建完成，下面我写下搭建博客的过程，其实挺简单的 🙃\n\n---\n\n<!-- more -->\n\n### 博客所用技术 （Hexo + Next + GitHubPages）\n\n在文章的末尾我会 **贴出** 我基于 **Hexo + Next + GitHubPages** 搭建博客，所参考的文章链接。\n\n如果，你也想用这些技术搭建漂亮的博客，你就需要了解下 `Hexo` 、 `Next` 、 `GitHubPages` 这三个单词，下面会逐个解释。\n\n####  什么是 Hexo\n> **Hexo** 是一个快速、简洁且高效的博客框架。**Hexo** 使用 *Markdown*（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 -- [Hexo](https://hexo.io/zh-cn/docs/index.html)\n\n####  什么是 Next\n\n> **NexT** 是 **Hexo**的一个主题（theme），拥有丰富而简单的配置，结合第三方服务，可以打造属于您自己的博客。 -- [Next](http://theme-next.iissnan.com)\n\n#### 什么是 GitHubPages\n\n> GitHub Pages is a static site hosting service designed to host your personal, organization, or project pages directly from a GitHub repository. -- [GitHubPages](https://help.github.com/articles/what-is-github-pages/)\n\n**翻译过来大概是：** GitHub页面是一个静态的站点托管服务，旨在从GitHub存储库中直接托管您的个人、组织或项目页面。\n\n所以，`Hexo` 、 `Next` 、 `GitHubPages` 配合起来就可以免费搭建漂亮的 **个人博客** , 是不是很爽 😆\n\n----\n### 如何\b基于 \bHexo 搭建博客\n\n基于 \bHexo 搭建博客，只需简单的几步，就能完成 **个人博客** 的搭建。\n\n#### \b准备工作\n\n##### 下载安装 \b`nodejs`\n\n`node` 会自带 \b`npm` 包管理工具，*建议安装* `yarn` 来管理依赖 （\b因为 `hexo` 貌似是用 `yarn` 管理 **依赖** 的，否则可以回出现 **依赖\b** 问题）。\n\n**Mac** 用户可以用 `brew` 安装，**Windows** 可以用 `cmder` 或去官网下安装包程序。\n\n```\bvim\n    brew install node\n```\n\n然后用 \b`npm` 安装 `yarn`\n\n```vim\n    npm install yarn\n```\n\n##### 安装\b `git`\n\n**Mac\b** 用户可用刚安装的 `yarn` 包管理工具安装 `git`，**Windows** 可以 `cmder` 或去官网下安装包程序。\n\n```vim\n    yarn add git -g\n```\n\n##### 安装 `hexo`\n\n进入你的项目目录，比如我的是 `myblog` ，\n\n```vim\n    cd myblog\n```\n\n然后用 `\byarn` 安装 `hexo`。\n\n```vim\n    yarn add hexo -S\n```\n\n此时，环境都准备好了，就可以开始搭建 **\bhexo** 博客了 😜\n\n----\n#### 搭建本地博客\n\n##### 进入你的项目目录\n\n比如：我的是 `myblog`。\n\n```vim\n    cd myblog\n```\n\n##### 项目初始化\n\n项目初始化，会自动生成博客模板，以后写博客只需用 `markdown` 语法编写对应的 `.md` 文件即可 ✍️ 。\n\n```vim\n    hexo init\n```\n##### 安装所有的依赖 \n\n建议使用用 `yarn` ，否则会出现依赖问题（*在本文之后有相关介绍*）。\n\n```vim\n    yarn install\n```\n##### 最后，启动本地服务\n\n在浏览器输入 `localhost:4000` 即可预览博客\n\n```vim\n    hexo server\n```\n\n**如图:** 🌁 </br>\n<img src=\"我的第一篇博客/hexoinit.png\" alt=\"hexo\" width=\"100%\" title=\"hexo最初的样子 😂\" align=\"center\" />\n\n----\n### 关联 GitHub\n\n通过 **GitHub** 的 `pages` 功能，我们可以把我们的博客托管到 **GitHub** ，而无需去购买云服务器 😋 ,轻松愉快的构建免费博客。\n\n#### 创建 GitHub 账户\n\n我相信 🤔 大家应该都有 **GitHub** 账号了，如果没有可去 [GitHub](https://github.com/) 官网按照步骤创建账户即可。\n\n#### 配置关联 GitHub\n\n- 有了 **GitHub** 账号之后，登录 **GitHub** ，创建一个项目，项目名称最后和你本地的项目一致，比如： `myblog`\n\n{% note danger %}\n项目建好之后，一定要开启 **GitHub Pages** 功能 ⚠️\n{% endnote %}\n\n- 点击如图 `Settings` 开启，**GitHub Pages** 功能\n\n<img src=\"我的第一篇博客/gitpages.png\" alt=\"GitHubPages\" width=\"100%\" title=\"GitHubPages Settings\" align=\"center\" />\n\n- 选择 `master branch` , 然后 **Save** \n\n<img src=\"我的第一篇博客/gitpages2.png\" alt=\"GitHubPages\" width=\"100%\" title=\"GitHubPages Source\" align=\"center\" />\n\n- 复制你的项目连接，如图\n\n<img src=\"我的第一篇博客/gitpages3.png\" alt=\"GitHubPages\" width=\"100%\" title=\"GitHubPages URL\" align=\"center\" />\n\n- 然后在你本地项目根目录找到 `_config.yml` 文件，粘贴到以下位置\n\n```yml\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/persilee/MyBlog.git\n  branch: master\n```\n\n#### 完成关联\n\n完成以上步骤之后，就可以把自己本地项目推送到 **GitHub** 托管，只剩下3步 😋\n\n1. 安装 `hexo-deployer-git` 插件（可以通过简单的命令,完成文件生成及推送功能）\n\n```vim\n    yarn add hexo-deployer-git -S\n```\n\n2. 运行 `hexo g` （生成本地文件）\n\n```vim\n    hexo g\n```\n\n3. 运行 `hexo d` （将本地文件推送到 **GitHub** ，和 `git push` 功能相同）\n\n```vim\n    hexo d\n```\n此时，**GitHub** 应该已给你生成了访问连接，连接格式是: `你的账号名称` + `.github.io` + `\\项目名称`,也可以去刚才 `GitHubPages` 设置页面查看\n例如我的：[https:\\\\persilee.github.io\\MyBlog](https:\\\\persilee.github.io\\MyBlog)\n\n这时，你就可以把连接发给小伙伴们，他们通过连接都可以访问你的 **博客** 🙃。\n\n{% note danger %}\n**这里需要注意的地方是：在执行 `hexo g` 命令时候，可能会出现以下 `error`,应该是 `yarn` 和 `npm` 冲突的依赖的问题，所以前面文章建议使用 `yarn` 管理包依赖**\n{% endnote %}\n\n```vim\nERROR Plugin load failed: hexo-renderer-marked\nError: EISDIR: illegal operation on a directory, read\nERROR Plugin load failed: hexo-server\nError: EISDIR: illegal operation on a directory, read\nERROR Plugin load failed: hexo-renderer-stylus\nError: EISDIR: illegal operation on a directory, read\n```\n\n解决办法，先用 `yarn` 分别移除，再重新安装，如下\n\n```vim\n## 先移除\nyarn remove hexo-renderer-marked\n\nyarn remove hexo-renderer-stylus\n\nyarn remove hexo-server\n\n## 再安装\nyarn add hexo-renderer-marked -S \n\nyarn add hexo-renderer-stylus -S\n\nyarn add hexo-server -S\n```\n\n在执行 `hexo g` ,顺利执行 👌\n\n----\n\n### 绑定域名\n\n我们已经可以通过 **GitHub** 分发给我的地址访问 **博客** ，但是，这对于我们这些爱 **折腾** 的 **程序猿👨‍💻‍** 来说，还不够，弄个自己的 **域名** 才够拉风😂。\n\n于是。。。\n\n开始绑定自己的 **域名** [lishaoy.net](https://lishaoy.net)\n\n然而，我们绑定 **域名** 之后，只支持 `http` 协议，这样我们在 **Google** 浏览器访问时，会有不安全标准，而且，很容易被插入广告，于是。。。**折腾** 走起🌝：搞个 `https`\n\n转入正题，经过一番 **折腾** ，采用第三方服务 [Netlify](https://app.netlify.com/sites/lishaoy/settings/domain#ssl-tls-certificate) 来提供免费的SSL/TLS证书。\n\n当然，这里我提供2种方式绑定域名，一种是 `HTTP` (不安全的网络协议)、一种是 `HTTPS` （安全的网络协议，在 **Google** 浏览器上回有一把小锁，如图）\n\n<img src=\"我的第一篇博客/lock.png\" alt=\"Netlity\" width=\"100%\" title=\"Google HTTPS 状态标识\" align=\"center\" />\n\n#### `HTTP` 绑定域名\n\n##### 设置域名解析规则\n\n首先，我们需要去运行商，新增域名解析规则，如图\n\n<img src=\"我的第一篇博客/domain.png\" alt=\"domain\" width=\"100%\" title=\"域名解析规则\" align=\"center\" />\n\n##### 新增 `CNAME` 文件\n\n配置好域名解析规则之后，还需要在项目的 `.\\source\\` 路径下新增 `CNAME` 文件，输入内容 `你的域名` ,如：[lishaoy.net](https://lishaoy.net)\n##### 重新新生成文件，推送到GitHub\n\n重新生成文件，运行 `hexo g`\n\n```vim\n    hexo g\n```\n推送 **GitHub**\n\n```vim\n    hexo d\n```\n\n-----\n\n#### `HTTPS` 绑定域名\n##### 注册 `Netlify` 账号\n\n首先，我们需要注册一个 [Netlify](https://app.netlify.com/sites/lishaoy/settings/domain#ssl-tls-certificate) 账号，地址：[Netlify](https://app.netlify.com/sites/lishaoy/settings/domain#ssl-tls-certificate) ，可以选择用 **GitHub** 注册。\n\n<img src=\"我的第一篇博客/netlify.png\" alt=\"Netlity\" width=\"100%\" title=\"Netlity Login\" align=\"center\" />\n\n##### 新增站点\n\n- 点击如图按钮 `New site from Git`,来新增 **站点**\n\n<img src=\"我的第一篇博客/netlify1.png\" alt=\"Netlity\" width=\"100%\" title=\"New site from Git\" align=\"center\" />\n\n- 然后，点击如图按钮 `GitHub` \n\n<img src=\"我的第一篇博客/netlify2.png\" alt=\"Netlity\" width=\"100%\" title=\"GitHub\" align=\"center\" />\n\n- 选择你的项目，比如我的 `MyBlog`\n\n<img src=\"我的第一篇博客/netlify3.png\" alt=\"Netlity\" width=\"100%\" title=\"Select Site\" align=\"center\" />\n\n- 点击 `Deploy site`\n\n<img src=\"我的第一篇博客/netlify4.png\" alt=\"Netlity\" width=\"100%\" title=\"Deploy site\" align=\"center\" />\n\n- 看到如图页面，表示成功，再点击 `Site settings` \n\n<img src=\"我的第一篇博客/netlify5.png\" alt=\"Netlity\" width=\"100%\" title=\"Getting started\" align=\"center\" />\n\n<img src=\"我的第一篇博客/netlify6.png\" alt=\"Netlity\" width=\"100%\" title=\"Site details\" align=\"center\" />\n\n- 再点击 `Change site name` 修改短名称，方便记忆\n\n- 在自己的域名管理中设置 **DNS** ，我使用的是 **阿里云** ，在管理界面添加如图规则\n\n<img src=\"我的第一篇博客/netlify7.png\" alt=\"Netlity\" width=\"100%\" title=\"设置域名规则\" align=\"center\" />\n\n- 在点击 `Domain management` 下的 `HTTPS` ，按照步骤完成操作，稍等片刻，即可看到我们的 **域名** 已经上锁 🔐 \n\n<img src=\"我的第一篇博客/netlify8.png\" alt=\"Netlity\" width=\"100%\" title=\"lishaoy.net上锁\" align=\"center\" />\n\n😝 😜 😄 😆 😂 🤣 ...\n\n----\n### 更换 `next` 主题\n\n`hexo` 的主题很多，你可以选择其他喜欢 ❤️ 的主题，我使用的是 `next` 主题。\n\n#### 安装 `next` 主题\n\n执行以下命令，安装 `next` 主题\n\n```vim\n    git clone https://github.com/iissnan/hexo-theme-next.git themes/next\n```\n\n#### 更改配置文件\n\n修改根目录下的 `./_config.yml` 文件，如下\n\n```vim\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: next\n```\n\n##### 重新新生成文件，推送到GitHub\n\n重新生成文件，运行 `hexo g`\n\n```vim\n    hexo g\n```\n推送 **GitHub**\n\n```vim\n    hexo d\n```\n\n也可以运行以下命令，启动一个本地服务，调试确定无问题之后再 推送到 **GitHub** \n\n```vim\n    hexo s --debug\n```\n\n本地服务启动后，可以在浏览器输入 `http://localhost:4000` 预览，如图\n\n<img src=\"我的第一篇博客/nextpage.png\" alt=\"next\" width=\"100%\" title=\"next 主题最初的样子🙃\" align=\"center\" />\n\n**本文到此告一段落，关于 `next` 主题美化的问题，可以参考以下链接文章 🤗**\n\n以下是我搭建 **博客** 参考的文章链接 👇 \n\n{% note default %} \n\n- [hexo的next主题个性化教程:打造炫酷网站](http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html)\n- [Hexo搭建博客教程](https://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/)\n- [Hexo博客搭建全攻略(二)：NexT主题配置](https://www.jianshu.com/p/d95cff938277)\n\n {% endnote %}\n","tags":["Blog"],"categories":["技术"]}]