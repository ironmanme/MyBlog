<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>persilee&#39;s Blog</title>
  
  <subtitle>Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.lishaoy.net/"/>
  <updated>2018-04-05T09:20:39.000Z</updated>
  <id>https://www.lishaoy.net/</id>
  
  <author>
    <name>李少颖（persilee）</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浅谈JavaScript作用域</title>
    <link href="https://www.lishaoy.net/javascriptScope.html"/>
    <id>https://www.lishaoy.net/javascriptScope.html</id>
    <published>2018-03-31T17:03:45.000Z</published>
    <updated>2018-04-05T09:20:39.000Z</updated>
    
    <content type="html"><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="/javascriptScope/javascriptScope01.png" class="full-image"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><p>今天我们来谈谈 <code>JavaScript</code> 的 <strong>作用域(javascript scope)</strong> ，这是老生常谈的话题，这里我们会从 <strong>作用域</strong> 开始，会延伸到 <strong>预解析规则（预编译）</strong>  、 <strong>表达式</strong> 、 <strong>变量提升</strong> 、 <strong>函数提升</strong> 、 <strong>匿名函数表达式</strong> 、 <strong>具名函数表达式</strong> 等，彻底搞明白作用域这些事 🤓 </p><hr><a id="more"></a><h3 id="变量提升和函数提升"><a href="#变量提升和函数提升" class="headerlink" title="变量提升和函数提升"></a>变量提升和函数提升</h3><p>在开始阐述之前，我们来看一段代码，看看结果是什么？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">alert(a);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123; alter(<span class="number">2</span>); &#125;</span><br><span class="line">alert(a);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line">alert(a);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">alert(a);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123; alter(<span class="number">4</span>); &#125;</span><br><span class="line">alert(a);</span><br><span class="line">a();</span><br></pre></td></tr></table></figure><p>这里先揭晓答案：<div class="note success"><ul><li>第一个 <code>alert(a)</code>  弹出 <code>function a(){ alter(4); }</code> 函数体</li><li>第二个 <code>alter(a)</code>  弹出 <code>function a(){ alter(4); }</code> 函数体</li><li>第三个 <code>alter(a)</code>  弹出 <strong>1</strong></li><li>第四个 <code>alter(a)</code>  弹出 <strong>3</strong></li><li>第五个 <code>alter(a)</code>  弹出 <strong>3</strong></li><li>最后一行报错 <code>a is not a function</code></li></ul></div>  </p><p>下面来分析一下这段代码：其实在 <code>javascript</code> 开始执行代码之前，有一个 <strong>预解析（预编译）</strong> 的过程，这个过程会产生 <strong>变量提升</strong> 和 <strong>函数提升</strong> ，其实整个执行过程可以分为两部分，方便理解：</p><ol><li><strong>预解析</strong>这个过程，会把 关键字 <code>var</code> 、 <code>function</code> 、 <strong>参数</strong> 提取出来</li></ol><p>上面这段代码 <strong>预解析</strong> 的过程是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第1行，没有关键字 ， 不解析</span></span><br><span class="line"><span class="comment">// 第2行，遇到 function 关键字，解析到全局的头部</span></span><br><span class="line">a = <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123; alter(<span class="number">2</span>); &#125;</span><br><span class="line"><span class="comment">// 第3行，没有关键字 ， 不解析</span></span><br><span class="line"><span class="comment">// 第4行，遇到关键字 var ， 解析到全局的头部</span></span><br><span class="line">a = <span class="literal">undefined</span></span><br><span class="line"><span class="comment">// 第5行，没有关键字 ， 不解析</span></span><br><span class="line"><span class="comment">// 第6行，遇到关键字 var ， 解析到全局的头部</span></span><br><span class="line">a = <span class="literal">undefined</span></span><br><span class="line"><span class="comment">// 第8行，遇到 function 关键字，解析到全局的头部</span></span><br><span class="line">a = <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123; alter(<span class="number">4</span>); &#125;</span><br><span class="line"><span class="comment">// 第9行，没有关键字 ， 不解析</span></span><br><span class="line"><span class="comment">// 第10行，a() 函数调用</span></span><br></pre></td></tr></table></figure><p>此时这里有4个同名变量 a ，依循规则是：<code>function</code> 优先与 <code>var</code>, 同名的后面覆盖前面的因此，<code>a = function a(){ alter(2); }</code> 替换掉下面的2个 <del><code>a = undefined</code></del> ，<code>a = function a(){ alter(4); }</code> 又替换掉 <del><code>a = function a(){ alter(2); }</code></del> ,最终只剩下 <code>a = function a(){ alter(4); }</code></p><p><strong>预解析（预编译）</strong> 后的代码样子是这样的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123; alter(<span class="number">4</span>); &#125;</span><br><span class="line">alert(a);</span><br><span class="line">alert(a);</span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">alert(a);</span><br><span class="line">a = <span class="number">3</span>;</span><br><span class="line">alert(a);</span><br><span class="line">alert(a);</span><br><span class="line">a();</span><br></pre></td></tr></table></figure><ol start="2"><li>执行代码，就是执行的这段代码，依次从上到下执行，最后的 <code>a()</code> 函数调用，这时的 <code>a</code> 已被 <strong>表达式</strong> 赋值成 <strong>3</strong> ，而报错 <code>a is not a function</code></li></ol><h3 id="全局作用域和局部作用域"><a href="#全局作用域和局部作用域" class="headerlink" title="全局作用域和局部作用域"></a>全局作用域和局部作用域</h3><p>再看这段代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(a);</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">fn1();</span><br><span class="line">alert(a);</span><br></pre></td></tr></table></figure><p>这里先揭晓答案：<div class="note success"><ul><li>第一个 <code>alert(a)</code> 弹出 <code>undefined</code></li><li>第二个 <code>alert(a)</code> 弹出 <strong>1</strong></li></ul></div></p><p><code>JavaScript</code> 的作用域只用两种，一个是全局的，一个是函数的，也称为 <strong>全局作用域</strong> 和 <strong>局部作用域</strong> ；<strong>局部作用域</strong> 可以访问 <strong>全局作用域</strong> 。但是 <strong>全局作用域</strong> 不能访问 <strong>局部作用域</strong> </p><p>同样用 <strong>预解析（预编译）</strong> 的方法来分析这段代码</p><ol><li><strong>预解析（预编译）</strong> 全局作用域</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第1行，遇到 var 关键字，解析到全局的头部</span></span><br><span class="line">a = <span class="literal">undefined</span></span><br><span class="line"><span class="comment">// 第2行，遇到 function 关键字，解析到全局的头部</span></span><br><span class="line">fn1 = <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(a);</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第3行，没有遇到关键字，不解析</span></span><br><span class="line"><span class="comment">// 第4行，没有遇到关键字，不解析</span></span><br></pre></td></tr></table></figure><ol start="2"><li>开始执行代码</li></ol><p>第1行，遇到表达式 <code>a = 1</code>, <strong>a</strong> 被赋值成 <strong>1</strong> <br>第6行，遇到函数调用 <code>fn1()</code> ,开始 <strong>预解析（预编译）</strong> 局部</p><ol start="3"><li><strong>预解析（预编译）</strong> 局部作用域</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第3行，没有遇到关键字，不解析</span></span><br><span class="line"><span class="comment">// 第4行，遇到 var 关键字，解析到局部</span></span><br><span class="line">a = <span class="literal">undefined</span></span><br></pre></td></tr></table></figure><ol start="4"><li>开始执行 <strong>局部</strong> 代码</li></ol><p>第3行，弹出 <code>undefined</code> 第4行，遇到表达式，把局部 <strong>a</strong> 改成 <strong>2</strong></p><ol start="5"><li>局部执行完成，继续执行全局</li></ol><p>第7行，弹出 <strong>1</strong> ，因为全局和局部是两个独立的作用域</p><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>如果，把上面👆代码，稍作修改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(a);</span><br><span class="line">    a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">fn1();</span><br><span class="line">alert(a);</span><br></pre></td></tr></table></figure><p>去掉了 <code>function</code> 里的 <code>var</code> ，结果就会不一样这次，输出的是：</p><ul><li>第一个 <code>alert</code> 弹出 <strong>1</strong></li><li>第二个 <code>alert</code> 弹出 <strong>2</strong>因为在解析局部是没有发现 <code>var a</code> ，如是在执行时，就会去全局查找，找到了全局的 <code>a = 1</code> ，所以 第一个 <code>alert</code> 弹出 <strong>1</strong> ，而不是 <code>undefined</code> ,这个就是 <strong>作用域连</strong></li></ul><h3 id="匿名函数表达式、具名函数表达式"><a href="#匿名函数表达式、具名函数表达式" class="headerlink" title="匿名函数表达式、具名函数表达式"></a>匿名函数表达式、具名函数表达式</h3><p>在来看看这段代码👇</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    foo();</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    foo();</span><br><span class="line">    <span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    foo();</span><br><span class="line">    <span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a &gt; <span class="number">3</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(++a);</span><br><span class="line">        foo();</span><br><span class="line">    &#125;;</span><br><span class="line">    foo();</span><br><span class="line">    bar();</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><p>先揭晓答案：<div class="note success"><ul><li>第1个 <code>foo()</code> 输出的是 <strong>1</strong></li><li>第2个 <code>foo()</code> 输出的是 <strong>1</strong></li><li>第3个 <code>foo()</code> 输出的是 <strong>2</strong></li><li>第4个 <code>foo()</code> 输出的是 <strong>2</strong></li><li>最后的 <code>bar()</code> 输出的是 <strong>4</strong></li></ul></div></p><p>以上代码包含了 <strong>函数声明</strong> 、 <strong>匿名函数表达式</strong> 、 <strong>具名函数表达式</strong> ，<strong>匿名函数表达式</strong> 、 <strong>具名函数表达式</strong> 是把函数体赋值给一个变量，因此拥有和变量相同的特性 <strong>变量提升</strong> ，而 <strong>具名函数表达式</strong> 的函数名只能在函数内部使用。</p><p>了解了这些，再来分析段代码</p><ul><li><strong>全局预解析</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="literal">undefined</span></span><br><span class="line">fn = <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>执行代码</strong>第1行，遇到表达式,把 <strong>a</strong> 的值改变成3 <br>最后行，遇到函数调用，重新 <strong>预解析</strong> 局部</p></li><li><p><strong>局部预解析</strong></p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第4行，遇到 function 关键字，解析到局部的头部</span></span><br><span class="line">foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第8行，遇到 var 关键字，解析到局部的头部</span></span><br><span class="line">foo = <span class="literal">undefined</span></span><br><span class="line"><span class="comment">// 第12行，遇到 var 关键字，解析到局部的头部</span></span><br><span class="line">bar = <span class="literal">undefined</span></span><br></pre></td></tr></table></figure><p>由于有两个同名变量 <code>foo</code> ，遵循 <code>function</code> 优先 <code>var</code> 因此， <del><code>foo = undefined</code></del> 被干掉</p><p><strong>局部预解析</strong> 完之后的代码应该是这个样子👇</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> bar;</span><br><span class="line">    foo();</span><br><span class="line">    foo();</span><br><span class="line">    foo = <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    foo();</span><br><span class="line">    bar = <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a &gt; <span class="number">3</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(++a);</span><br><span class="line">        foo();</span><br><span class="line">    &#125;;</span><br><span class="line">    foo();</span><br><span class="line">    bar();</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><ul><li><strong>执行局部代码</strong> <br>第1个 <code>foo()</code> 输出的是 <strong>1</strong> <br>第2个 <code>foo()</code> 输出的是 <strong>1</strong> <br>第3个 <code>foo()</code> 输出的是 <strong>2</strong> <br>第4个 <code>foo()</code> 输出的是 <strong>2</strong> ，注意这个 <code>foo()</code> 输出的是上面 <code>foo = function foo() {console.log(2);}</code> 的内容，因为 <strong>具名函数表达式</strong> 的函数名只能在函数内部使用，在外部无法访问。<br>最后的 <code>bar()</code> 输出的是 <strong>4</strong> ，这里才是输出 <code>function foo() {if(a &gt; 3) return;console.log(++a);foo();}</code> 里的内容，而且，这个函数体内也有自身的调用，结果 <code>a</code> 变量 <strong>+1</strong> ，说明可以调用，其实，可以用 <code>bar.name</code> 输出的就是 <code>foo</code></li></ul><p><strong>所以，注意：</strong></p><div class="note danger"><ul><li><code>bar = function foo()</code> , 不要用这种写法</li><li>不推荐使用 <strong>匿名函数表达式</strong> ，有以下 👇 几个缺点<ul><li>在追踪栈中没函数名，调试困难</li><li>如果需要引用自身，只能用非标准的 <code>arguments.callee</code>（ES5严格模式禁用）</li></ul></li></ul></div>]]></content>
    
    <summary type="html">
    
      &lt;span itemprop=&quot;image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;/javascriptScope/javascriptScope01.png&quot; class=&quot;full-image&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;p&gt;今天我们来谈谈 &lt;code&gt;JavaScript&lt;/code&gt; 的 &lt;strong&gt;作用域(javascript scope)&lt;/strong&gt; ，这是老生常谈的话题，这里我们会从 &lt;strong&gt;作用域&lt;/strong&gt; 开始，会延伸到 &lt;strong&gt;预解析规则（预编译）&lt;/strong&gt;  、 &lt;strong&gt;表达式&lt;/strong&gt; 、 &lt;strong&gt;变量提升&lt;/strong&gt; 、 &lt;strong&gt;函数提升&lt;/strong&gt; 、 &lt;strong&gt;匿名函数表达式&lt;/strong&gt; 、 &lt;strong&gt;具名函数表达式&lt;/strong&gt; 等，彻底搞明白作用域这些事 🤓 &lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://www.lishaoy.net/categories/JavaScript/"/>
    
    
      <category term="javascript" scheme="https://www.lishaoy.net/tags/javascript/"/>
    
      <category term="scope" scheme="https://www.lishaoy.net/tags/scope/"/>
    
      <category term="变量提升" scheme="https://www.lishaoy.net/tags/%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/"/>
    
      <category term="预编译" scheme="https://www.lishaoy.net/tags/%E9%A2%84%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>初 ☘ 夏 ☀️</title>
    <link href="https://www.lishaoy.net/summer.html"/>
    <id>https://www.lishaoy.net/summer.html</id>
    <published>2018-03-30T18:13:59.000Z</published>
    <updated>2018-03-30T18:50:11.000Z</updated>
    
    <content type="html"><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="/summer/summer01.png" class="full-image"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><div class="text-center"><strong>七月的风懒懒的 连云都变热热的 夏天的风正暖暖吹过 穿过头发穿过耳朵……</strong></div><hr><table class="per-table">    <tr>        <td><strong>摄影/后期：</strong></td>        <td>子木</td>    </tr>    <tr>        <td><strong>模特：</strong></td>        <td>Danny</td>    </tr>    <tr>        <td><strong>地点：</strong></td>        <td>花卉世界</td>    </tr>    <tr>        <td><strong>拍摄于：</strong></td>        <td>2015年7月12</td>    </tr></table><a id="more"></a><p><br></p><p><img src="/summer/summer02.png" alt="hexo" width="100%" align="center"></p><p><img src="/summer/summer04.png" alt="hexo" width="100%" align="center"></p><p><img src="/summer/summer01.png" alt="hexo" width="100%" align="center"></p><p><img src="/summer/summer08.png" alt="hexo" width="100%" align="center"></p><p><img src="/summer/summer05.png" alt="hexo" width="100%" align="center"></p><p><img src="/summer/summer09.png" alt="hexo" width="100%" align="center"></p><p><img src="/summer/summer06.png" alt="hexo" width="100%" align="center"></p><p><img src="/summer/summer07.png" alt="hexo" width="100%" align="center"></p><p><img src="/summer/summer03.png" alt="hexo" width="100%" align="center"></p>]]></content>
    
    <summary type="html">
    
      &lt;span itemprop=&quot;image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;/summer/summer01.png&quot; class=&quot;full-image&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;strong&gt;七月的风懒懒的 连云都变热热的 夏天的风正暖暖吹过 穿过头发穿过耳朵……&lt;/strong&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;table class=&quot;per-table&quot;&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;strong&gt;摄影/后期：&lt;/strong&gt;&lt;/td&gt;
        &lt;td&gt;子木&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;strong&gt;模特：&lt;/strong&gt;&lt;/td&gt;
        &lt;td&gt;Danny&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;strong&gt;地点：&lt;/strong&gt;&lt;/td&gt;
        &lt;td&gt;花卉世界&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;strong&gt;拍摄于：&lt;/strong&gt;&lt;/td&gt;
        &lt;td&gt;2015年7月12&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="摄影" scheme="https://www.lishaoy.net/categories/%E6%91%84%E5%BD%B1/"/>
    
    
      <category term="摄影" scheme="https://www.lishaoy.net/tags/%E6%91%84%E5%BD%B1/"/>
    
      <category term="初夏" scheme="https://www.lishaoy.net/tags/%E5%88%9D%E5%A4%8F/"/>
    
      <category term="花裙子" scheme="https://www.lishaoy.net/tags/%E8%8A%B1%E8%A3%99%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>girlfriends</title>
    <link href="https://www.lishaoy.net/shenzhenUuniversity.html"/>
    <id>https://www.lishaoy.net/shenzhenUuniversity.html</id>
    <published>2018-03-29T17:11:45.000Z</published>
    <updated>2018-03-30T18:05:42.000Z</updated>
    
    <content type="html"><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="/shenzhenUuniversity/girlfriends02.png" class="full-image"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><div class="text-center"><strong>悲伤一起哭，欢乐一起笑，好书一起读，好歌一起听……</strong></div><hr><table class="per-table">    <tr>        <td><strong>摄影/后期：</strong></td>        <td>子木</td>    </tr>    <tr>        <td><strong>模特：</strong></td>        <td>Donna and cherry</td>    </tr>    <tr>        <td><strong>地点：</strong></td>        <td>深圳大学天台</td>    </tr>    <tr>        <td><strong>拍摄于：</strong></td>        <td>2015年8月23</td>    </tr></table><a id="more"></a><p><br></p><p><img src="/shenzhenUuniversity/girlfriends01.png" alt="hexo" width="100%" align="center"></p><p><img src="/shenzhenUuniversity/girlfriends02.png" alt="hexo" width="100%" align="center"></p><p><img src="/shenzhenUuniversity/girlfriends03.png" alt="hexo" width="100%" align="center"></p><p><img src="/shenzhenUuniversity/girlfriends04.png" alt="hexo" width="100%" align="center"></p><p><img src="/shenzhenUuniversity/girlfriends05.png" alt="hexo" width="100%" align="center"></p><p><img src="/shenzhenUuniversity/girlfriends06.png" alt="hexo" width="100%" align="center"></p>]]></content>
    
    <summary type="html">
    
      &lt;span itemprop=&quot;image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;/shenzhenUuniversity/girlfriends02.png&quot; class=&quot;full-image&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;strong&gt;悲伤一起哭，欢乐一起笑，好书一起读，好歌一起听……&lt;/strong&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;table class=&quot;per-table&quot;&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;strong&gt;摄影/后期：&lt;/strong&gt;&lt;/td&gt;
        &lt;td&gt;子木&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;strong&gt;模特：&lt;/strong&gt;&lt;/td&gt;
        &lt;td&gt;Donna and cherry&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;strong&gt;地点：&lt;/strong&gt;&lt;/td&gt;
        &lt;td&gt;深圳大学天台&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;strong&gt;拍摄于：&lt;/strong&gt;&lt;/td&gt;
        &lt;td&gt;2015年8月23&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="摄影" scheme="https://www.lishaoy.net/categories/%E6%91%84%E5%BD%B1/"/>
    
    
      <category term="摄影" scheme="https://www.lishaoy.net/tags/%E6%91%84%E5%BD%B1/"/>
    
      <category term="闺蜜" scheme="https://www.lishaoy.net/tags/%E9%97%BA%E8%9C%9C/"/>
    
      <category term="深圳大学" scheme="https://www.lishaoy.net/tags/%E6%B7%B1%E5%9C%B3%E5%A4%A7%E5%AD%A6/"/>
    
      <category term="天台" scheme="https://www.lishaoy.net/tags/%E5%A4%A9%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>猫吧</title>
    <link href="https://www.lishaoy.net/catBar20150927.html"/>
    <id>https://www.lishaoy.net/catBar20150927.html</id>
    <published>2018-03-28T10:20:47.000Z</published>
    <updated>2018-03-30T17:59:39.000Z</updated>
    
    <content type="html"><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="/catBar20150927/catBar04.png" class="full-image"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><div class="text-center"><strong>很久之前拍的照片,猫吧里貌似有5只大肥猫 🐱 …</strong></div><hr><table class="per-table">    <tr>        <td><strong>摄影/后期：</strong></td>        <td>子木</td>    </tr>    <tr>        <td><strong>模特：</strong></td>        <td>👩‍⚖️‍ </td>    </tr>    <tr>        <td><strong>地点：</strong></td>        <td>深圳福田 🐱 </td>    </tr>    <tr>        <td><strong>拍摄于：</strong></td>        <td>2015年9月27</td>    </tr></table><a id="more"></a><p><br></p><p><img src="/catBar20150927/catBar01.png" alt="hexo" width="100%" align="center"></p><p><img src="/catBar20150927/catBar02.png" alt="hexo" width="100%" align="center"></p><p><img src="/catBar20150927/catBar03.png" alt="hexo" width="100%" align="center"></p><p><img src="/catBar20150927/catBar04.png" alt="hexo" width="100%" align="center"></p><p><img src="/catBar20150927/catBar05.png" alt="hexo" width="100%" align="center"></p><p><img src="/catBar20150927/catBar06.png" alt="hexo" width="100%" align="center"></p><p><img src="/catBar20150927/catBar07.png" alt="hexo" width="100%" align="center"></p><p><img src="/catBar20150927/catBar09.png" alt="hexo" width="100%" align="center"></p><p><img src="/catBar20150927/catBar10.png" alt="hexo" width="100%" align="center"></p><p><img src="/catBar20150927/catBar11.png" alt="hexo" width="100%" align="center"></p><p><img src="/catBar20150927/catBar08.png" alt="hexo" width="100%" align="center"></p><p><img src="/catBar20150927/catBar12.png" alt="hexo" width="100%" align="center"></p>]]></content>
    
    <summary type="html">
    
      &lt;span itemprop=&quot;image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;/catBar20150927/catBar04.png&quot; class=&quot;full-image&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;div class=&quot;text-center&quot;&gt;
&lt;strong&gt;很久之前拍的照片,猫吧里貌似有5只大肥猫 🐱 …&lt;/strong&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;table class=&quot;per-table&quot;&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;strong&gt;摄影/后期：&lt;/strong&gt;&lt;/td&gt;
        &lt;td&gt;子木&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;strong&gt;模特：&lt;/strong&gt;&lt;/td&gt;
        &lt;td&gt;👩‍⚖️‍ &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;strong&gt;地点：&lt;/strong&gt;&lt;/td&gt;
        &lt;td&gt;深圳福田 🐱 &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;strong&gt;拍摄于：&lt;/strong&gt;&lt;/td&gt;
        &lt;td&gt;2015年9月27&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="摄影" scheme="https://www.lishaoy.net/categories/%E6%91%84%E5%BD%B1/"/>
    
    
      <category term="猫吧" scheme="https://www.lishaoy.net/tags/%E7%8C%AB%E5%90%A7/"/>
    
      <category term="cat" scheme="https://www.lishaoy.net/tags/cat/"/>
    
      <category term="摄影" scheme="https://www.lishaoy.net/tags/%E6%91%84%E5%BD%B1/"/>
    
      <category term="照片" scheme="https://www.lishaoy.net/tags/%E7%85%A7%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>如何用 CSS + HTML + JS 创建桌面应用</title>
    <link href="https://www.lishaoy.net/nwjsElectronjs.html"/>
    <id>https://www.lishaoy.net/nwjsElectronjs.html</id>
    <published>2018-03-27T17:42:26.000Z</published>
    <updated>2018-03-28T15:23:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近研究了一下基于 <code>Chromium</code> 定制浏览器的方案，查阅了大量资料，具体方案也有了大概的蓝图 😉 </p><a id="more"></a><p>在阐述方案之前，先要了解几个名词：</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><h4 id="Chromium"><a href="#Chromium" class="headerlink" title="Chromium"></a>Chromium</h4><blockquote><p>Chromium是一个由Google主导开发的网页浏览器，以BSD许可证等多重自由版权发行并开放源代码。Chromium的开发可能早自2006年即开始。</p></blockquote><blockquote><p>Chromium是Google为发展自家的浏览器Google Chrome而打开的项目，所以Chromium相当于Google Chrome的工程版或实验版（尽管Google Chrome本身也有β版），新功能会率先在Chromium上开放，待验证后才会应用在Google Chrome上，故Google Chrome的功能会相对落后但较稳定。 —— <a href="https://zh.wikipedia.org/wiki/Chromium#cite_note-3" target="_blank" rel="noopener">维基百科</a></p></blockquote><h4 id="CEF"><a href="#CEF" class="headerlink" title="CEF"></a>CEF</h4><blockquote><p>Chromium Embedded Framework (CEF)是个基于Google Chromium项目的开源Web browser控件，支持Windows, Linux, Mac平台。除了提供C/C++接口外，也有其他语言的移植版。</p></blockquote><blockquote><p>因为基于Chromium，所以CEF支持Webkit &amp; Chrome中实现的HTML5的特性，并且在性能上面，也比较接近Chrome。CEF还提供的如下特性：自定义插件、自定义协议、自定义JavaScript对象和扩展；可控制的resource loading, navigation, context menus等等  —— <a href="https://baike.baidu.com/item/CEF/20837917?fr=aladdin" target="_blank" rel="noopener">百度百科</a></p></blockquote><h4 id="NW"><a href="#NW" class="headerlink" title="NW"></a>NW</h4><blockquote><p>NW.js 是基于 Chromium 和 Node.js 运行的， 以前也叫nodeWebkit。这就给了你使用HTML和JavaScript来制作桌面应用的可能。在应用里你可以直接调用Node.js的各种api以及现有的第三方包。因为Chromium和 Node.js 的跨平台，那么你的应用也是可以跨平台的。—— <a href="https://segmentfault.com/a/1190000003870613" target="_blank" rel="noopener">SegmentFault</a></p></blockquote><h4 id="Electron"><a href="#Electron" class="headerlink" title="Electron"></a>Electron</h4><blockquote><p>Electron（最初名为Atom Shell）是GitHub开发的一个开源框架。它允许使用Node.js（作为后端）和Chromium（作为前端）完成桌面GUI应用程序的开发。Electron现已被多个开源Web应用程序用于前端与后端的开发，著名项目包括GitHub的Atom和微软的Visual Studio Code。—— <a href="https://zh.wikipedia.org/wiki/Electron_%28%E8%BD%AF%E4%BB%B6%E6%A1%86%E6%9E%B6%29" target="_blank" rel="noopener">维基百科</a></p></blockquote><p>所以 ，<strong>CEF</strong>、<strong>nw</strong>、<strong>Electron</strong> 都是基于 <code>Chromium</code> 的开源框架，可以实现所需的定制浏览器需求，准确的讲应该是用 <code>HTML5</code> 、 <code>CSS3</code> 、 <code>JavaScript</code> 来制作拥有漂亮界面的<strong>桌面应用</strong>。</p><p>就是一个本地客户端应用程序使用一个内置的浏览器内核渲染前端界面，另一方面还可以调用本地系统级API，实现本地应用程序的各种功能。</p><hr><h3 id="市场调研"><a href="#市场调研" class="headerlink" title="市场调研"></a>市场调研</h3><p>通过查阅大量资料得知，以各企业的线上产品及使用的技术供参考。</p><h4 id="CEF-案例"><a href="#CEF-案例" class="headerlink" title="CEF 案例"></a>CEF 案例</h4><p>据 <strong>CEF</strong> 官方介绍，以下（如图）桌面应用在使用 <code>CEF</code>。</p><p><img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/CEF.png?raw=true" alt="CEF" width="85%" title="who is using CEF" align="center"></p><p>国内桌面应用有：<a href="http://note.youdao.com" target="_blank" rel="noopener">有道云笔记</a> <i style="color:#aaa">（网易）</i>、<a href="https://www.dingtalk.com/?source=2202&amp;lwfrom=2017120202092064209309201" target="_blank" rel="noopener">钉钉</a><i style="color:#aaa">（阿里巴巴）</i>、<a href="https://im.qq.com/pcqq/" target="_blank" rel="noopener">QQ</a><i style="color:#aaa">（腾讯）</i> 等，查看安装后目录及文件，可以看出 <strong>有道云笔记</strong>、<strong>钉钉</strong> 是使用的是<code>CEF</code>，而 <strong>钉钉</strong> 界面是使用 <code>AngularJs</code>，据了解后端应该用了<code>C++</code>和<code>Python</code>。</p><p><strong>QQ</strong> 很早之前就通过内嵌 <strong>IE</strong> 来实现一些功能和界面。从2013年开始，<strong>QQ</strong> 引入了 <code>CEF</code>，对一些之前用 <strong>IE</strong> 的地方进行了替换。</p><p><img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520329975606.png?raw=true" alt="no-shadow" title="钉钉Mac版目录"></p><p><img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520330256871.png?raw=true" alt="no-shadow" title="钉钉Mac版应用界面"></p><h4 id="NW-案例"><a href="#NW-案例" class="headerlink" title="NW 案例"></a>NW 案例</h4><p>这个是 <strong><a href="https://nwjs.io" target="_blank" rel="noopener">NW</a></strong> 官方给出的使用 <code>nw.js</code> 的应用列表：<a href="https://github.com/nwjs/nw.js/wiki/List-of-apps-and-companies-using-nw.js" target="_blank" rel="noopener">https://github.com/nwjs/nw.js/wiki/List-of-apps-and-companies-using-nw.js</a> </p><p>而国内的有，比如微信开发工具等，是基于 <code>nw.js</code> 开发的。</p><p><img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520571438918.png?raw=true" alt="no-shadow" title="微信开发工具Mac版目录"></p><p><img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520571517344.png?raw=true" alt="no-shadow" title="微信开发工具Mac版"></p><h4 id="Electron-案例"><a href="#Electron-案例" class="headerlink" title="Electron 案例"></a>Electron 案例</h4><p>这个是 <strong><a href="https://electronjs.org" target="_blank" rel="noopener">Electron</a></strong> 官方给出的是用 <code>electron</code> 的应用列表：<a href="https://electronjs.org/apps" target="_blank" rel="noopener">https://electronjs.org/apps</a></p><p>如图，<strong>Electron</strong> 已被像 <strong>微软</strong>、 <strong>Facebook</strong>、 <strong>Slack</strong> 和 <strong>Docker</strong> 这样的公司用于创建应用程序。</p><p><img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520668439676.png?raw=true" alt="electron" width="85%" title="electron 应用" align="center"></p><p>我所用的编辑器 <strong>Visual Studio Code</strong> 就是基于 <code>electron</code> 开发的</p><p><img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520669844227.png?raw=true" alt="no-shadow" title="VS Code Mac版"></p><hr><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>下面会分别用 <code>nw.js</code> 和 <code>electron</code> 做一个简单的 <strong>Dome</strong>。</p><p>由于 <strong>CEF</strong> 文档资料少且原生是 <code>C\C++</code> ，虽然官方给出了 <code>java</code> 版的 <strong>JCEF</strong> ，开发起来效率较低，故此不知演示。</p><p>这个是 <strong><a href="https://bitbucket.org/chromiumembedded/cef" target="_blank" rel="noopener">CEF</a></strong> 官网，在 <em>External Projects</em> 章节列出支持语言：</p><blockquote><ul><li>Net (CEF3) - <a href="https://github.com/cefsharp/CefSharp" target="_blank" rel="noopener">https://github.com/cefsharp/CefSharp</a></li><li>Net (CEF1) - <a href="https://bitbucket.org/fddima/cefglue" target="_blank" rel="noopener">https://bitbucket.org/fddima/cefglue</a></li><li>Net/Mono (CEF3) - <a href="https://bitbucket.org/xilium/xilium.cefglue" target="_blank" rel="noopener">https://bitbucket.org/xilium/xilium.cefglue</a></li><li>Net (CEF3) - <a href="https://bitbucket.org/chromiumfx/chromiumfx" target="_blank" rel="noopener">https://bitbucket.org/chromiumfx/chromiumfx</a></li><li>Delphi (CEF1) - <a href="http://code.google.com/p/delphichromiumembedded/" target="_blank" rel="noopener">http://code.google.com/p/delphichromiumembedded/</a></li><li>Delphi (CEF3) - <a href="https://github.com/hgourvest/dcef3" target="_blank" rel="noopener">https://github.com/hgourvest/dcef3</a></li><li>Delphi (CEF3) - <a href="https://github.com/salvadordf/CEF4Delphi" target="_blank" rel="noopener">https://github.com/salvadordf/CEF4Delphi</a></li><li>Go - <a href="https://github.com/CzarekTomczak/cef2go" target="_blank" rel="noopener">https://github.com/CzarekTomczak/cef2go</a></li><li>Java - <a href="https://bitbucket.org/chromiumembedded/java-cef" target="_blank" rel="noopener">https://bitbucket.org/chromiumembedded/java-cef</a></li><li>Java - <a href="http://code.google.com/p/javacef/" target="_blank" rel="noopener">http://code.google.com/p/javacef/</a></li><li>Python - <a href="http://code.google.com/p/cefpython/" target="_blank" rel="noopener">http://code.google.com/p/cefpython/</a></li></ul></blockquote><h4 id="NW-gt-Hello-world"><a href="#NW-gt-Hello-world" class="headerlink" title="NW =&gt; Hello, world!"></a>NW =&gt; Hello, world!</h4><p>从一个简单的例子来让我们看看如何编写一个 <strong>NW</strong> 应用。</p><ul><li><strong>第一步</strong> 创建 <code>package.json</code> 配置文件</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"helloworld"</span>,</span><br><span class="line">    <span class="string">"main"</span>: <span class="string">"index.html"</span>,</span><br><span class="line">    <span class="string">"icon"</span>: <span class="string">"img/app.png"</span>,</span><br><span class="line">    <span class="string">"window"</span>: &#123;</span><br><span class="line">        <span class="string">"icon"</span>: <span class="string">"img/app.png"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>main</code> 配置应用打开首页，<code>name</code> 配置应用的名称。</p><ul><li><strong>第二步</strong> 创建 <code>index.html</code> </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Holle NW<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    html,</span></span><br><span class="line"><span class="undefined">    body &#123;</span></span><br><span class="line"><span class="undefined">        height: 100%;</span></span><br><span class="line"><span class="undefined">        margin: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    .box &#123;</span></span><br><span class="line"><span class="undefined">        height: 100%;</span></span><br><span class="line"><span class="undefined">        display: flex; /* css3 弹性盒子 */</span></span><br><span class="line"><span class="undefined">        justify-content: center;</span></span><br><span class="line"><span class="undefined">        align-items: center;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Holle NW!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是一个简单的 <strong>HTML</strong> 文件，加入了一点CSS，目的是让 <strong>Holle NW!</strong> 水平垂直居中。</p><ul><li><strong>第三步</strong> 打包应用</li></ul><p>这里我只测试了 <strong>Mac</strong> 和 <strong>Windows</strong> 的打包，<strong>Linux</strong> 没有测试。</p><p><strong>Mac打包应用：</strong> 在项目根目录执行以下命令，把所有文件压缩成 <code>app.nw</code> 文件。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip -r app.nw *</span><br></pre></td></tr></table></figure><p>然后把<code>app.nw</code> 文件放到 <code>nwjs.app/Contents/Resources/</code> 目录下即可，效果如图：</p><p><img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520711078780.png?raw=true" alt="no-shadow" title="Mac下运行效果"></p><p><strong>Windows打包应用：</strong>  将应用的所有相关文件打成一个名为<code>package.nw</code> 的压缩包，将<code>package.nw</code> 与<strong>NW</strong>可执行文件放到相同目录即可，效果如图：</p><p><img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520711343860.png?raw=true" alt="no-shadow" title="Windons下运行效果 "></p><hr><h4 id="Electron-gt-Hello-world"><a href="#Electron-gt-Hello-world" class="headerlink" title="Electron =&gt; Hello, world!"></a>Electron =&gt; Hello, world!</h4><p><strong>Electron</strong> 可以让你使用纯 <code>JavaScript</code> 调用丰富的原生(操作系统) <strong>APIs</strong> 来创造桌面应用。</p><p>只需3个文件就可以构建一个简单的应用</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">your-app/</span><br><span class="line">  ├── package.json</span><br><span class="line">  ├── main.js</span><br><span class="line">  └── index.html</span><br></pre></td></tr></table></figure><ul><li><strong>第一步</strong> 创建配置文件</li></ul><p>首先需要安装 <strong>Node</strong> 环境，用 <code>npm</code> 来创建一个应用的配置文件 <code>package.json</code></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p>在 <code>package.json</code> 里新增启动命令 <code>start</code> </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"your-app"</span>,</span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"0.1.0"</span>,</span><br><span class="line">    <span class="string">"main"</span>: <span class="string">"main.js"</span>,</span><br><span class="line">    <span class="string">"scripts"</span>: &#123;</span><br><span class="line">      <span class="string">"start"</span>: <span class="string">"electron ."</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>第二步</strong> 创建入口文件 <code>main.js</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;app, BrowserWindow&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">        width: <span class="number">1008</span>,</span><br><span class="line">        height: <span class="number">759</span></span><br><span class="line">    &#125;)</span><br><span class="line">      </span><br><span class="line">    win.loadURL(url.format(&#123;</span><br><span class="line">        pathname: path.join(__dirname, <span class="string">'index.html'</span>),</span><br><span class="line">        protocol: <span class="string">'file:'</span>,</span><br><span class="line">        slashes: <span class="literal">true</span></span><br><span class="line">    &#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">'ready'</span>, createWindow)</span><br></pre></td></tr></table></figure><p>代码已经很清晰直观，<code>createWindow</code> 创建一个桌面窗口，而大小由 <code>width</code>、<code>height</code> 控制，<code>win.loadURL</code> 用来加载页面。</p><ul><li><strong>第三步</strong> 创建展示文件 <code>index.html</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello Electron<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    html,</span></span><br><span class="line"><span class="undefined">    body &#123;</span></span><br><span class="line"><span class="undefined">        height: 100%;</span></span><br><span class="line"><span class="undefined">        margin: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    .box &#123;</span></span><br><span class="line"><span class="undefined">        height: 100%;</span></span><br><span class="line"><span class="undefined">        display: flex;</span></span><br><span class="line"><span class="undefined">        /* css3 弹性盒子 */</span></span><br><span class="line"><span class="undefined">        justify-content: center;</span></span><br><span class="line"><span class="undefined">        align-items: center;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello Electron!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是一个简单的 <strong>HTML</strong> 文件，加入了一点CSS，目的是让 <strong>Holle NW!</strong> 水平垂直居中。</p><ul><li><strong>第四步</strong> 打包应用</li></ul><p><strong>打包应用：</strong> 打包应用可以是用 <code>electron-packager</code> 工具进行打包，需要在 <code>package.json</code> 配置以下命令</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "start": "electron .",</span><br><span class="line">    "packager": "electron-packager ./ HelloElectron --all --out ./OutApp --version 0.0.1 --overwrite --ignore=node_modules --icon=./app/img/app.ico"</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>然后，运行在终端执行命令 <code>npm run packagerMac</code> 即可打包<code>linux</code>、<code>Mac</code>、<code>windows</code> 三大平台应用包，效果如图：</p><p><img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520791859473.png?raw=true" alt="打包后的应用" width="60%" title="打包后的应用" align="center"></p><p><img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520790145115.png?raw=true" alt="no-shadow" title="Mac下运行效果"></p><p><img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520792416456.png?raw=true" alt="no-shadow" title="Windows下运行效果"></p><hr><h3 id="GitHub关注度和活跃度"><a href="#GitHub关注度和活跃度" class="headerlink" title="GitHub关注度和活跃度"></a>GitHub关注度和活跃度</h3><p>首先我们需要先了解一下 <strong>GitHub</strong> 的以下三个状态的意思，</p><p><img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520857435681.png?raw=true" alt="no-shadow"></p><p><img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520857536175.png?raw=true" alt="no-shadow"> ：表示你以后会关注这个项目的所有动态，这个项目以后只要发生变动，如被别人提交了 <code>pull request</code>、被别人发起了<code>issue</code> 等等情况，你都会在自己的个人通知中心，收到一条通知消息，如果你设置了个人邮箱，那么你的邮箱也可能收到相应的邮件。</p><p><img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520857569746.png?raw=true" alt="no-shadow">：表示你喜欢这个项目或者通俗点，可以把他理解成朋友圈的点赞，表示对这个项目的支持。</p><p><img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520857709924.png?raw=true" alt="no-shadow">：当选择 <code>fork</code>，相当于你自己有了一份原项目的拷贝，当然这个拷贝只是针对当时的项目文件，如果后续原项目文件发生改变，你必须通过其他的方式去同步。<i style="color:#aaa">（一般用于修改<strong>bug</strong>和优化项目或者在此项目上开发新功能等）</i></p><h4 id="CEF-1"><a href="#CEF-1" class="headerlink" title="CEF"></a>CEF</h4><p><strong>CEF</strong> 在 <strong>GitHub</strong> 找不到项目，这个<a href="https://bitbucket.org/chromiumembedded/cef/overview" target="_blank" rel="noopener">官网</a> 提供的数据，如图<i style="color:#aaa">（由于在<strong>GitHub</strong> 没有项目，相关数据无法准确统计）</i>。</p><p><img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520855809138.png?raw=true" alt="CEF关注度" title="CEF关注度"></p><h4 id="NW-1"><a href="#NW-1" class="headerlink" title="NW"></a>NW</h4><p><strong>NW关注度：</strong> <img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520856387728.png?raw=true" alt="Alt text"></p><p><strong>NW活跃度：</strong>如图</p><p><img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520858064076.png?raw=true" alt="2011年~2018年提交量" title="2011年~2018年提交量"></p><h4 id="Electron-1"><a href="#Electron-1" class="headerlink" title="Electron"></a>Electron</h4><p><strong>Electron关注度：</strong> <img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520858325207.png?raw=true" alt="no-shadow"></p><p><strong>活跃度：</strong> 如图</p><p><img src="https://github.com/persilee/nwjs_electronjs/blob/master/desktop_application/1520858451333.png?raw=true" alt="electron2013年~2018年提交量" title="electron2013年~2018年提交量"></p><hr><p>通过以上的 <strong>市场调研</strong>、<strong>实战</strong>、<strong>GitHub关注度和活跃度</strong> 等 <strong>Electron</strong> 都占有优势，如下</p><ul><li>市场案例较多，各大型企业都在使用</li><li>开发实战代码更直观，容易理解和维护，各种文档健全、网络资料较多且质量较高，周边辅助工具齐全，开发效率可大大提高</li><li><strong>GitHub</strong> 关注度和活跃度持续攀升</li></ul><p>所有结合以上情况，之后会用以下技术栈做一个完善的案例</p><ul><li><strong>跨平台桌面应用框架：</strong><code>electron</code>  <i style="color:#aaa">（Chromium + Node.js）</i></li><li><strong>UI库：</strong> <code>iView</code></li><li><strong>js框架：</strong> <code>Vue.js</code></li><li><strong>自动化构建工具：</strong>  <code>webpack</code></li><li><strong>HTML5、CSS3、ES6</strong></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近研究了一下基于 &lt;code&gt;Chromium&lt;/code&gt; 定制浏览器的方案，查阅了大量资料，具体方案也有了大概的蓝图 😉 &lt;/p&gt;
    
    </summary>
    
      <category term="Node" scheme="https://www.lishaoy.net/categories/Node/"/>
    
    
      <category term="nwjs" scheme="https://www.lishaoy.net/tags/nwjs/"/>
    
      <category term="electron" scheme="https://www.lishaoy.net/tags/electron/"/>
    
      <category term="node" scheme="https://www.lishaoy.net/tags/node/"/>
    
      <category term="Chromium" scheme="https://www.lishaoy.net/tags/Chromium/"/>
    
      <category term="桌面应用" scheme="https://www.lishaoy.net/tags/%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>用 Hexo + Next + GitHubPages 搭建漂亮的免费博客</title>
    <link href="https://www.lishaoy.net/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2.html"/>
    <id>https://www.lishaoy.net/我的第一篇博客.html</id>
    <published>2018-03-24T12:32:26.000Z</published>
    <updated>2018-03-30T16:09:12.000Z</updated>
    
    <content type="html"><![CDATA[<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="/我的第一篇博客/git_hexo.jpeg" class="full-image" alt="GitHubPages + Hexo" title="GitHubPages + Hexo"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><div class="text-center">    <h3>今天搭建了自己的博客 😝</h3></div><p>花费了 <strong>一天半</strong> 的时间，终于把我的 <strong>个人博客</strong> 搭建完成，下面我写下搭建博客的过程，其实挺简单的 🙃</p><hr><a id="more"></a><h3 id="博客所用技术-（Hexo-Next-GitHubPages）"><a href="#博客所用技术-（Hexo-Next-GitHubPages）" class="headerlink" title="博客所用技术 （Hexo + Next + GitHubPages）"></a>博客所用技术 （Hexo + Next + GitHubPages）</h3><p>在文章的末尾我会 <strong>贴出</strong> 我基于 <strong>Hexo + Next + GitHubPages</strong> 搭建博客，所参考的文章链接。</p><p>如果，你也想用这些技术搭建漂亮的博客，你就需要了解下 <code>Hexo</code> 、 <code>Next</code> 、 <code>GitHubPages</code> 这三个单词，下面会逐个解释。</p><h4 id="什么是-Hexo"><a href="#什么是-Hexo" class="headerlink" title="什么是 Hexo"></a>什么是 Hexo</h4><blockquote><p><strong>Hexo</strong> 是一个快速、简洁且高效的博客框架。<strong>Hexo</strong> 使用 <em>Markdown</em>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 – <a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo</a></p></blockquote><h4 id="什么是-Next"><a href="#什么是-Next" class="headerlink" title="什么是 Next"></a>什么是 Next</h4><blockquote><p><strong>NexT</strong> 是 <strong>Hexo</strong>的一个主题（theme），拥有丰富而简单的配置，结合第三方服务，可以打造属于您自己的博客。 – <a href="http://theme-next.iissnan.com" target="_blank" rel="noopener">Next</a></p></blockquote><h4 id="什么是-GitHubPages"><a href="#什么是-GitHubPages" class="headerlink" title="什么是 GitHubPages"></a>什么是 GitHubPages</h4><blockquote><p>GitHub Pages is a static site hosting service designed to host your personal, organization, or project pages directly from a GitHub repository. – <a href="https://help.github.com/articles/what-is-github-pages/" target="_blank" rel="noopener">GitHubPages</a></p></blockquote><p><strong>翻译过来大概是：</strong> GitHub页面是一个静态的站点托管服务，旨在从GitHub存储库中直接托管您的个人、组织或项目页面。</p><p>所以，<code>Hexo</code> 、 <code>Next</code> 、 <code>GitHubPages</code> 配合起来就可以免费搭建漂亮的 <strong>个人博客</strong> , 是不是很爽 😆</p><hr><h3 id="如何基于-Hexo-搭建博客"><a href="#如何基于-Hexo-搭建博客" class="headerlink" title="如何基于 Hexo 搭建博客"></a>如何基于 Hexo 搭建博客</h3><p>基于 Hexo 搭建博客，只需简单的几步，就能完成 <strong>个人博客</strong> 的搭建。</p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><h5 id="下载安装-nodejs"><a href="#下载安装-nodejs" class="headerlink" title="下载安装 nodejs"></a>下载安装 <code>nodejs</code></h5><p><code>node</code> 会自带 <code>npm</code> 包管理工具，<em>建议安装</em> <code>yarn</code> 来管理依赖 （因为 <code>hexo</code> 貌似是用 <code>yarn</code> 管理 <strong>依赖</strong> 的，否则可以回出现 <strong>依赖</strong> 问题）。</p><p><strong>Mac</strong> 用户可以用 <code>brew</code> 安装，<strong>Windows</strong> 可以用 <code>cmder</code> 或去官网下安装包程序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><p>然后用 <code>npm</code> 安装 <code>yarn</code></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install yarn</span><br></pre></td></tr></table></figure><h5 id="安装-git"><a href="#安装-git" class="headerlink" title="安装 git"></a>安装 <code>git</code></h5><p><strong>Mac</strong> 用户可用刚安装的 <code>yarn</code> 包管理工具安装 <code>git</code>，<strong>Windows</strong> 可以 <code>cmder</code> 或去官网下安装包程序。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn <span class="built_in">add</span> git -g</span><br></pre></td></tr></table></figure><h5 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 <code>hexo</code></h5><p>进入你的项目目录，比如我的是 <code>myblog</code> ，</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> myblog</span><br></pre></td></tr></table></figure><p>然后用 <code>yarn</code> 安装 <code>hexo</code>。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn <span class="built_in">add</span> hexo -S</span><br></pre></td></tr></table></figure><p>此时，环境都准备好了，就可以开始搭建 <strong>hexo</strong> 博客了 😜</p><hr><h4 id="搭建本地博客"><a href="#搭建本地博客" class="headerlink" title="搭建本地博客"></a>搭建本地博客</h4><h5 id="进入你的项目目录"><a href="#进入你的项目目录" class="headerlink" title="进入你的项目目录"></a>进入你的项目目录</h5><p>比如：我的是 <code>myblog</code>。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> myblog</span><br></pre></td></tr></table></figure><h5 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h5><p>项目初始化，会自动生成博客模板，以后写博客只需用 <code>markdown</code> 语法编写对应的 <code>.md</code> 文件即可 ✍️ 。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><h5 id="安装所有的依赖"><a href="#安装所有的依赖" class="headerlink" title="安装所有的依赖"></a>安装所有的依赖</h5><p>建议使用用 <code>yarn</code> ，否则会出现依赖问题（<em>在本文之后有相关介绍</em>）。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn install</span><br></pre></td></tr></table></figure><h5 id="最后，启动本地服务"><a href="#最后，启动本地服务" class="headerlink" title="最后，启动本地服务"></a>最后，启动本地服务</h5><p>在浏览器输入 <code>localhost:4000</code> 即可预览博客</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p><strong>如图:</strong> 🌁 <br><img src="/我的第一篇博客/hexoinit.png" alt="hexo" width="100%" title="hexo最初的样子 😂" align="center"></p><hr><h3 id="关联-GitHub"><a href="#关联-GitHub" class="headerlink" title="关联 GitHub"></a>关联 GitHub</h3><p>通过 <strong>GitHub</strong> 的 <code>pages</code> 功能，我们可以把我们的博客托管到 <strong>GitHub</strong> ，而无需去购买云服务器 😋 ,轻松愉快的构建免费博客。</p><h4 id="创建-GitHub-账户"><a href="#创建-GitHub-账户" class="headerlink" title="创建 GitHub 账户"></a>创建 GitHub 账户</h4><p>我相信 🤔 大家应该都有 <strong>GitHub</strong> 账号了，如果没有可去 <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> 官网按照步骤创建账户即可。</p><h4 id="配置关联-GitHub"><a href="#配置关联-GitHub" class="headerlink" title="配置关联 GitHub"></a>配置关联 GitHub</h4><ul><li>有了 <strong>GitHub</strong> 账号之后，登录 <strong>GitHub</strong> ，创建一个项目，项目名称最好和你本地的项目一致，比如： <code>myblog</code></li></ul><div class="note danger"><p>项目建好之后，一定要开启 <strong>GitHub Pages</strong> 功能 ⚠️</p></div><ul><li>点击如图 <code>Settings</code> 开启，<strong>GitHub Pages</strong> 功能</li></ul><p><img src="/我的第一篇博客/gitpages.png" alt="GitHubPages" width="100%" title="GitHubPages Settings" align="center"></p><ul><li>选择 <code>master branch</code> , 然后 <strong>Save</strong> </li></ul><p><img src="/我的第一篇博客/gitpages2.png" alt="GitHubPages" width="100%" title="GitHubPages Source" align="center"></p><ul><li>复制你的项目连接，如图</li></ul><p><img src="/我的第一篇博客/gitpages3.png" alt="GitHubPages" width="100%" title="GitHubPages URL" align="center"></p><ul><li>然后在你本地项目根目录找到 <code>_config.yml</code> 文件，粘贴到以下位置</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repository:</span> <span class="attr">https://github.com/persilee/MyBlog.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h4 id="完成关联"><a href="#完成关联" class="headerlink" title="完成关联"></a>完成关联</h4><p>完成以上步骤之后，就可以把自己本地项目推送到 <strong>GitHub</strong> 托管，只剩下3步 😋</p><ol><li>安装 <code>hexo-deployer-git</code> 插件（可以通过简单的命令,完成文件生成及推送功能）</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn <span class="built_in">add</span> hexo-deployer-git -S</span><br></pre></td></tr></table></figure><ol start="2"><li>运行 <code>hexo g</code> （生成本地文件）</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><ol start="3"><li>运行 <code>hexo d</code> （将本地文件推送到 <strong>GitHub</strong> ，和 <code>git push</code> 功能相同）</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>此时，<strong>GitHub</strong> 应该已给你生成了访问连接，连接格式是: <code>你的账号名称</code> + <code>.github.io</code> + <code>\项目名称</code>,也可以去刚才 <code>GitHubPages</code> 设置页面查看例如我的：<a href="https:\\persilee.github.io\MyBlog" target="_blank" rel="noopener">https:\persilee.github.io\MyBlog</a></p><p>这时，你就可以把连接发给小伙伴们，他们通过连接都可以访问你的 <strong>博客</strong> 🙃。</p><div class="note danger"><p><strong>这里需要注意的地方是：在执行 <code>hexo g</code> 命令时候，可能会出现以下 <code>error</code>,应该是 <code>yarn</code> 和 <code>npm</code> 冲突的依赖的问题，所以前面文章建议使用 <code>yarn</code> 管理包依赖</strong></p></div><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ERROR Plugin load failed: hexo-renderer-marked</span><br><span class="line">Error: EISDIR: illegal operation <span class="keyword">on</span> <span class="keyword">a</span> directory, <span class="keyword">read</span></span><br><span class="line">ERROR Plugin load failed: hexo-server</span><br><span class="line">Error: EISDIR: illegal operation <span class="keyword">on</span> <span class="keyword">a</span> directory, <span class="keyword">read</span></span><br><span class="line">ERROR Plugin load failed: hexo-renderer-stylus</span><br><span class="line">Error: EISDIR: illegal operation <span class="keyword">on</span> <span class="keyword">a</span> directory, <span class="keyword">read</span></span><br></pre></td></tr></table></figure><p>解决办法，先用 <code>yarn</code> 分别移除，再重新安装，如下</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">## 先移除</span><br><span class="line">yarn <span class="built_in">remove</span> hexo-renderer-marked</span><br><span class="line"></span><br><span class="line">yarn <span class="built_in">remove</span> hexo-renderer-stylus</span><br><span class="line"></span><br><span class="line">yarn <span class="built_in">remove</span> hexo-server</span><br><span class="line"></span><br><span class="line">## 再安装</span><br><span class="line">yarn <span class="built_in">add</span> hexo-renderer-marked -S </span><br><span class="line"></span><br><span class="line">yarn <span class="built_in">add</span> hexo-renderer-stylus -S</span><br><span class="line"></span><br><span class="line">yarn <span class="built_in">add</span> hexo-server -S</span><br></pre></td></tr></table></figure><p>在执行 <code>hexo g</code> ,顺利执行 👌</p><hr><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>我们已经可以通过 <strong>GitHub</strong> 分发给我的地址访问 <strong>博客</strong> ，但是，这对于我们这些爱 <strong>折腾</strong> 的 <strong>程序猿👨‍💻‍</strong> 来说，还不够，弄个自己的 <strong>域名</strong> 才够拉风😂。</p><p>于是。。。</p><p>开始绑定自己的 <strong>域名</strong> <a href="https://lishaoy.net" target="_blank" rel="noopener">lishaoy.net</a></p><p>然而，我们绑定 <strong>域名</strong> 之后，只支持 <code>http</code> 协议，这样我们在 <strong>Google</strong> 浏览器访问时，会有不安全标准，而且，很容易被插入广告，于是。。。<strong>折腾</strong> 走起🌝：搞个 <code>https</code></p><p>转入正题，经过一番 <strong>折腾</strong> ，采用第三方服务 <a href="https://app.netlify.com/sites/lishaoy/settings/domain#ssl-tls-certificate" target="_blank" rel="noopener">Netlify</a> 来提供免费的SSL/TLS证书。</p><p>当然，这里我提供2种方式绑定域名，一种是 <code>HTTP</code> (不安全的网络协议)、一种是 <code>HTTPS</code> （安全的网络协议，在 <strong>Google</strong> 浏览器上回有一把小锁，如图）</p><p><img src="/我的第一篇博客/lock.png" alt="Netlity" width="100%" title="Google HTTPS 状态标识" align="center"></p><h4 id="HTTP-绑定域名"><a href="#HTTP-绑定域名" class="headerlink" title="HTTP 绑定域名"></a><code>HTTP</code> 绑定域名</h4><h5 id="设置域名解析规则"><a href="#设置域名解析规则" class="headerlink" title="设置域名解析规则"></a>设置域名解析规则</h5><p>首先，我们需要去运行商，新增域名解析规则，如图</p><p><img src="/我的第一篇博客/domain.png" alt="domain" width="100%" title="域名解析规则" align="center"></p><h5 id="新增-CNAME-文件"><a href="#新增-CNAME-文件" class="headerlink" title="新增 CNAME 文件"></a>新增 <code>CNAME</code> 文件</h5><p>配置好域名解析规则之后，还需要在项目的 <code>.\source\</code> 路径下新增 <code>CNAME</code> 文件，输入内容 <code>你的域名</code> ,如：<a href="https://lishaoy.net" target="_blank" rel="noopener">lishaoy.net</a></p><h5 id="重新新生成文件，推送到GitHub"><a href="#重新新生成文件，推送到GitHub" class="headerlink" title="重新新生成文件，推送到GitHub"></a>重新新生成文件，推送到GitHub</h5><p>重新生成文件，运行 <code>hexo g</code></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>推送 <strong>GitHub</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><hr><h4 id="HTTPS-绑定域名"><a href="#HTTPS-绑定域名" class="headerlink" title="HTTPS 绑定域名"></a><code>HTTPS</code> 绑定域名</h4><h5 id="注册-Netlify-账号"><a href="#注册-Netlify-账号" class="headerlink" title="注册 Netlify 账号"></a>注册 <code>Netlify</code> 账号</h5><p>首先，我们需要注册一个 <a href="https://app.netlify.com/sites/lishaoy/settings/domain#ssl-tls-certificate" target="_blank" rel="noopener">Netlify</a> 账号，地址：<a href="https://app.netlify.com/sites/lishaoy/settings/domain#ssl-tls-certificate" target="_blank" rel="noopener">Netlify</a> ，可以选择用 <strong>GitHub</strong> 注册。</p><p><img src="/我的第一篇博客/netlify.png" alt="Netlity" width="100%" title="Netlity Login" align="center"></p><h5 id="新增站点"><a href="#新增站点" class="headerlink" title="新增站点"></a>新增站点</h5><ul><li>点击如图按钮 <code>New site from Git</code>,来新增 <strong>站点</strong></li></ul><p><img src="/我的第一篇博客/netlify1.png" alt="Netlity" width="100%" title="New site from Git" align="center"></p><ul><li>然后，点击如图按钮 <code>GitHub</code> </li></ul><p><img src="/我的第一篇博客/netlify2.png" alt="Netlity" width="100%" title="GitHub" align="center"></p><ul><li>选择你的项目，比如我的 <code>MyBlog</code></li></ul><p><img src="/我的第一篇博客/netlify3.png" alt="Netlity" width="100%" title="Select Site" align="center"></p><ul><li>点击 <code>Deploy site</code></li></ul><p><img src="/我的第一篇博客/netlify4.png" alt="Netlity" width="100%" title="Deploy site" align="center"></p><ul><li>看到如图页面，表示成功，再点击 <code>Site settings</code> </li></ul><p><img src="/我的第一篇博客/netlify5.png" alt="Netlity" width="100%" title="Getting started" align="center"></p><p><img src="/我的第一篇博客/netlify6.png" alt="Netlity" width="100%" title="Site details" align="center"></p><ul><li><p>再点击 <code>Change site name</code> 修改短名称，方便记忆</p></li><li><p>在自己的域名管理中设置 <strong>DNS</strong> ，我使用的是 <strong>阿里云</strong> ，在管理界面添加如图规则</p></li></ul><p><img src="/我的第一篇博客/netlify7.png" alt="Netlity" width="100%" title="设置域名规则" align="center"></p><ul><li>在点击 <code>Domain management</code> 下的 <code>HTTPS</code> ，按照步骤完成操作，稍等片刻，即可看到我们的 <strong>域名</strong> 已经上锁 🔐 </li></ul><p><img src="/我的第一篇博客/netlify8.png" alt="Netlity" width="100%" title="lishaoy.net上锁" align="center"></p><p>😝 😜 😄 😆 😂 🤣 …</p><hr><h3 id="更换-next-主题"><a href="#更换-next-主题" class="headerlink" title="更换 next 主题"></a>更换 <code>next</code> 主题</h3><p><code>hexo</code> 的主题很多，你可以选择其他喜欢 ❤️ 的主题，我使用的是 <code>next</code> 主题。</p><h4 id="安装-next-主题"><a href="#安装-next-主题" class="headerlink" title="安装 next 主题"></a>安装 <code>next</code> 主题</h4><p>执行以下命令，安装 <code>next</code> 主题</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/iissnan/hexo-theme-<span class="keyword">next</span>.git themes/<span class="keyword">next</span></span><br></pre></td></tr></table></figure><h4 id="更改配置文件"><a href="#更改配置文件" class="headerlink" title="更改配置文件"></a>更改配置文件</h4><p>修改根目录下的 <code>./_config.yml</code> 文件，如下</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugin<span class="variable">s:</span> http<span class="variable">s:</span>//hexo.io/plugins/</span><br><span class="line">## Theme<span class="variable">s:</span> http<span class="variable">s:</span>//hexo.io/themes/</span><br><span class="line">theme: <span class="keyword">next</span></span><br></pre></td></tr></table></figure><h5 id="重新新生成文件，推送到GitHub-1"><a href="#重新新生成文件，推送到GitHub-1" class="headerlink" title="重新新生成文件，推送到GitHub"></a>重新新生成文件，推送到GitHub</h5><p>重新生成文件，运行 <code>hexo g</code></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>推送 <strong>GitHub</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>也可以运行以下命令，启动一个本地服务，调试确定无问题之后再 推送到 <strong>GitHub</strong> </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s --<span class="keyword">debug</span></span><br></pre></td></tr></table></figure><p>本地服务启动后，可以在浏览器输入 <code>http://localhost:4000</code> 预览，如图</p><p><img src="/我的第一篇博客/nextpage.png" alt="next" width="100%" title="next 主题最初的样子🙃" align="center"></p><p><strong>本文到此告一段落，关于 <code>next</code> 主题美化的问题，可以参考以下链接文章 🤗</strong></p><p>以下是我搭建 <strong>博客</strong> 参考的文章链接 👇 </p><div class="note default"><ul><li><a href="http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html" target="_blank" rel="noopener">hexo的next主题个性化教程:打造炫酷网站</a></li><li><a href="https://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/" target="_blank" rel="noopener">Hexo搭建博客教程</a></li><li><a href="https://www.jianshu.com/p/d95cff938277" target="_blank" rel="noopener">Hexo博客搭建全攻略(二)：NexT主题配置</a></li></ul></div>]]></content>
    
    <summary type="html">
    
      &lt;span itemprop=&quot;image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;/我的第一篇博客/git_hexo.jpeg&quot; class=&quot;full-image&quot; alt=&quot;GitHubPages + Hexo&quot; title=&quot;GitHubPages + Hexo&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;div class=&quot;text-center&quot;&gt;
    &lt;h3&gt;今天搭建了自己的博客 😝&lt;/h3&gt;
&lt;/div&gt;

&lt;p&gt;花费了 &lt;strong&gt;一天半&lt;/strong&gt; 的时间，终于把我的 &lt;strong&gt;个人博客&lt;/strong&gt; 搭建完成，下面我写下搭建博客的过程，其实挺简单的 🙃&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://www.lishaoy.net/categories/Hexo/"/>
    
    
      <category term="博客" scheme="https://www.lishaoy.net/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Hexo" scheme="https://www.lishaoy.net/tags/Hexo/"/>
    
      <category term="GithubPages" scheme="https://www.lishaoy.net/tags/GithubPages/"/>
    
      <category term="Next" scheme="https://www.lishaoy.net/tags/Next/"/>
    
      <category term="Blog" scheme="https://www.lishaoy.net/tags/Blog/"/>
    
  </entry>
  
</feed>
